{
	"id": "4fe5aae3c1e588516aad91ae6a64377d",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.0",
	"solcLongVersion": "0.8.0+commit.c7dfd78e",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/uniV2Pool.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.0;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/utils/math/Math.sol';\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\n\ncontract Univ2Protocal is Ownable{\n\n    uint256 private aAmount;\n\n    uint256 private bAmount;\n\n    address private coinA;\n\n    address private coinB;\n\n    function setCoinPair(address _a, address _b) external onlyOwner{\n        coinA = _a;\n        coinB = _b;\n    }\n\n    function queryPair() external view returns (address, address){\n        return (coinA, coinB);\n    }\n\n    function addLiquidity(uint256 _aAmount, uint256 _bAmount) external onlyOwner returns (uint256, uint256) {\n        // 把授权过的A 币种    转到当前合约内\n        IERC20(coinA).transferFrom(msg.sender, address(this), _aAmount);\n        // 把授权过的B 币种    转到当前合约内\n        IERC20(coinB).transferFrom(msg.sender, address(this), _bAmount);\n\n        (bool successA, uint256 resA) = SafeMath.tryAdd(aAmount, _aAmount);\n        (bool successB, uint256 resB) = SafeMath.tryAdd(bAmount, _bAmount);\n        require(successA && successB, \"add fail , by SafeMath.tryAdd\");\n        aAmount = resA;\n        bAmount = resB;\n        return (aAmount, bAmount);\n    }\n\n    function swap(address _tokenIn, uint256 _amountIn, uint256 _amountOutMin, address _to) external {\n        require(_tokenIn != address(0), \"tokenIn can not be zero address\");\n        require(_to != address(0), \"_to can not be zero address\");\n        require(_tokenIn == coinA || _tokenIn == coinB, \"tokenIn must be A or B that has be set\");\n\n        //coin A to coin B\n        if (_tokenIn == coinA) {\n\n            // 把授权过的A 币种    转到当前合约内\n            IERC20(coinA).transferFrom(msg.sender, address(this), _amountIn);\n\n            (bool success, uint res) = SafeMath.tryAdd(aAmount, _amountIn);\n            require(success, \"tokenIn amount add fail, source from safeMath\");\n            aAmount = res;\n\n            uint256 swapAmount = Math.mulDiv(_amountIn, bAmount, aAmount);\n            require(swapAmount > _amountOutMin, \"amountOut less than _amountOutMin\");\n            require(swapAmount < bAmount, \"tokenOut amount not enough\");\n            bAmount -= swapAmount;\n\n            // 把兑换出的币种 B发到指定的 _to 去\n            IERC20(coinB).transfer(_to, swapAmount);\n        //coin A to coin B\n        }else if (_tokenIn == coinB) {\n\n            // 把授权过的B 币种    转到当前合约内\n            IERC20(coinA).transferFrom(msg.sender, address(this), _amountIn);\n\n            (bool success, uint res) = SafeMath.tryAdd(bAmount, _amountIn);\n            require(success, \"tokenIn amount add fail, source from safeMath\");\n            bAmount = res;\n\n            uint256 swapAmount = Math.mulDiv(_amountIn, aAmount, bAmount);\n            require(swapAmount > _amountOutMin, \"amountOut less than _amountOutMin\");\n            require(swapAmount < aAmount, \"tokenOut amount not enough\");\n            aAmount -= swapAmount;\n\n            // 把兑换出的币种 B发到指定的 _to 去\n            IERC20(coinA).transfer(_to, swapAmount);\n        }\n    }\n\n    function _checkInit() internal view {\n        require(coinA != address(0), \"coinA has not be set\");\n        require(coinB != address(0), \"coinB has not be set\");\n    }\n\n}"
			},
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"Math": {
					"abi": [],
					"devdoc": {
						"details": "Standard math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/Math.sol\":202:12504  library Math {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":202:12504  library Math {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220fecaf10f6dc1ee8a47c6764622c5ddf3af8f84b99e553cf1f83b14e53d148ca264736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fecaf10f6dc1ee8a47c6764622c5ddf3af8f84b99e553cf1f83b14e53d148ca264736f6c63430008000033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 INVALID 0xCA CALL 0xF PUSH14 0xC1EE8A47C6764622C5DDF3AF8F84 0xB9 SWAP15 SSTORE EXTCODECOPY CALL 0xF8 EXTCODESIZE EQ 0xE5 RETURNDATASIZE EQ DUP13 LOG2 PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER ",
							"sourceMap": "202:12302:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fecaf10f6dc1ee8a47c6764622c5ddf3af8f84b99e553cf1f83b14e53d148ca264736f6c63430008000033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 INVALID 0xCA CALL 0xF PUSH14 0xC1EE8A47C6764622C5DDF3AF8F84 0xB9 SWAP15 SSTORE EXTCODECOPY CALL 0xF8 EXTCODESIZE EQ 0xE5 RETURNDATASIZE EQ DUP13 LOG2 PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER ",
							"sourceMap": "202:12302:3:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"average(uint256,uint256)": "infinite",
								"ceilDiv(uint256,uint256)": "infinite",
								"log10(uint256)": "infinite",
								"log10(uint256,enum Math.Rounding)": "infinite",
								"log2(uint256)": "infinite",
								"log2(uint256,enum Math.Rounding)": "infinite",
								"log256(uint256)": "infinite",
								"log256(uint256,enum Math.Rounding)": "infinite",
								"max(uint256,uint256)": "infinite",
								"min(uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256,enum Math.Rounding)": "infinite",
								"sqrt(uint256)": "infinite",
								"sqrt(uint256,enum Math.Rounding)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 3,
									"value": "B"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "BYTE",
									"source": 3
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 3,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 3,
									"value": "24"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "ADDRESS",
									"source": 3
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "MSTORE8",
									"source": 3
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220fecaf10f6dc1ee8a47c6764622c5ddf3af8f84b99e553cf1f83b14e53d148ca264736f6c63430008000033",
									".code": [
										{
											"begin": 202,
											"end": 12504,
											"name": "PUSHDEPLOYADDRESS",
											"source": 3
										},
										{
											"begin": 202,
											"end": 12504,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 202,
											"end": 12504,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 202,
											"end": 12504,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 202,
											"end": 12504,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 202,
											"end": 12504,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 202,
											"end": 12504,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 202,
											"end": 12504,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 202,
											"end": 12504,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33bbf48cc069be677705037ba7520c22b1b622c23b33e1a71495f2d36549d40b\",\"dweb:/ipfs/Qmct36zWXv3j7LZB83uwbg7TXwnZSN1fqHNDZ93GG98bGz\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":482:6782  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":482:6782  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212205e8fd0ae6979a6e3ada696877010759725fdbc8320829900f76947661cb990b664736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205e8fd0ae6979a6e3ada696877010759725fdbc8320829900f76947661cb990b664736f6c63430008000033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5E DUP16 0xD0 0xAE PUSH10 0x79A6E3ADA69687701075 SWAP8 0x25 REVERT 0xBC DUP4 KECCAK256 DUP3 SWAP10 STOP 0xF7 PUSH10 0x47661CB990B664736F6C PUSH4 0x43000800 STOP CALLER ",
							"sourceMap": "482:6300:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205e8fd0ae6979a6e3ada696877010759725fdbc8320829900f76947661cb990b664736f6c63430008000033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5E DUP16 0xD0 0xAE PUSH10 0x79A6E3ADA69687701075 SWAP8 0x25 REVERT 0xBC DUP4 KECCAK256 DUP3 SWAP10 STOP 0xF7 PUSH10 0x47661CB990B664736F6C PUSH4 0x43000800 STOP CALLER ",
							"sourceMap": "482:6300:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 4,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212205e8fd0ae6979a6e3ada696877010759725fdbc8320829900f76947661cb990b664736f6c63430008000033",
									".code": [
										{
											"begin": 482,
											"end": 6782,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://864a40efcffdf408044c332a5aa38ec5618ed7b4eecb8f65faf45671bd6cdc65\",\"dweb:/ipfs/QmQJquTMtc6fgm5JQzGdsGpA2fqBe3MHWEdt2qzaLySMdN\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/uniV2Pool.sol": {
				"Univ2Protocal": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_aAmount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_bAmount",
									"type": "uint256"
								}
							],
							"name": "addLiquidity",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "queryPair",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_a",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_b",
									"type": "address"
								}
							],
							"name": "setCoinPair",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_tokenIn",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_amountIn",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_amountOutMin",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								}
							],
							"name": "swap",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/uniV2Pool.sol\":279:3429  contract Univ2Protocal is Ownable{... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:968  _transferOwnership(_msgSender()) */\n  tag_4\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":955:967  _msgSender() */\n  tag_5\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":955:965  _msgSender */\n  shl(0x20, tag_6)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":955:967  _msgSender() */\n  0x20\n  shr\n  jump\t// in\ntag_5:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:954  _transferOwnership */\n  shl(0x20, tag_7)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:968  _transferOwnership(_msgSender()) */\n  0x20\n  shr\n  jump\t// in\ntag_4:\n    /* \"contracts/uniV2Pool.sol\":279:3429  contract Univ2Protocal is Ownable{... */\n  jump(tag_8)\n    /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\ntag_6:\n    /* \"@openzeppelin/contracts/utils/Context.sol\":693:700  address */\n  0x00\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/utils/Context.sol\":712:729  return msg.sender */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n  swap1\n  jump\t// out\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\ntag_7:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n  dup1\n  0x00\n  swap1\n  sload\n  swap1\n  0x0100\n  exp\n  swap1\n  div\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2531  address oldOwner = _owner */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2550:2558  newOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2547  _owner */\n  0x00\n  dup1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2558  _owner = newOwner */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2604:2612  newOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2594:2602  oldOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  mload(0x40)\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  pop\n  jump\t// out\n    /* \"contracts/uniV2Pool.sol\":279:3429  contract Univ2Protocal is Ownable{... */\ntag_8:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/uniV2Pool.sol\":279:3429  contract Univ2Protocal is Ownable{... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x8da5cb5b\n      gt\n      tag_10\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x9cd441da\n      eq\n      tag_7\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xf3e6ea8a\n      eq\n      tag_9\n      jumpi\n      jump(tag_2)\n    tag_10:\n      dup1\n      0x1a727c26\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x6f9632da\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_5\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/uniV2Pool.sol\":551:650  function queryPair() external view returns (address, address){... */\n    tag_3:\n      tag_11\n      tag_12\n      jump\t// in\n    tag_11:\n      mload(0x40)\n      tag_13\n      swap3\n      swap2\n      swap1\n      tag_14\n      jump\t// in\n    tag_13:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/uniV2Pool.sol\":435:545  function setCoinPair(address _a, address _b) external onlyOwner{... */\n    tag_4:\n      tag_15\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_16\n      swap2\n      swap1\n      tag_17\n      jump\t// in\n    tag_16:\n      tag_18\n      jump\t// in\n    tag_15:\n      stop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n    tag_5:\n      tag_19\n      tag_20\n      jump\t// in\n    tag_19:\n      stop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n    tag_6:\n      tag_21\n      tag_22\n      jump\t// in\n    tag_21:\n      mload(0x40)\n      tag_23\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_23:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/uniV2Pool.sol\":656:1341  function addLiquidity(uint256 _aAmount, uint256 _bAmount) external onlyOwner returns (uint256, uint256) {... */\n    tag_7:\n      tag_25\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_26\n      swap2\n      swap1\n      tag_27\n      jump\t// in\n    tag_26:\n      tag_28\n      jump\t// in\n    tag_25:\n      mload(0x40)\n      tag_29\n      swap3\n      swap2\n      swap1\n      tag_30\n      jump\t// in\n    tag_29:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_8:\n      tag_31\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_32\n      swap2\n      swap1\n      tag_33\n      jump\t// in\n    tag_32:\n      tag_34\n      jump\t// in\n    tag_31:\n      stop\n        /* \"contracts/uniV2Pool.sol\":1347:3253  function swap(address _tokenIn, uint256 _amountIn, uint256 _amountOutMin, address _to) external {... */\n    tag_9:\n      tag_35\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_36\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_36:\n      tag_38\n      jump\t// in\n    tag_35:\n      stop\n        /* \"contracts/uniV2Pool.sol\":551:650  function queryPair() external view returns (address, address){... */\n    tag_12:\n        /* \"contracts/uniV2Pool.sol\":595:602  address */\n      0x00\n        /* \"contracts/uniV2Pool.sol\":604:611  address */\n      dup1\n        /* \"contracts/uniV2Pool.sol\":630:635  coinA */\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/uniV2Pool.sol\":637:642  coinB */\n      0x04\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/uniV2Pool.sol\":622:643  return (coinA, coinB) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/uniV2Pool.sol\":551:650  function queryPair() external view returns (address, address){... */\n      swap1\n      swap2\n      jump\t// out\n        /* \"contracts/uniV2Pool.sol\":435:545  function setCoinPair(address _a, address _b) external onlyOwner{... */\n    tag_18:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_41\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_42\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_41:\n        /* \"contracts/uniV2Pool.sol\":516:518  _a */\n      dup2\n        /* \"contracts/uniV2Pool.sol\":508:513  coinA */\n      0x03\n      0x00\n        /* \"contracts/uniV2Pool.sol\":508:518  coinA = _a */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/uniV2Pool.sol\":536:538  _b */\n      dup1\n        /* \"contracts/uniV2Pool.sol\":528:533  coinB */\n      0x04\n      0x00\n        /* \"contracts/uniV2Pool.sol\":528:538  coinB = _b */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/uniV2Pool.sol\":435:545  function setCoinPair(address _a, address _b) external onlyOwner{... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n    tag_20:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_45\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_42\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_45:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1925  _transferOwnership(address(0)) */\n      tag_47\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1922:1923  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1913  _transferOwnership */\n      tag_48\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1925  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_47:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n    tag_22:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1247:1254  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1279  _owner */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1266:1279  return _owner */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/uniV2Pool.sol\":656:1341  function addLiquidity(uint256 _aAmount, uint256 _bAmount) external onlyOwner returns (uint256, uint256) {... */\n    tag_28:\n        /* \"contracts/uniV2Pool.sol\":742:749  uint256 */\n      0x00\n        /* \"contracts/uniV2Pool.sol\":751:758  uint256 */\n      dup1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_51\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_42\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_51:\n        /* \"contracts/uniV2Pool.sol\":837:842  coinA */\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/uniV2Pool.sol\":830:856  IERC20(coinA).transferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x23b872dd\n        /* \"contracts/uniV2Pool.sol\":857:867  msg.sender */\n      caller\n        /* \"contracts/uniV2Pool.sol\":877:881  this */\n      address\n        /* \"contracts/uniV2Pool.sol\":884:892  _aAmount */\n      dup8\n        /* \"contracts/uniV2Pool.sol\":830:893  IERC20(coinA).transferFrom(msg.sender, address(this), _aAmount) */\n      mload(0x40)\n      dup5\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_53\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_54\n      jump\t// in\n    tag_53:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_55\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_55:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_57\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_57:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_58\n      swap2\n      swap1\n      tag_59\n      jump\t// in\n    tag_58:\n      pop\n        /* \"contracts/uniV2Pool.sol\":970:975  coinB */\n      0x04\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/uniV2Pool.sol\":963:989  IERC20(coinB).transferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x23b872dd\n        /* \"contracts/uniV2Pool.sol\":990:1000  msg.sender */\n      caller\n        /* \"contracts/uniV2Pool.sol\":1010:1014  this */\n      address\n        /* \"contracts/uniV2Pool.sol\":1017:1025  _bAmount */\n      dup7\n        /* \"contracts/uniV2Pool.sol\":963:1026  IERC20(coinB).transferFrom(msg.sender, address(this), _bAmount) */\n      mload(0x40)\n      dup5\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_60\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_54\n      jump\t// in\n    tag_60:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_61\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_61:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_63\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_63:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_64\n      swap2\n      swap1\n      tag_59\n      jump\t// in\n    tag_64:\n      pop\n        /* \"contracts/uniV2Pool.sol\":1038:1051  bool successA */\n      0x00\n        /* \"contracts/uniV2Pool.sol\":1053:1065  uint256 resA */\n      dup1\n        /* \"contracts/uniV2Pool.sol\":1069:1103  SafeMath.tryAdd(aAmount, _aAmount) */\n      tag_65\n        /* \"contracts/uniV2Pool.sol\":1085:1092  aAmount */\n      sload(0x01)\n        /* \"contracts/uniV2Pool.sol\":1094:1102  _aAmount */\n      dup8\n        /* \"contracts/uniV2Pool.sol\":1069:1084  SafeMath.tryAdd */\n      tag_66\n        /* \"contracts/uniV2Pool.sol\":1069:1103  SafeMath.tryAdd(aAmount, _aAmount) */\n      jump\t// in\n    tag_65:\n        /* \"contracts/uniV2Pool.sol\":1037:1103  (bool successA, uint256 resA) = SafeMath.tryAdd(aAmount, _aAmount) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/uniV2Pool.sol\":1114:1127  bool successB */\n      0x00\n        /* \"contracts/uniV2Pool.sol\":1129:1141  uint256 resB */\n      dup1\n        /* \"contracts/uniV2Pool.sol\":1145:1179  SafeMath.tryAdd(bAmount, _bAmount) */\n      tag_67\n        /* \"contracts/uniV2Pool.sol\":1161:1168  bAmount */\n      sload(0x02)\n        /* \"contracts/uniV2Pool.sol\":1170:1178  _bAmount */\n      dup9\n        /* \"contracts/uniV2Pool.sol\":1145:1160  SafeMath.tryAdd */\n      tag_66\n        /* \"contracts/uniV2Pool.sol\":1145:1179  SafeMath.tryAdd(bAmount, _bAmount) */\n      jump\t// in\n    tag_67:\n        /* \"contracts/uniV2Pool.sol\":1113:1179  (bool successB, uint256 resB) = SafeMath.tryAdd(bAmount, _bAmount) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/uniV2Pool.sol\":1197:1205  successA */\n      dup4\n        /* \"contracts/uniV2Pool.sol\":1197:1217  successA && successB */\n      dup1\n      iszero\n      tag_68\n      jumpi\n      pop\n        /* \"contracts/uniV2Pool.sol\":1209:1217  successB */\n      dup2\n        /* \"contracts/uniV2Pool.sol\":1197:1217  successA && successB */\n    tag_68:\n        /* \"contracts/uniV2Pool.sol\":1189:1251  require(successA && successB, \"add fail , by SafeMath.tryAdd\") */\n      tag_69\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_70\n      swap1\n      tag_71\n      jump\t// in\n    tag_70:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_69:\n        /* \"contracts/uniV2Pool.sol\":1271:1275  resA */\n      dup3\n        /* \"contracts/uniV2Pool.sol\":1261:1268  aAmount */\n      0x01\n        /* \"contracts/uniV2Pool.sol\":1261:1275  aAmount = resA */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/uniV2Pool.sol\":1295:1299  resB */\n      dup1\n        /* \"contracts/uniV2Pool.sol\":1285:1292  bAmount */\n      0x02\n        /* \"contracts/uniV2Pool.sol\":1285:1299  bAmount = resB */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/uniV2Pool.sol\":1317:1324  aAmount */\n      sload(0x01)\n        /* \"contracts/uniV2Pool.sol\":1326:1333  bAmount */\n      sload(0x02)\n        /* \"contracts/uniV2Pool.sol\":1309:1334  return (aAmount, bAmount) */\n      swap6\n      pop\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/uniV2Pool.sol\":656:1341  function addLiquidity(uint256 _aAmount, uint256 _bAmount) external onlyOwner returns (uint256, uint256) {... */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_34:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_73\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_42\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_73:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2189:2190  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2169:2191  newOwner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2169:2177  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2169:2191  newOwner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_75\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_76\n      swap1\n      tag_77\n      jump\t// in\n    tag_76:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_75:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2272  _transferOwnership(newOwner) */\n      tag_78\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2263:2271  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2262  _transferOwnership */\n      tag_48\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2272  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_78:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts/uniV2Pool.sol\":1347:3253  function swap(address _tokenIn, uint256 _amountIn, uint256 _amountOutMin, address _to) external {... */\n    tag_38:\n        /* \"contracts/uniV2Pool.sol\":1481:1482  0 */\n      0x00\n        /* \"contracts/uniV2Pool.sol\":1461:1483  _tokenIn != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/uniV2Pool.sol\":1461:1469  _tokenIn */\n      dup5\n        /* \"contracts/uniV2Pool.sol\":1461:1483  _tokenIn != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"contracts/uniV2Pool.sol\":1453:1519  require(_tokenIn != address(0), \"tokenIn can not be zero address\") */\n      tag_80\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_81\n      swap1\n      tag_82\n      jump\t// in\n    tag_81:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_80:\n        /* \"contracts/uniV2Pool.sol\":1552:1553  0 */\n      0x00\n        /* \"contracts/uniV2Pool.sol\":1537:1554  _to != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/uniV2Pool.sol\":1537:1540  _to */\n      dup2\n        /* \"contracts/uniV2Pool.sol\":1537:1554  _to != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"contracts/uniV2Pool.sol\":1529:1586  require(_to != address(0), \"_to can not be zero address\") */\n      tag_83\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_84\n      swap1\n      tag_85\n      jump\t// in\n    tag_84:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_83:\n        /* \"contracts/uniV2Pool.sol\":1616:1621  coinA */\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/uniV2Pool.sol\":1604:1621  _tokenIn == coinA */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/uniV2Pool.sol\":1604:1612  _tokenIn */\n      dup5\n        /* \"contracts/uniV2Pool.sol\":1604:1621  _tokenIn == coinA */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/uniV2Pool.sol\":1604:1642  _tokenIn == coinA || _tokenIn == coinB */\n      dup1\n      tag_86\n      jumpi\n      pop\n        /* \"contracts/uniV2Pool.sol\":1637:1642  coinB */\n      0x04\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/uniV2Pool.sol\":1625:1642  _tokenIn == coinB */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/uniV2Pool.sol\":1625:1633  _tokenIn */\n      dup5\n        /* \"contracts/uniV2Pool.sol\":1625:1642  _tokenIn == coinB */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/uniV2Pool.sol\":1604:1642  _tokenIn == coinA || _tokenIn == coinB */\n    tag_86:\n        /* \"contracts/uniV2Pool.sol\":1596:1685  require(_tokenIn == coinA || _tokenIn == coinB, \"tokenIn must be A or B that has be set\") */\n      tag_87\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_88\n      swap1\n      tag_89\n      jump\t// in\n    tag_88:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_87:\n        /* \"contracts/uniV2Pool.sol\":1739:1744  coinA */\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/uniV2Pool.sol\":1727:1744  _tokenIn == coinA */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/uniV2Pool.sol\":1727:1735  _tokenIn */\n      dup5\n        /* \"contracts/uniV2Pool.sol\":1727:1744  _tokenIn == coinA */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/uniV2Pool.sol\":1723:3247  if (_tokenIn == coinA) {... */\n      iszero\n      tag_90\n      jumpi\n        /* \"contracts/uniV2Pool.sol\":1832:1837  coinA */\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/uniV2Pool.sol\":1825:1851  IERC20(coinA).transferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x23b872dd\n        /* \"contracts/uniV2Pool.sol\":1852:1862  msg.sender */\n      caller\n        /* \"contracts/uniV2Pool.sol\":1872:1876  this */\n      address\n        /* \"contracts/uniV2Pool.sol\":1879:1888  _amountIn */\n      dup7\n        /* \"contracts/uniV2Pool.sol\":1825:1889  IERC20(coinA).transferFrom(msg.sender, address(this), _amountIn) */\n      mload(0x40)\n      dup5\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_91\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_54\n      jump\t// in\n    tag_91:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_92\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_92:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_94\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_94:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_95\n      swap2\n      swap1\n      tag_59\n      jump\t// in\n    tag_95:\n      pop\n        /* \"contracts/uniV2Pool.sol\":1905:1917  bool success */\n      0x00\n        /* \"contracts/uniV2Pool.sol\":1919:1927  uint res */\n      dup1\n        /* \"contracts/uniV2Pool.sol\":1931:1966  SafeMath.tryAdd(aAmount, _amountIn) */\n      tag_96\n        /* \"contracts/uniV2Pool.sol\":1947:1954  aAmount */\n      sload(0x01)\n        /* \"contracts/uniV2Pool.sol\":1956:1965  _amountIn */\n      dup7\n        /* \"contracts/uniV2Pool.sol\":1931:1946  SafeMath.tryAdd */\n      tag_66\n        /* \"contracts/uniV2Pool.sol\":1931:1966  SafeMath.tryAdd(aAmount, _amountIn) */\n      jump\t// in\n    tag_96:\n        /* \"contracts/uniV2Pool.sol\":1904:1966  (bool success, uint res) = SafeMath.tryAdd(aAmount, _amountIn) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/uniV2Pool.sol\":1988:1995  success */\n      dup2\n        /* \"contracts/uniV2Pool.sol\":1980:2045  require(success, \"tokenIn amount add fail, source from safeMath\") */\n      tag_97\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_98\n      swap1\n      tag_99\n      jump\t// in\n    tag_98:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_97:\n        /* \"contracts/uniV2Pool.sol\":2069:2072  res */\n      dup1\n        /* \"contracts/uniV2Pool.sol\":2059:2066  aAmount */\n      0x01\n        /* \"contracts/uniV2Pool.sol\":2059:2072  aAmount = res */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/uniV2Pool.sol\":2087:2105  uint256 swapAmount */\n      0x00\n        /* \"contracts/uniV2Pool.sol\":2108:2148  Math.mulDiv(_amountIn, bAmount, aAmount) */\n      tag_100\n        /* \"contracts/uniV2Pool.sol\":2120:2129  _amountIn */\n      dup7\n        /* \"contracts/uniV2Pool.sol\":2131:2138  bAmount */\n      sload(0x02)\n        /* \"contracts/uniV2Pool.sol\":2140:2147  aAmount */\n      sload(0x01)\n        /* \"contracts/uniV2Pool.sol\":2108:2119  Math.mulDiv */\n      tag_101\n        /* \"contracts/uniV2Pool.sol\":2108:2148  Math.mulDiv(_amountIn, bAmount, aAmount) */\n      jump\t// in\n    tag_100:\n        /* \"contracts/uniV2Pool.sol\":2087:2148  uint256 swapAmount = Math.mulDiv(_amountIn, bAmount, aAmount) */\n      swap1\n      pop\n        /* \"contracts/uniV2Pool.sol\":2183:2196  _amountOutMin */\n      dup5\n        /* \"contracts/uniV2Pool.sol\":2170:2180  swapAmount */\n      dup2\n        /* \"contracts/uniV2Pool.sol\":2170:2196  swapAmount > _amountOutMin */\n      gt\n        /* \"contracts/uniV2Pool.sol\":2162:2234  require(swapAmount > _amountOutMin, \"amountOut less than _amountOutMin\") */\n      tag_102\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_103\n      swap1\n      tag_104\n      jump\t// in\n    tag_103:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_102:\n        /* \"contracts/uniV2Pool.sol\":2269:2276  bAmount */\n      sload(0x02)\n        /* \"contracts/uniV2Pool.sol\":2256:2266  swapAmount */\n      dup2\n        /* \"contracts/uniV2Pool.sol\":2256:2276  swapAmount < bAmount */\n      lt\n        /* \"contracts/uniV2Pool.sol\":2248:2307  require(swapAmount < bAmount, \"tokenOut amount not enough\") */\n      tag_105\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_106\n      swap1\n      tag_107\n      jump\t// in\n    tag_106:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_105:\n        /* \"contracts/uniV2Pool.sol\":2332:2342  swapAmount */\n      dup1\n        /* \"contracts/uniV2Pool.sol\":2321:2328  bAmount */\n      0x02\n      0x00\n        /* \"contracts/uniV2Pool.sol\":2321:2342  bAmount -= swapAmount */\n      dup3\n      dup3\n      sload\n      tag_108\n      swap2\n      swap1\n      tag_109\n      jump\t// in\n    tag_108:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/uniV2Pool.sol\":2426:2431  coinB */\n      0x04\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/uniV2Pool.sol\":2419:2441  IERC20(coinB).transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xa9059cbb\n        /* \"contracts/uniV2Pool.sol\":2442:2445  _to */\n      dup6\n        /* \"contracts/uniV2Pool.sol\":2447:2457  swapAmount */\n      dup4\n        /* \"contracts/uniV2Pool.sol\":2419:2458  IERC20(coinB).transfer(_to, swapAmount) */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_110\n      swap3\n      swap2\n      swap1\n      tag_111\n      jump\t// in\n    tag_110:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_112\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_112:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_114\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_114:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_115\n      swap2\n      swap1\n      tag_59\n      jump\t// in\n    tag_115:\n      pop\n        /* \"contracts/uniV2Pool.sol\":1723:3247  if (_tokenIn == coinA) {... */\n      pop\n      pop\n      pop\n      jump(tag_116)\n    tag_90:\n        /* \"contracts/uniV2Pool.sol\":2517:2522  coinB */\n      0x04\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/uniV2Pool.sol\":2505:2522  _tokenIn == coinB */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/uniV2Pool.sol\":2505:2513  _tokenIn */\n      dup5\n        /* \"contracts/uniV2Pool.sol\":2505:2522  _tokenIn == coinB */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/uniV2Pool.sol\":2501:3247  if (_tokenIn == coinB) {... */\n      iszero\n      tag_117\n      jumpi\n        /* \"contracts/uniV2Pool.sol\":2610:2615  coinA */\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/uniV2Pool.sol\":2603:2629  IERC20(coinA).transferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x23b872dd\n        /* \"contracts/uniV2Pool.sol\":2630:2640  msg.sender */\n      caller\n        /* \"contracts/uniV2Pool.sol\":2650:2654  this */\n      address\n        /* \"contracts/uniV2Pool.sol\":2657:2666  _amountIn */\n      dup7\n        /* \"contracts/uniV2Pool.sol\":2603:2667  IERC20(coinA).transferFrom(msg.sender, address(this), _amountIn) */\n      mload(0x40)\n      dup5\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_118\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_54\n      jump\t// in\n    tag_118:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_119\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_119:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_121\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_121:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_122\n      swap2\n      swap1\n      tag_59\n      jump\t// in\n    tag_122:\n      pop\n        /* \"contracts/uniV2Pool.sol\":2683:2695  bool success */\n      0x00\n        /* \"contracts/uniV2Pool.sol\":2697:2705  uint res */\n      dup1\n        /* \"contracts/uniV2Pool.sol\":2709:2744  SafeMath.tryAdd(bAmount, _amountIn) */\n      tag_123\n        /* \"contracts/uniV2Pool.sol\":2725:2732  bAmount */\n      sload(0x02)\n        /* \"contracts/uniV2Pool.sol\":2734:2743  _amountIn */\n      dup7\n        /* \"contracts/uniV2Pool.sol\":2709:2724  SafeMath.tryAdd */\n      tag_66\n        /* \"contracts/uniV2Pool.sol\":2709:2744  SafeMath.tryAdd(bAmount, _amountIn) */\n      jump\t// in\n    tag_123:\n        /* \"contracts/uniV2Pool.sol\":2682:2744  (bool success, uint res) = SafeMath.tryAdd(bAmount, _amountIn) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/uniV2Pool.sol\":2766:2773  success */\n      dup2\n        /* \"contracts/uniV2Pool.sol\":2758:2823  require(success, \"tokenIn amount add fail, source from safeMath\") */\n      tag_124\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_125\n      swap1\n      tag_99\n      jump\t// in\n    tag_125:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_124:\n        /* \"contracts/uniV2Pool.sol\":2847:2850  res */\n      dup1\n        /* \"contracts/uniV2Pool.sol\":2837:2844  bAmount */\n      0x02\n        /* \"contracts/uniV2Pool.sol\":2837:2850  bAmount = res */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/uniV2Pool.sol\":2865:2883  uint256 swapAmount */\n      0x00\n        /* \"contracts/uniV2Pool.sol\":2886:2926  Math.mulDiv(_amountIn, aAmount, bAmount) */\n      tag_126\n        /* \"contracts/uniV2Pool.sol\":2898:2907  _amountIn */\n      dup7\n        /* \"contracts/uniV2Pool.sol\":2909:2916  aAmount */\n      sload(0x01)\n        /* \"contracts/uniV2Pool.sol\":2918:2925  bAmount */\n      sload(0x02)\n        /* \"contracts/uniV2Pool.sol\":2886:2897  Math.mulDiv */\n      tag_101\n        /* \"contracts/uniV2Pool.sol\":2886:2926  Math.mulDiv(_amountIn, aAmount, bAmount) */\n      jump\t// in\n    tag_126:\n        /* \"contracts/uniV2Pool.sol\":2865:2926  uint256 swapAmount = Math.mulDiv(_amountIn, aAmount, bAmount) */\n      swap1\n      pop\n        /* \"contracts/uniV2Pool.sol\":2961:2974  _amountOutMin */\n      dup5\n        /* \"contracts/uniV2Pool.sol\":2948:2958  swapAmount */\n      dup2\n        /* \"contracts/uniV2Pool.sol\":2948:2974  swapAmount > _amountOutMin */\n      gt\n        /* \"contracts/uniV2Pool.sol\":2940:3012  require(swapAmount > _amountOutMin, \"amountOut less than _amountOutMin\") */\n      tag_127\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_128\n      swap1\n      tag_104\n      jump\t// in\n    tag_128:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_127:\n        /* \"contracts/uniV2Pool.sol\":3047:3054  aAmount */\n      sload(0x01)\n        /* \"contracts/uniV2Pool.sol\":3034:3044  swapAmount */\n      dup2\n        /* \"contracts/uniV2Pool.sol\":3034:3054  swapAmount < aAmount */\n      lt\n        /* \"contracts/uniV2Pool.sol\":3026:3085  require(swapAmount < aAmount, \"tokenOut amount not enough\") */\n      tag_129\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_130\n      swap1\n      tag_107\n      jump\t// in\n    tag_130:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_129:\n        /* \"contracts/uniV2Pool.sol\":3110:3120  swapAmount */\n      dup1\n        /* \"contracts/uniV2Pool.sol\":3099:3106  aAmount */\n      0x01\n      0x00\n        /* \"contracts/uniV2Pool.sol\":3099:3120  aAmount -= swapAmount */\n      dup3\n      dup3\n      sload\n      tag_131\n      swap2\n      swap1\n      tag_109\n      jump\t// in\n    tag_131:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/uniV2Pool.sol\":3204:3209  coinA */\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/uniV2Pool.sol\":3197:3219  IERC20(coinA).transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xa9059cbb\n        /* \"contracts/uniV2Pool.sol\":3220:3223  _to */\n      dup6\n        /* \"contracts/uniV2Pool.sol\":3225:3235  swapAmount */\n      dup4\n        /* \"contracts/uniV2Pool.sol\":3197:3236  IERC20(coinA).transfer(_to, swapAmount) */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_132\n      swap3\n      swap2\n      swap1\n      tag_111\n      jump\t// in\n    tag_132:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_133\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_133:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_135\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_135:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_136\n      swap2\n      swap1\n      tag_59\n      jump\t// in\n    tag_136:\n      pop\n        /* \"contracts/uniV2Pool.sol\":2501:3247  if (_tokenIn == coinB) {... */\n      pop\n      pop\n      pop\n    tag_117:\n        /* \"contracts/uniV2Pool.sol\":1723:3247  if (_tokenIn == coinA) {... */\n    tag_116:\n        /* \"contracts/uniV2Pool.sol\":1347:3253  function swap(address _tokenIn, uint256 _amountIn, uint256 _amountOutMin, address _to) external {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1359:1489  function _checkOwner() internal view virtual {... */\n    tag_42:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1433:1445  _msgSender() */\n      tag_138\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1433:1443  _msgSender */\n      tag_139\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1433:1445  _msgSender() */\n      jump\t// in\n    tag_138:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1445  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1429  owner() */\n      tag_140\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1427  owner */\n      tag_22\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1429  owner() */\n      jump\t// in\n    tag_140:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1445  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1414:1482  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_141\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_142\n      swap1\n      tag_143\n      jump\t// in\n    tag_142:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_141:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1359:1489  function _checkOwner() internal view virtual {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_48:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2531  address oldOwner = _owner */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2550:2558  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2547  _owner */\n      0x00\n      dup1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2558  _owner = newOwner */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2604:2612  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2594:2602  oldOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":641:857  function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {... */\n    tag_66:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":702:706  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":708:715  uint256 */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":751:760  uint256 c */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":767:768  b */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":763:764  a */\n      dup6\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":763:768  a + b */\n      add\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":751:768  uint256 c = a + b */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":790:791  a */\n      dup5\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":786:787  c */\n      dup2\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":786:791  c < a */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":782:810  if (c < a) return (false, 0) */\n      iszero\n      tag_146\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":801:806  false */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":808:809  0 */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":793:810  return (false, 0) */\n      swap3\n      pop\n      swap3\n      pop\n      pop\n      jump(tag_145)\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":782:810  if (c < a) return (false, 0) */\n    tag_146:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":832:836  true */\n      0x01\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":838:839  c */\n      dup2\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":824:840  return (true, c) */\n      swap3\n      pop\n      swap3\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":641:857  function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {... */\n    tag_145:\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":1667:5592  function mulDiv(... */\n    tag_101:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":1779:1793  uint256 result */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":2126:2139  uint256 prod0 */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":2198:2211  uint256 prod1 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":2323:2324  0 */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":2319:2325  not(0) */\n      not\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":2316:2317  y */\n      dup6\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":2313:2314  x */\n      dup8\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":2306:2326  mulmod(x, y, not(0)) */\n      mulmod\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":2359:2360  y */\n      dup6\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":2356:2357  x */\n      dup8\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":2352:2361  mul(x, y) */\n      mul\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":2343:2361  prod0 := mul(x, y) */\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":2414:2419  prod0 */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":2410:2412  mm */\n      dup2\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":2407:2420  lt(mm, prod0) */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":2399:2404  prod0 */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":2395:2397  mm */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":2391:2405  sub(mm, prod0) */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":2387:2421  sub(sub(mm, prod0), lt(mm, prod0)) */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":2378:2421  prod1 := sub(sub(mm, prod0), lt(mm, prod0)) */\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":2278:2435  {... */\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":2525:2526  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":2516:2521  prod1 */\n      dup2\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":2516:2526  prod1 == 0 */\n      eq\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":2512:2587  if (prod1 == 0) {... */\n      iszero\n      tag_148\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":2561:2572  denominator */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":2553:2558  prod0 */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":2553:2572  prod0 / denominator */\n      dup2\n      tag_149\n      jumpi\n      mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n      mstore(0x04, 0x12)\n      revert(0x00, 0x24)\n    tag_149:\n      div\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":2546:2572  return prod0 / denominator */\n      swap3\n      pop\n      pop\n      pop\n      jump(tag_147)\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":2512:2587  if (prod1 == 0) {... */\n    tag_148:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":2711:2716  prod1 */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":2697:2708  denominator */\n      dup5\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":2697:2716  denominator > prod1 */\n      gt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":2689:2717  require(denominator > prod1) */\n      tag_150\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_150:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":2973:2990  uint256 remainder */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3108:3119  denominator */\n      dup5\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3105:3106  y */\n      dup7\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3102:3103  x */\n      dup9\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3095:3120  mulmod(x, y, denominator) */\n      mulmod\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3082:3120  remainder := mulmod(x, y, denominator) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3236:3241  prod0 */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3225:3234  remainder */\n      dup2\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3222:3242  gt(remainder, prod0) */\n      gt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3215:3220  prod1 */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3211:3243  sub(prod1, gt(remainder, prod0)) */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3202:3243  prod1 := sub(prod1, gt(remainder, prod0)) */\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3280:3289  remainder */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3273:3278  prod0 */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3269:3290  sub(prod0, remainder) */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3260:3290  prod0 := sub(prod0, remainder) */\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3611:3623  uint256 twos */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3656:3657  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3642:3653  denominator */\n      dup7\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3641:3653  ~denominator */\n      not\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3641:3657  ~denominator + 1 */\n      add\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3626:3637  denominator */\n      dup7\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3626:3658  denominator & (~denominator + 1) */\n      and\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3611:3658  uint256 twos = denominator & (~denominator + 1) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3778:3782  twos */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3765:3776  denominator */\n      dup7\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3761:3783  div(denominator, twos) */\n      div\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3746:3783  denominator := div(denominator, twos) */\n      swap6\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3870:3874  twos */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3863:3868  prod0 */\n      dup5\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3859:3875  div(prod0, twos) */\n      div\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3850:3875  prod0 := div(prod0, twos) */\n      swap4\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4027:4028  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4020:4024  twos */\n      dup2\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4013:4017  twos */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4010:4011  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4006:4018  sub(0, twos) */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4002:4025  div(sub(0, twos), twos) */\n      div\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3998:4029  add(div(sub(0, twos), twos), 1) */\n      add\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3990:4029  twos := add(div(sub(0, twos), twos), 1) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4126:4130  twos */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4118:4123  prod1 */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4118:4130  prod1 * twos */\n      mul\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4109:4130  prod0 |= prod1 * twos */\n      dup5\n      or\n      swap4\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4448:4463  uint256 inverse */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4486:4487  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4471:4482  denominator */\n      dup8\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4467:4468  3 */\n      0x03\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4467:4482  3 * denominator */\n      mul\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4466:4487  (3 * denominator) ^ 2 */\n      xor\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4448:4487  uint256 inverse = (3 * denominator) ^ 2 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4733:4740  inverse */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4719:4730  denominator */\n      dup8\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4719:4740  denominator * inverse */\n      mul\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4715:4716  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4715:4740  2 - denominator * inverse */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4704:4740  inverse *= 2 - denominator * inverse */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4802:4809  inverse */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4788:4799  denominator */\n      dup8\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4788:4809  denominator * inverse */\n      mul\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4784:4785  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4784:4809  2 - denominator * inverse */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4773:4809  inverse *= 2 - denominator * inverse */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4872:4879  inverse */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4858:4869  denominator */\n      dup8\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4858:4879  denominator * inverse */\n      mul\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4854:4855  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4854:4879  2 - denominator * inverse */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4843:4879  inverse *= 2 - denominator * inverse */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4942:4949  inverse */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4928:4939  denominator */\n      dup8\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4928:4949  denominator * inverse */\n      mul\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4924:4925  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4924:4949  2 - denominator * inverse */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4913:4949  inverse *= 2 - denominator * inverse */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5012:5019  inverse */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4998:5009  denominator */\n      dup8\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4998:5019  denominator * inverse */\n      mul\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4994:4995  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4994:5019  2 - denominator * inverse */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4983:5019  inverse *= 2 - denominator * inverse */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5083:5090  inverse */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5069:5080  denominator */\n      dup8\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5069:5090  denominator * inverse */\n      mul\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5065:5066  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5065:5090  2 - denominator * inverse */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5054:5090  inverse *= 2 - denominator * inverse */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5541:5548  inverse */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5533:5538  prod0 */\n      dup6\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5533:5548  prod0 * inverse */\n      mul\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5524:5548  result = prod0 * inverse */\n      swap6\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5562:5575  return result */\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":1667:5592  function mulDiv(... */\n    tag_147:\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n    tag_139:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":693:700  address */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/utils/Context.sol\":712:729  return msg.sender */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":7:146   */\n    tag_153:\n      0x00\n        /* \"#utility.yul\":91:97   */\n      dup2\n        /* \"#utility.yul\":78:98   */\n      calldataload\n        /* \"#utility.yul\":69:98   */\n      swap1\n      pop\n        /* \"#utility.yul\":107:140   */\n      tag_155\n        /* \"#utility.yul\":134:139   */\n      dup2\n        /* \"#utility.yul\":107:140   */\n      tag_156\n      jump\t// in\n    tag_155:\n        /* \"#utility.yul\":59:146   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":152:289   */\n    tag_157:\n      0x00\n        /* \"#utility.yul\":237:243   */\n      dup2\n        /* \"#utility.yul\":231:244   */\n      mload\n        /* \"#utility.yul\":222:244   */\n      swap1\n      pop\n        /* \"#utility.yul\":253:283   */\n      tag_159\n        /* \"#utility.yul\":277:282   */\n      dup2\n        /* \"#utility.yul\":253:283   */\n      tag_160\n      jump\t// in\n    tag_159:\n        /* \"#utility.yul\":212:289   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":295:434   */\n    tag_161:\n      0x00\n        /* \"#utility.yul\":379:385   */\n      dup2\n        /* \"#utility.yul\":366:386   */\n      calldataload\n        /* \"#utility.yul\":357:386   */\n      swap1\n      pop\n        /* \"#utility.yul\":395:428   */\n      tag_163\n        /* \"#utility.yul\":422:427   */\n      dup2\n        /* \"#utility.yul\":395:428   */\n      tag_164\n      jump\t// in\n    tag_163:\n        /* \"#utility.yul\":347:434   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":440:702   */\n    tag_33:\n      0x00\n        /* \"#utility.yul\":548:550   */\n      0x20\n        /* \"#utility.yul\":536:545   */\n      dup3\n        /* \"#utility.yul\":527:534   */\n      dup5\n        /* \"#utility.yul\":523:546   */\n      sub\n        /* \"#utility.yul\":519:551   */\n      slt\n        /* \"#utility.yul\":516:518   */\n      iszero\n      tag_166\n      jumpi\n        /* \"#utility.yul\":564:565   */\n      0x00\n        /* \"#utility.yul\":561:562   */\n      dup1\n        /* \"#utility.yul\":554:566   */\n      revert\n        /* \"#utility.yul\":516:518   */\n    tag_166:\n        /* \"#utility.yul\":607:608   */\n      0x00\n        /* \"#utility.yul\":632:685   */\n      tag_167\n        /* \"#utility.yul\":677:684   */\n      dup5\n        /* \"#utility.yul\":668:674   */\n      dup3\n        /* \"#utility.yul\":657:666   */\n      dup6\n        /* \"#utility.yul\":653:675   */\n      add\n        /* \"#utility.yul\":632:685   */\n      tag_153\n      jump\t// in\n    tag_167:\n        /* \"#utility.yul\":622:685   */\n      swap2\n      pop\n        /* \"#utility.yul\":578:695   */\n      pop\n        /* \"#utility.yul\":506:702   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":708:1115   */\n    tag_17:\n      0x00\n      dup1\n        /* \"#utility.yul\":833:835   */\n      0x40\n        /* \"#utility.yul\":821:830   */\n      dup4\n        /* \"#utility.yul\":812:819   */\n      dup6\n        /* \"#utility.yul\":808:831   */\n      sub\n        /* \"#utility.yul\":804:836   */\n      slt\n        /* \"#utility.yul\":801:803   */\n      iszero\n      tag_169\n      jumpi\n        /* \"#utility.yul\":849:850   */\n      0x00\n        /* \"#utility.yul\":846:847   */\n      dup1\n        /* \"#utility.yul\":839:851   */\n      revert\n        /* \"#utility.yul\":801:803   */\n    tag_169:\n        /* \"#utility.yul\":892:893   */\n      0x00\n        /* \"#utility.yul\":917:970   */\n      tag_170\n        /* \"#utility.yul\":962:969   */\n      dup6\n        /* \"#utility.yul\":953:959   */\n      dup3\n        /* \"#utility.yul\":942:951   */\n      dup7\n        /* \"#utility.yul\":938:960   */\n      add\n        /* \"#utility.yul\":917:970   */\n      tag_153\n      jump\t// in\n    tag_170:\n        /* \"#utility.yul\":907:970   */\n      swap3\n      pop\n        /* \"#utility.yul\":863:980   */\n      pop\n        /* \"#utility.yul\":1019:1021   */\n      0x20\n        /* \"#utility.yul\":1045:1098   */\n      tag_171\n        /* \"#utility.yul\":1090:1097   */\n      dup6\n        /* \"#utility.yul\":1081:1087   */\n      dup3\n        /* \"#utility.yul\":1070:1079   */\n      dup7\n        /* \"#utility.yul\":1066:1088   */\n      add\n        /* \"#utility.yul\":1045:1098   */\n      tag_153\n      jump\t// in\n    tag_171:\n        /* \"#utility.yul\":1035:1098   */\n      swap2\n      pop\n        /* \"#utility.yul\":990:1108   */\n      pop\n        /* \"#utility.yul\":791:1115   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1121:1819   */\n    tag_37:\n      0x00\n      dup1\n      0x00\n      dup1\n        /* \"#utility.yul\":1280:1283   */\n      0x80\n        /* \"#utility.yul\":1268:1277   */\n      dup6\n        /* \"#utility.yul\":1259:1266   */\n      dup8\n        /* \"#utility.yul\":1255:1278   */\n      sub\n        /* \"#utility.yul\":1251:1284   */\n      slt\n        /* \"#utility.yul\":1248:1250   */\n      iszero\n      tag_173\n      jumpi\n        /* \"#utility.yul\":1297:1298   */\n      0x00\n        /* \"#utility.yul\":1294:1295   */\n      dup1\n        /* \"#utility.yul\":1287:1299   */\n      revert\n        /* \"#utility.yul\":1248:1250   */\n    tag_173:\n        /* \"#utility.yul\":1340:1341   */\n      0x00\n        /* \"#utility.yul\":1365:1418   */\n      tag_174\n        /* \"#utility.yul\":1410:1417   */\n      dup8\n        /* \"#utility.yul\":1401:1407   */\n      dup3\n        /* \"#utility.yul\":1390:1399   */\n      dup9\n        /* \"#utility.yul\":1386:1408   */\n      add\n        /* \"#utility.yul\":1365:1418   */\n      tag_153\n      jump\t// in\n    tag_174:\n        /* \"#utility.yul\":1355:1418   */\n      swap5\n      pop\n        /* \"#utility.yul\":1311:1428   */\n      pop\n        /* \"#utility.yul\":1467:1469   */\n      0x20\n        /* \"#utility.yul\":1493:1546   */\n      tag_175\n        /* \"#utility.yul\":1538:1545   */\n      dup8\n        /* \"#utility.yul\":1529:1535   */\n      dup3\n        /* \"#utility.yul\":1518:1527   */\n      dup9\n        /* \"#utility.yul\":1514:1536   */\n      add\n        /* \"#utility.yul\":1493:1546   */\n      tag_161\n      jump\t// in\n    tag_175:\n        /* \"#utility.yul\":1483:1546   */\n      swap4\n      pop\n        /* \"#utility.yul\":1438:1556   */\n      pop\n        /* \"#utility.yul\":1595:1597   */\n      0x40\n        /* \"#utility.yul\":1621:1674   */\n      tag_176\n        /* \"#utility.yul\":1666:1673   */\n      dup8\n        /* \"#utility.yul\":1657:1663   */\n      dup3\n        /* \"#utility.yul\":1646:1655   */\n      dup9\n        /* \"#utility.yul\":1642:1664   */\n      add\n        /* \"#utility.yul\":1621:1674   */\n      tag_161\n      jump\t// in\n    tag_176:\n        /* \"#utility.yul\":1611:1674   */\n      swap3\n      pop\n        /* \"#utility.yul\":1566:1684   */\n      pop\n        /* \"#utility.yul\":1723:1725   */\n      0x60\n        /* \"#utility.yul\":1749:1802   */\n      tag_177\n        /* \"#utility.yul\":1794:1801   */\n      dup8\n        /* \"#utility.yul\":1785:1791   */\n      dup3\n        /* \"#utility.yul\":1774:1783   */\n      dup9\n        /* \"#utility.yul\":1770:1792   */\n      add\n        /* \"#utility.yul\":1749:1802   */\n      tag_153\n      jump\t// in\n    tag_177:\n        /* \"#utility.yul\":1739:1802   */\n      swap2\n      pop\n        /* \"#utility.yul\":1694:1812   */\n      pop\n        /* \"#utility.yul\":1238:1819   */\n      swap3\n      swap6\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1825:2103   */\n    tag_59:\n      0x00\n        /* \"#utility.yul\":1941:1943   */\n      0x20\n        /* \"#utility.yul\":1929:1938   */\n      dup3\n        /* \"#utility.yul\":1920:1927   */\n      dup5\n        /* \"#utility.yul\":1916:1939   */\n      sub\n        /* \"#utility.yul\":1912:1944   */\n      slt\n        /* \"#utility.yul\":1909:1911   */\n      iszero\n      tag_179\n      jumpi\n        /* \"#utility.yul\":1957:1958   */\n      0x00\n        /* \"#utility.yul\":1954:1955   */\n      dup1\n        /* \"#utility.yul\":1947:1959   */\n      revert\n        /* \"#utility.yul\":1909:1911   */\n    tag_179:\n        /* \"#utility.yul\":2000:2001   */\n      0x00\n        /* \"#utility.yul\":2025:2086   */\n      tag_180\n        /* \"#utility.yul\":2078:2085   */\n      dup5\n        /* \"#utility.yul\":2069:2075   */\n      dup3\n        /* \"#utility.yul\":2058:2067   */\n      dup6\n        /* \"#utility.yul\":2054:2076   */\n      add\n        /* \"#utility.yul\":2025:2086   */\n      tag_157\n      jump\t// in\n    tag_180:\n        /* \"#utility.yul\":2015:2086   */\n      swap2\n      pop\n        /* \"#utility.yul\":1971:2096   */\n      pop\n        /* \"#utility.yul\":1899:2103   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2109:2516   */\n    tag_27:\n      0x00\n      dup1\n        /* \"#utility.yul\":2234:2236   */\n      0x40\n        /* \"#utility.yul\":2222:2231   */\n      dup4\n        /* \"#utility.yul\":2213:2220   */\n      dup6\n        /* \"#utility.yul\":2209:2232   */\n      sub\n        /* \"#utility.yul\":2205:2237   */\n      slt\n        /* \"#utility.yul\":2202:2204   */\n      iszero\n      tag_182\n      jumpi\n        /* \"#utility.yul\":2250:2251   */\n      0x00\n        /* \"#utility.yul\":2247:2248   */\n      dup1\n        /* \"#utility.yul\":2240:2252   */\n      revert\n        /* \"#utility.yul\":2202:2204   */\n    tag_182:\n        /* \"#utility.yul\":2293:2294   */\n      0x00\n        /* \"#utility.yul\":2318:2371   */\n      tag_183\n        /* \"#utility.yul\":2363:2370   */\n      dup6\n        /* \"#utility.yul\":2354:2360   */\n      dup3\n        /* \"#utility.yul\":2343:2352   */\n      dup7\n        /* \"#utility.yul\":2339:2361   */\n      add\n        /* \"#utility.yul\":2318:2371   */\n      tag_161\n      jump\t// in\n    tag_183:\n        /* \"#utility.yul\":2308:2371   */\n      swap3\n      pop\n        /* \"#utility.yul\":2264:2381   */\n      pop\n        /* \"#utility.yul\":2420:2422   */\n      0x20\n        /* \"#utility.yul\":2446:2499   */\n      tag_184\n        /* \"#utility.yul\":2491:2498   */\n      dup6\n        /* \"#utility.yul\":2482:2488   */\n      dup3\n        /* \"#utility.yul\":2471:2480   */\n      dup7\n        /* \"#utility.yul\":2467:2489   */\n      add\n        /* \"#utility.yul\":2446:2499   */\n      tag_161\n      jump\t// in\n    tag_184:\n        /* \"#utility.yul\":2436:2499   */\n      swap2\n      pop\n        /* \"#utility.yul\":2391:2509   */\n      pop\n        /* \"#utility.yul\":2192:2516   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2522:2640   */\n    tag_185:\n        /* \"#utility.yul\":2609:2633   */\n      tag_187\n        /* \"#utility.yul\":2627:2632   */\n      dup2\n        /* \"#utility.yul\":2609:2633   */\n      tag_188\n      jump\t// in\n    tag_187:\n        /* \"#utility.yul\":2604:2607   */\n      dup3\n        /* \"#utility.yul\":2597:2634   */\n      mstore\n        /* \"#utility.yul\":2587:2640   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2646:3016   */\n    tag_189:\n      0x00\n        /* \"#utility.yul\":2809:2876   */\n      tag_191\n        /* \"#utility.yul\":2873:2875   */\n      0x26\n        /* \"#utility.yul\":2868:2871   */\n      dup4\n        /* \"#utility.yul\":2809:2876   */\n      tag_192\n      jump\t// in\n    tag_191:\n        /* \"#utility.yul\":2802:2876   */\n      swap2\n      pop\n        /* \"#utility.yul\":2906:2940   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":2902:2903   */\n      0x00\n        /* \"#utility.yul\":2897:2900   */\n      dup4\n        /* \"#utility.yul\":2893:2904   */\n      add\n        /* \"#utility.yul\":2886:2941   */\n      mstore\n        /* \"#utility.yul\":2972:2980   */\n      0x6464726573730000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":2967:2969   */\n      0x20\n        /* \"#utility.yul\":2962:2965   */\n      dup4\n        /* \"#utility.yul\":2958:2970   */\n      add\n        /* \"#utility.yul\":2951:2981   */\n      mstore\n        /* \"#utility.yul\":3007:3009   */\n      0x40\n        /* \"#utility.yul\":3002:3005   */\n      dup3\n        /* \"#utility.yul\":2998:3010   */\n      add\n        /* \"#utility.yul\":2991:3010   */\n      swap1\n      pop\n        /* \"#utility.yul\":2792:3016   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3022:3349   */\n    tag_193:\n      0x00\n        /* \"#utility.yul\":3185:3252   */\n      tag_195\n        /* \"#utility.yul\":3249:3251   */\n      0x1d\n        /* \"#utility.yul\":3244:3247   */\n      dup4\n        /* \"#utility.yul\":3185:3252   */\n      tag_192\n      jump\t// in\n    tag_195:\n        /* \"#utility.yul\":3178:3252   */\n      swap2\n      pop\n        /* \"#utility.yul\":3282:3313   */\n      0x616464206661696c202c20627920536166654d6174682e747279416464000000\n        /* \"#utility.yul\":3278:3279   */\n      0x00\n        /* \"#utility.yul\":3273:3276   */\n      dup4\n        /* \"#utility.yul\":3269:3280   */\n      add\n        /* \"#utility.yul\":3262:3314   */\n      mstore\n        /* \"#utility.yul\":3340:3342   */\n      0x20\n        /* \"#utility.yul\":3335:3338   */\n      dup3\n        /* \"#utility.yul\":3331:3343   */\n      add\n        /* \"#utility.yul\":3324:3343   */\n      swap1\n      pop\n        /* \"#utility.yul\":3168:3349   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3355:3720   */\n    tag_196:\n      0x00\n        /* \"#utility.yul\":3518:3585   */\n      tag_198\n        /* \"#utility.yul\":3582:3584   */\n      0x21\n        /* \"#utility.yul\":3577:3580   */\n      dup4\n        /* \"#utility.yul\":3518:3585   */\n      tag_192\n      jump\t// in\n    tag_198:\n        /* \"#utility.yul\":3511:3585   */\n      swap2\n      pop\n        /* \"#utility.yul\":3615:3649   */\n      0x616d6f756e744f7574206c657373207468616e205f616d6f756e744f75744d69\n        /* \"#utility.yul\":3611:3612   */\n      0x00\n        /* \"#utility.yul\":3606:3609   */\n      dup4\n        /* \"#utility.yul\":3602:3613   */\n      add\n        /* \"#utility.yul\":3595:3650   */\n      mstore\n        /* \"#utility.yul\":3681:3684   */\n      0x6e00000000000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":3676:3678   */\n      0x20\n        /* \"#utility.yul\":3671:3674   */\n      dup4\n        /* \"#utility.yul\":3667:3679   */\n      add\n        /* \"#utility.yul\":3660:3685   */\n      mstore\n        /* \"#utility.yul\":3711:3713   */\n      0x40\n        /* \"#utility.yul\":3706:3709   */\n      dup3\n        /* \"#utility.yul\":3702:3714   */\n      add\n        /* \"#utility.yul\":3695:3714   */\n      swap1\n      pop\n        /* \"#utility.yul\":3501:3720   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3726:4056   */\n    tag_199:\n      0x00\n        /* \"#utility.yul\":3889:3956   */\n      tag_201\n        /* \"#utility.yul\":3953:3955   */\n      0x20\n        /* \"#utility.yul\":3948:3951   */\n      dup4\n        /* \"#utility.yul\":3889:3956   */\n      tag_192\n      jump\t// in\n    tag_201:\n        /* \"#utility.yul\":3882:3956   */\n      swap2\n      pop\n        /* \"#utility.yul\":3986:4020   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":3982:3983   */\n      0x00\n        /* \"#utility.yul\":3977:3980   */\n      dup4\n        /* \"#utility.yul\":3973:3984   */\n      add\n        /* \"#utility.yul\":3966:4021   */\n      mstore\n        /* \"#utility.yul\":4047:4049   */\n      0x20\n        /* \"#utility.yul\":4042:4045   */\n      dup3\n        /* \"#utility.yul\":4038:4050   */\n      add\n        /* \"#utility.yul\":4031:4050   */\n      swap1\n      pop\n        /* \"#utility.yul\":3872:4056   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4062:4439   */\n    tag_202:\n      0x00\n        /* \"#utility.yul\":4225:4292   */\n      tag_204\n        /* \"#utility.yul\":4289:4291   */\n      0x2d\n        /* \"#utility.yul\":4284:4287   */\n      dup4\n        /* \"#utility.yul\":4225:4292   */\n      tag_192\n      jump\t// in\n    tag_204:\n        /* \"#utility.yul\":4218:4292   */\n      swap2\n      pop\n        /* \"#utility.yul\":4322:4356   */\n      0x746f6b656e496e20616d6f756e7420616464206661696c2c20736f7572636520\n        /* \"#utility.yul\":4318:4319   */\n      0x00\n        /* \"#utility.yul\":4313:4316   */\n      dup4\n        /* \"#utility.yul\":4309:4320   */\n      add\n        /* \"#utility.yul\":4302:4357   */\n      mstore\n        /* \"#utility.yul\":4388:4403   */\n      0x66726f6d20736166654d61746800000000000000000000000000000000000000\n        /* \"#utility.yul\":4383:4385   */\n      0x20\n        /* \"#utility.yul\":4378:4381   */\n      dup4\n        /* \"#utility.yul\":4374:4386   */\n      add\n        /* \"#utility.yul\":4367:4404   */\n      mstore\n        /* \"#utility.yul\":4430:4432   */\n      0x40\n        /* \"#utility.yul\":4425:4428   */\n      dup3\n        /* \"#utility.yul\":4421:4433   */\n      add\n        /* \"#utility.yul\":4414:4433   */\n      swap1\n      pop\n        /* \"#utility.yul\":4208:4439   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4445:4815   */\n    tag_205:\n      0x00\n        /* \"#utility.yul\":4608:4675   */\n      tag_207\n        /* \"#utility.yul\":4672:4674   */\n      0x26\n        /* \"#utility.yul\":4667:4670   */\n      dup4\n        /* \"#utility.yul\":4608:4675   */\n      tag_192\n      jump\t// in\n    tag_207:\n        /* \"#utility.yul\":4601:4675   */\n      swap2\n      pop\n        /* \"#utility.yul\":4705:4739   */\n      0x746f6b656e496e206d7573742062652041206f72204220746861742068617320\n        /* \"#utility.yul\":4701:4702   */\n      0x00\n        /* \"#utility.yul\":4696:4699   */\n      dup4\n        /* \"#utility.yul\":4692:4703   */\n      add\n        /* \"#utility.yul\":4685:4740   */\n      mstore\n        /* \"#utility.yul\":4771:4779   */\n      0x6265207365740000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":4766:4768   */\n      0x20\n        /* \"#utility.yul\":4761:4764   */\n      dup4\n        /* \"#utility.yul\":4757:4769   */\n      add\n        /* \"#utility.yul\":4750:4780   */\n      mstore\n        /* \"#utility.yul\":4806:4808   */\n      0x40\n        /* \"#utility.yul\":4801:4804   */\n      dup3\n        /* \"#utility.yul\":4797:4809   */\n      add\n        /* \"#utility.yul\":4790:4809   */\n      swap1\n      pop\n        /* \"#utility.yul\":4591:4815   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4821:5145   */\n    tag_208:\n      0x00\n        /* \"#utility.yul\":4984:5051   */\n      tag_210\n        /* \"#utility.yul\":5048:5050   */\n      0x1a\n        /* \"#utility.yul\":5043:5046   */\n      dup4\n        /* \"#utility.yul\":4984:5051   */\n      tag_192\n      jump\t// in\n    tag_210:\n        /* \"#utility.yul\":4977:5051   */\n      swap2\n      pop\n        /* \"#utility.yul\":5081:5109   */\n      0x746f6b656e4f757420616d6f756e74206e6f7420656e6f756768000000000000\n        /* \"#utility.yul\":5077:5078   */\n      0x00\n        /* \"#utility.yul\":5072:5075   */\n      dup4\n        /* \"#utility.yul\":5068:5079   */\n      add\n        /* \"#utility.yul\":5061:5110   */\n      mstore\n        /* \"#utility.yul\":5136:5138   */\n      0x20\n        /* \"#utility.yul\":5131:5134   */\n      dup3\n        /* \"#utility.yul\":5127:5139   */\n      add\n        /* \"#utility.yul\":5120:5139   */\n      swap1\n      pop\n        /* \"#utility.yul\":4967:5145   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5151:5476   */\n    tag_211:\n      0x00\n        /* \"#utility.yul\":5314:5381   */\n      tag_213\n        /* \"#utility.yul\":5378:5380   */\n      0x1b\n        /* \"#utility.yul\":5373:5376   */\n      dup4\n        /* \"#utility.yul\":5314:5381   */\n      tag_192\n      jump\t// in\n    tag_213:\n        /* \"#utility.yul\":5307:5381   */\n      swap2\n      pop\n        /* \"#utility.yul\":5411:5440   */\n      0x5f746f2063616e206e6f74206265207a65726f20616464726573730000000000\n        /* \"#utility.yul\":5407:5408   */\n      0x00\n        /* \"#utility.yul\":5402:5405   */\n      dup4\n        /* \"#utility.yul\":5398:5409   */\n      add\n        /* \"#utility.yul\":5391:5441   */\n      mstore\n        /* \"#utility.yul\":5467:5469   */\n      0x20\n        /* \"#utility.yul\":5462:5465   */\n      dup3\n        /* \"#utility.yul\":5458:5470   */\n      add\n        /* \"#utility.yul\":5451:5470   */\n      swap1\n      pop\n        /* \"#utility.yul\":5297:5476   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5482:5811   */\n    tag_214:\n      0x00\n        /* \"#utility.yul\":5645:5712   */\n      tag_216\n        /* \"#utility.yul\":5709:5711   */\n      0x1f\n        /* \"#utility.yul\":5704:5707   */\n      dup4\n        /* \"#utility.yul\":5645:5712   */\n      tag_192\n      jump\t// in\n    tag_216:\n        /* \"#utility.yul\":5638:5712   */\n      swap2\n      pop\n        /* \"#utility.yul\":5742:5775   */\n      0x746f6b656e496e2063616e206e6f74206265207a65726f206164647265737300\n        /* \"#utility.yul\":5738:5739   */\n      0x00\n        /* \"#utility.yul\":5733:5736   */\n      dup4\n        /* \"#utility.yul\":5729:5740   */\n      add\n        /* \"#utility.yul\":5722:5776   */\n      mstore\n        /* \"#utility.yul\":5802:5804   */\n      0x20\n        /* \"#utility.yul\":5797:5800   */\n      dup3\n        /* \"#utility.yul\":5793:5805   */\n      add\n        /* \"#utility.yul\":5786:5805   */\n      swap1\n      pop\n        /* \"#utility.yul\":5628:5811   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5817:5935   */\n    tag_217:\n        /* \"#utility.yul\":5904:5928   */\n      tag_219\n        /* \"#utility.yul\":5922:5927   */\n      dup2\n        /* \"#utility.yul\":5904:5928   */\n      tag_220\n      jump\t// in\n    tag_219:\n        /* \"#utility.yul\":5899:5902   */\n      dup3\n        /* \"#utility.yul\":5892:5929   */\n      mstore\n        /* \"#utility.yul\":5882:5935   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5941:6163   */\n    tag_24:\n      0x00\n        /* \"#utility.yul\":6072:6074   */\n      0x20\n        /* \"#utility.yul\":6061:6070   */\n      dup3\n        /* \"#utility.yul\":6057:6075   */\n      add\n        /* \"#utility.yul\":6049:6075   */\n      swap1\n      pop\n        /* \"#utility.yul\":6085:6156   */\n      tag_222\n        /* \"#utility.yul\":6153:6154   */\n      0x00\n        /* \"#utility.yul\":6142:6151   */\n      dup4\n        /* \"#utility.yul\":6138:6155   */\n      add\n        /* \"#utility.yul\":6129:6135   */\n      dup5\n        /* \"#utility.yul\":6085:6156   */\n      tag_185\n      jump\t// in\n    tag_222:\n        /* \"#utility.yul\":6039:6163   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6169:6501   */\n    tag_14:\n      0x00\n        /* \"#utility.yul\":6328:6330   */\n      0x40\n        /* \"#utility.yul\":6317:6326   */\n      dup3\n        /* \"#utility.yul\":6313:6331   */\n      add\n        /* \"#utility.yul\":6305:6331   */\n      swap1\n      pop\n        /* \"#utility.yul\":6341:6412   */\n      tag_224\n        /* \"#utility.yul\":6409:6410   */\n      0x00\n        /* \"#utility.yul\":6398:6407   */\n      dup4\n        /* \"#utility.yul\":6394:6411   */\n      add\n        /* \"#utility.yul\":6385:6391   */\n      dup6\n        /* \"#utility.yul\":6341:6412   */\n      tag_185\n      jump\t// in\n    tag_224:\n        /* \"#utility.yul\":6422:6494   */\n      tag_225\n        /* \"#utility.yul\":6490:6492   */\n      0x20\n        /* \"#utility.yul\":6479:6488   */\n      dup4\n        /* \"#utility.yul\":6475:6493   */\n      add\n        /* \"#utility.yul\":6466:6472   */\n      dup5\n        /* \"#utility.yul\":6422:6494   */\n      tag_185\n      jump\t// in\n    tag_225:\n        /* \"#utility.yul\":6295:6501   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6507:6949   */\n    tag_54:\n      0x00\n        /* \"#utility.yul\":6694:6696   */\n      0x60\n        /* \"#utility.yul\":6683:6692   */\n      dup3\n        /* \"#utility.yul\":6679:6697   */\n      add\n        /* \"#utility.yul\":6671:6697   */\n      swap1\n      pop\n        /* \"#utility.yul\":6707:6778   */\n      tag_227\n        /* \"#utility.yul\":6775:6776   */\n      0x00\n        /* \"#utility.yul\":6764:6773   */\n      dup4\n        /* \"#utility.yul\":6760:6777   */\n      add\n        /* \"#utility.yul\":6751:6757   */\n      dup7\n        /* \"#utility.yul\":6707:6778   */\n      tag_185\n      jump\t// in\n    tag_227:\n        /* \"#utility.yul\":6788:6860   */\n      tag_228\n        /* \"#utility.yul\":6856:6858   */\n      0x20\n        /* \"#utility.yul\":6845:6854   */\n      dup4\n        /* \"#utility.yul\":6841:6859   */\n      add\n        /* \"#utility.yul\":6832:6838   */\n      dup6\n        /* \"#utility.yul\":6788:6860   */\n      tag_185\n      jump\t// in\n    tag_228:\n        /* \"#utility.yul\":6870:6942   */\n      tag_229\n        /* \"#utility.yul\":6938:6940   */\n      0x40\n        /* \"#utility.yul\":6927:6936   */\n      dup4\n        /* \"#utility.yul\":6923:6941   */\n      add\n        /* \"#utility.yul\":6914:6920   */\n      dup5\n        /* \"#utility.yul\":6870:6942   */\n      tag_217\n      jump\t// in\n    tag_229:\n        /* \"#utility.yul\":6661:6949   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6955:7287   */\n    tag_111:\n      0x00\n        /* \"#utility.yul\":7114:7116   */\n      0x40\n        /* \"#utility.yul\":7103:7112   */\n      dup3\n        /* \"#utility.yul\":7099:7117   */\n      add\n        /* \"#utility.yul\":7091:7117   */\n      swap1\n      pop\n        /* \"#utility.yul\":7127:7198   */\n      tag_231\n        /* \"#utility.yul\":7195:7196   */\n      0x00\n        /* \"#utility.yul\":7184:7193   */\n      dup4\n        /* \"#utility.yul\":7180:7197   */\n      add\n        /* \"#utility.yul\":7171:7177   */\n      dup6\n        /* \"#utility.yul\":7127:7198   */\n      tag_185\n      jump\t// in\n    tag_231:\n        /* \"#utility.yul\":7208:7280   */\n      tag_232\n        /* \"#utility.yul\":7276:7278   */\n      0x20\n        /* \"#utility.yul\":7265:7274   */\n      dup4\n        /* \"#utility.yul\":7261:7279   */\n      add\n        /* \"#utility.yul\":7252:7258   */\n      dup5\n        /* \"#utility.yul\":7208:7280   */\n      tag_217\n      jump\t// in\n    tag_232:\n        /* \"#utility.yul\":7081:7287   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7293:7712   */\n    tag_77:\n      0x00\n        /* \"#utility.yul\":7497:7499   */\n      0x20\n        /* \"#utility.yul\":7486:7495   */\n      dup3\n        /* \"#utility.yul\":7482:7500   */\n      add\n        /* \"#utility.yul\":7474:7500   */\n      swap1\n      pop\n        /* \"#utility.yul\":7546:7555   */\n      dup2\n        /* \"#utility.yul\":7540:7544   */\n      dup2\n        /* \"#utility.yul\":7536:7556   */\n      sub\n        /* \"#utility.yul\":7532:7533   */\n      0x00\n        /* \"#utility.yul\":7521:7530   */\n      dup4\n        /* \"#utility.yul\":7517:7534   */\n      add\n        /* \"#utility.yul\":7510:7557   */\n      mstore\n        /* \"#utility.yul\":7574:7705   */\n      tag_234\n        /* \"#utility.yul\":7700:7704   */\n      dup2\n        /* \"#utility.yul\":7574:7705   */\n      tag_189\n      jump\t// in\n    tag_234:\n        /* \"#utility.yul\":7566:7705   */\n      swap1\n      pop\n        /* \"#utility.yul\":7464:7712   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7718:8137   */\n    tag_71:\n      0x00\n        /* \"#utility.yul\":7922:7924   */\n      0x20\n        /* \"#utility.yul\":7911:7920   */\n      dup3\n        /* \"#utility.yul\":7907:7925   */\n      add\n        /* \"#utility.yul\":7899:7925   */\n      swap1\n      pop\n        /* \"#utility.yul\":7971:7980   */\n      dup2\n        /* \"#utility.yul\":7965:7969   */\n      dup2\n        /* \"#utility.yul\":7961:7981   */\n      sub\n        /* \"#utility.yul\":7957:7958   */\n      0x00\n        /* \"#utility.yul\":7946:7955   */\n      dup4\n        /* \"#utility.yul\":7942:7959   */\n      add\n        /* \"#utility.yul\":7935:7982   */\n      mstore\n        /* \"#utility.yul\":7999:8130   */\n      tag_236\n        /* \"#utility.yul\":8125:8129   */\n      dup2\n        /* \"#utility.yul\":7999:8130   */\n      tag_193\n      jump\t// in\n    tag_236:\n        /* \"#utility.yul\":7991:8130   */\n      swap1\n      pop\n        /* \"#utility.yul\":7889:8137   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8143:8562   */\n    tag_104:\n      0x00\n        /* \"#utility.yul\":8347:8349   */\n      0x20\n        /* \"#utility.yul\":8336:8345   */\n      dup3\n        /* \"#utility.yul\":8332:8350   */\n      add\n        /* \"#utility.yul\":8324:8350   */\n      swap1\n      pop\n        /* \"#utility.yul\":8396:8405   */\n      dup2\n        /* \"#utility.yul\":8390:8394   */\n      dup2\n        /* \"#utility.yul\":8386:8406   */\n      sub\n        /* \"#utility.yul\":8382:8383   */\n      0x00\n        /* \"#utility.yul\":8371:8380   */\n      dup4\n        /* \"#utility.yul\":8367:8384   */\n      add\n        /* \"#utility.yul\":8360:8407   */\n      mstore\n        /* \"#utility.yul\":8424:8555   */\n      tag_238\n        /* \"#utility.yul\":8550:8554   */\n      dup2\n        /* \"#utility.yul\":8424:8555   */\n      tag_196\n      jump\t// in\n    tag_238:\n        /* \"#utility.yul\":8416:8555   */\n      swap1\n      pop\n        /* \"#utility.yul\":8314:8562   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8568:8987   */\n    tag_143:\n      0x00\n        /* \"#utility.yul\":8772:8774   */\n      0x20\n        /* \"#utility.yul\":8761:8770   */\n      dup3\n        /* \"#utility.yul\":8757:8775   */\n      add\n        /* \"#utility.yul\":8749:8775   */\n      swap1\n      pop\n        /* \"#utility.yul\":8821:8830   */\n      dup2\n        /* \"#utility.yul\":8815:8819   */\n      dup2\n        /* \"#utility.yul\":8811:8831   */\n      sub\n        /* \"#utility.yul\":8807:8808   */\n      0x00\n        /* \"#utility.yul\":8796:8805   */\n      dup4\n        /* \"#utility.yul\":8792:8809   */\n      add\n        /* \"#utility.yul\":8785:8832   */\n      mstore\n        /* \"#utility.yul\":8849:8980   */\n      tag_240\n        /* \"#utility.yul\":8975:8979   */\n      dup2\n        /* \"#utility.yul\":8849:8980   */\n      tag_199\n      jump\t// in\n    tag_240:\n        /* \"#utility.yul\":8841:8980   */\n      swap1\n      pop\n        /* \"#utility.yul\":8739:8987   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8993:9412   */\n    tag_99:\n      0x00\n        /* \"#utility.yul\":9197:9199   */\n      0x20\n        /* \"#utility.yul\":9186:9195   */\n      dup3\n        /* \"#utility.yul\":9182:9200   */\n      add\n        /* \"#utility.yul\":9174:9200   */\n      swap1\n      pop\n        /* \"#utility.yul\":9246:9255   */\n      dup2\n        /* \"#utility.yul\":9240:9244   */\n      dup2\n        /* \"#utility.yul\":9236:9256   */\n      sub\n        /* \"#utility.yul\":9232:9233   */\n      0x00\n        /* \"#utility.yul\":9221:9230   */\n      dup4\n        /* \"#utility.yul\":9217:9234   */\n      add\n        /* \"#utility.yul\":9210:9257   */\n      mstore\n        /* \"#utility.yul\":9274:9405   */\n      tag_242\n        /* \"#utility.yul\":9400:9404   */\n      dup2\n        /* \"#utility.yul\":9274:9405   */\n      tag_202\n      jump\t// in\n    tag_242:\n        /* \"#utility.yul\":9266:9405   */\n      swap1\n      pop\n        /* \"#utility.yul\":9164:9412   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9418:9837   */\n    tag_89:\n      0x00\n        /* \"#utility.yul\":9622:9624   */\n      0x20\n        /* \"#utility.yul\":9611:9620   */\n      dup3\n        /* \"#utility.yul\":9607:9625   */\n      add\n        /* \"#utility.yul\":9599:9625   */\n      swap1\n      pop\n        /* \"#utility.yul\":9671:9680   */\n      dup2\n        /* \"#utility.yul\":9665:9669   */\n      dup2\n        /* \"#utility.yul\":9661:9681   */\n      sub\n        /* \"#utility.yul\":9657:9658   */\n      0x00\n        /* \"#utility.yul\":9646:9655   */\n      dup4\n        /* \"#utility.yul\":9642:9659   */\n      add\n        /* \"#utility.yul\":9635:9682   */\n      mstore\n        /* \"#utility.yul\":9699:9830   */\n      tag_244\n        /* \"#utility.yul\":9825:9829   */\n      dup2\n        /* \"#utility.yul\":9699:9830   */\n      tag_205\n      jump\t// in\n    tag_244:\n        /* \"#utility.yul\":9691:9830   */\n      swap1\n      pop\n        /* \"#utility.yul\":9589:9837   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9843:10262   */\n    tag_107:\n      0x00\n        /* \"#utility.yul\":10047:10049   */\n      0x20\n        /* \"#utility.yul\":10036:10045   */\n      dup3\n        /* \"#utility.yul\":10032:10050   */\n      add\n        /* \"#utility.yul\":10024:10050   */\n      swap1\n      pop\n        /* \"#utility.yul\":10096:10105   */\n      dup2\n        /* \"#utility.yul\":10090:10094   */\n      dup2\n        /* \"#utility.yul\":10086:10106   */\n      sub\n        /* \"#utility.yul\":10082:10083   */\n      0x00\n        /* \"#utility.yul\":10071:10080   */\n      dup4\n        /* \"#utility.yul\":10067:10084   */\n      add\n        /* \"#utility.yul\":10060:10107   */\n      mstore\n        /* \"#utility.yul\":10124:10255   */\n      tag_246\n        /* \"#utility.yul\":10250:10254   */\n      dup2\n        /* \"#utility.yul\":10124:10255   */\n      tag_208\n      jump\t// in\n    tag_246:\n        /* \"#utility.yul\":10116:10255   */\n      swap1\n      pop\n        /* \"#utility.yul\":10014:10262   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10268:10687   */\n    tag_85:\n      0x00\n        /* \"#utility.yul\":10472:10474   */\n      0x20\n        /* \"#utility.yul\":10461:10470   */\n      dup3\n        /* \"#utility.yul\":10457:10475   */\n      add\n        /* \"#utility.yul\":10449:10475   */\n      swap1\n      pop\n        /* \"#utility.yul\":10521:10530   */\n      dup2\n        /* \"#utility.yul\":10515:10519   */\n      dup2\n        /* \"#utility.yul\":10511:10531   */\n      sub\n        /* \"#utility.yul\":10507:10508   */\n      0x00\n        /* \"#utility.yul\":10496:10505   */\n      dup4\n        /* \"#utility.yul\":10492:10509   */\n      add\n        /* \"#utility.yul\":10485:10532   */\n      mstore\n        /* \"#utility.yul\":10549:10680   */\n      tag_248\n        /* \"#utility.yul\":10675:10679   */\n      dup2\n        /* \"#utility.yul\":10549:10680   */\n      tag_211\n      jump\t// in\n    tag_248:\n        /* \"#utility.yul\":10541:10680   */\n      swap1\n      pop\n        /* \"#utility.yul\":10439:10687   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10693:11112   */\n    tag_82:\n      0x00\n        /* \"#utility.yul\":10897:10899   */\n      0x20\n        /* \"#utility.yul\":10886:10895   */\n      dup3\n        /* \"#utility.yul\":10882:10900   */\n      add\n        /* \"#utility.yul\":10874:10900   */\n      swap1\n      pop\n        /* \"#utility.yul\":10946:10955   */\n      dup2\n        /* \"#utility.yul\":10940:10944   */\n      dup2\n        /* \"#utility.yul\":10936:10956   */\n      sub\n        /* \"#utility.yul\":10932:10933   */\n      0x00\n        /* \"#utility.yul\":10921:10930   */\n      dup4\n        /* \"#utility.yul\":10917:10934   */\n      add\n        /* \"#utility.yul\":10910:10957   */\n      mstore\n        /* \"#utility.yul\":10974:11105   */\n      tag_250\n        /* \"#utility.yul\":11100:11104   */\n      dup2\n        /* \"#utility.yul\":10974:11105   */\n      tag_214\n      jump\t// in\n    tag_250:\n        /* \"#utility.yul\":10966:11105   */\n      swap1\n      pop\n        /* \"#utility.yul\":10864:11112   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11118:11450   */\n    tag_30:\n      0x00\n        /* \"#utility.yul\":11277:11279   */\n      0x40\n        /* \"#utility.yul\":11266:11275   */\n      dup3\n        /* \"#utility.yul\":11262:11280   */\n      add\n        /* \"#utility.yul\":11254:11280   */\n      swap1\n      pop\n        /* \"#utility.yul\":11290:11361   */\n      tag_252\n        /* \"#utility.yul\":11358:11359   */\n      0x00\n        /* \"#utility.yul\":11347:11356   */\n      dup4\n        /* \"#utility.yul\":11343:11360   */\n      add\n        /* \"#utility.yul\":11334:11340   */\n      dup6\n        /* \"#utility.yul\":11290:11361   */\n      tag_217\n      jump\t// in\n    tag_252:\n        /* \"#utility.yul\":11371:11443   */\n      tag_253\n        /* \"#utility.yul\":11439:11441   */\n      0x20\n        /* \"#utility.yul\":11428:11437   */\n      dup4\n        /* \"#utility.yul\":11424:11442   */\n      add\n        /* \"#utility.yul\":11415:11421   */\n      dup5\n        /* \"#utility.yul\":11371:11443   */\n      tag_217\n      jump\t// in\n    tag_253:\n        /* \"#utility.yul\":11244:11450   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11456:11625   */\n    tag_192:\n      0x00\n        /* \"#utility.yul\":11574:11580   */\n      dup3\n        /* \"#utility.yul\":11569:11572   */\n      dup3\n        /* \"#utility.yul\":11562:11581   */\n      mstore\n        /* \"#utility.yul\":11614:11618   */\n      0x20\n        /* \"#utility.yul\":11609:11612   */\n      dup3\n        /* \"#utility.yul\":11605:11619   */\n      add\n        /* \"#utility.yul\":11590:11619   */\n      swap1\n      pop\n        /* \"#utility.yul\":11552:11625   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11631:11822   */\n    tag_109:\n      0x00\n        /* \"#utility.yul\":11691:11711   */\n      tag_256\n        /* \"#utility.yul\":11709:11710   */\n      dup3\n        /* \"#utility.yul\":11691:11711   */\n      tag_220\n      jump\t// in\n    tag_256:\n        /* \"#utility.yul\":11686:11711   */\n      swap2\n      pop\n        /* \"#utility.yul\":11725:11745   */\n      tag_257\n        /* \"#utility.yul\":11743:11744   */\n      dup4\n        /* \"#utility.yul\":11725:11745   */\n      tag_220\n      jump\t// in\n    tag_257:\n        /* \"#utility.yul\":11720:11745   */\n      swap3\n      pop\n        /* \"#utility.yul\":11764:11765   */\n      dup3\n        /* \"#utility.yul\":11761:11762   */\n      dup3\n        /* \"#utility.yul\":11758:11766   */\n      lt\n        /* \"#utility.yul\":11755:11757   */\n      iszero\n      tag_258\n      jumpi\n        /* \"#utility.yul\":11769:11787   */\n      tag_259\n      tag_260\n      jump\t// in\n    tag_259:\n        /* \"#utility.yul\":11755:11757   */\n    tag_258:\n        /* \"#utility.yul\":11814:11815   */\n      dup3\n        /* \"#utility.yul\":11811:11812   */\n      dup3\n        /* \"#utility.yul\":11807:11816   */\n      sub\n        /* \"#utility.yul\":11799:11816   */\n      swap1\n      pop\n        /* \"#utility.yul\":11676:11822   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11828:11924   */\n    tag_188:\n      0x00\n        /* \"#utility.yul\":11894:11918   */\n      tag_262\n        /* \"#utility.yul\":11912:11917   */\n      dup3\n        /* \"#utility.yul\":11894:11918   */\n      tag_263\n      jump\t// in\n    tag_262:\n        /* \"#utility.yul\":11883:11918   */\n      swap1\n      pop\n        /* \"#utility.yul\":11873:11924   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11930:12020   */\n    tag_264:\n      0x00\n        /* \"#utility.yul\":12007:12012   */\n      dup2\n        /* \"#utility.yul\":12000:12013   */\n      iszero\n        /* \"#utility.yul\":11993:12014   */\n      iszero\n        /* \"#utility.yul\":11982:12014   */\n      swap1\n      pop\n        /* \"#utility.yul\":11972:12020   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12026:12152   */\n    tag_263:\n      0x00\n        /* \"#utility.yul\":12103:12145   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":12096:12101   */\n      dup3\n        /* \"#utility.yul\":12092:12146   */\n      and\n        /* \"#utility.yul\":12081:12146   */\n      swap1\n      pop\n        /* \"#utility.yul\":12071:12152   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12158:12235   */\n    tag_220:\n      0x00\n        /* \"#utility.yul\":12224:12229   */\n      dup2\n        /* \"#utility.yul\":12213:12229   */\n      swap1\n      pop\n        /* \"#utility.yul\":12203:12235   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12241:12421   */\n    tag_260:\n        /* \"#utility.yul\":12289:12366   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":12286:12287   */\n      0x00\n        /* \"#utility.yul\":12279:12367   */\n      mstore\n        /* \"#utility.yul\":12386:12390   */\n      0x11\n        /* \"#utility.yul\":12383:12384   */\n      0x04\n        /* \"#utility.yul\":12376:12391   */\n      mstore\n        /* \"#utility.yul\":12410:12414   */\n      0x24\n        /* \"#utility.yul\":12407:12408   */\n      0x00\n        /* \"#utility.yul\":12400:12415   */\n      revert\n        /* \"#utility.yul\":12427:12549   */\n    tag_156:\n        /* \"#utility.yul\":12500:12524   */\n      tag_270\n        /* \"#utility.yul\":12518:12523   */\n      dup2\n        /* \"#utility.yul\":12500:12524   */\n      tag_188\n      jump\t// in\n    tag_270:\n        /* \"#utility.yul\":12493:12498   */\n      dup2\n        /* \"#utility.yul\":12490:12525   */\n      eq\n        /* \"#utility.yul\":12480:12482   */\n      tag_271\n      jumpi\n        /* \"#utility.yul\":12539:12540   */\n      0x00\n        /* \"#utility.yul\":12536:12537   */\n      dup1\n        /* \"#utility.yul\":12529:12541   */\n      revert\n        /* \"#utility.yul\":12480:12482   */\n    tag_271:\n        /* \"#utility.yul\":12470:12549   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12555:12671   */\n    tag_160:\n        /* \"#utility.yul\":12625:12646   */\n      tag_273\n        /* \"#utility.yul\":12640:12645   */\n      dup2\n        /* \"#utility.yul\":12625:12646   */\n      tag_264\n      jump\t// in\n    tag_273:\n        /* \"#utility.yul\":12618:12623   */\n      dup2\n        /* \"#utility.yul\":12615:12647   */\n      eq\n        /* \"#utility.yul\":12605:12607   */\n      tag_274\n      jumpi\n        /* \"#utility.yul\":12661:12662   */\n      0x00\n        /* \"#utility.yul\":12658:12659   */\n      dup1\n        /* \"#utility.yul\":12651:12663   */\n      revert\n        /* \"#utility.yul\":12605:12607   */\n    tag_274:\n        /* \"#utility.yul\":12595:12671   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12677:12799   */\n    tag_164:\n        /* \"#utility.yul\":12750:12774   */\n      tag_276\n        /* \"#utility.yul\":12768:12773   */\n      dup2\n        /* \"#utility.yul\":12750:12774   */\n      tag_220\n      jump\t// in\n    tag_276:\n        /* \"#utility.yul\":12743:12748   */\n      dup2\n        /* \"#utility.yul\":12740:12775   */\n      eq\n        /* \"#utility.yul\":12730:12732   */\n      tag_277\n      jumpi\n        /* \"#utility.yul\":12789:12790   */\n      0x00\n        /* \"#utility.yul\":12786:12787   */\n      dup1\n        /* \"#utility.yul\":12779:12791   */\n      revert\n        /* \"#utility.yul\":12730:12732   */\n    tag_277:\n        /* \"#utility.yul\":12720:12799   */\n      pop\n      jump\t// out\n\n    auxdata: 0xa26469706673582212205c95ebe9fa515f09316e1e6056233ee294736cf5ce777a5aca6bb823ebf0e5ee64736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6116538061010d6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100c75780639cd441da146100e5578063f2fde38b14610116578063f3e6ea8a146101325761007d565b80631a727c26146100825780636f9632da146100a1578063715018a6146100bd575b600080fd5b61008a61014e565b60405161009892919061134a565b60405180910390f35b6100bb60048036038101906100b69190610f35565b61019f565b005b6100c561022d565b005b6100cf610241565b6040516100dc919061132f565b60405180910390f35b6100ff60048036038101906100fa9190610ffd565b61026a565b60405161010d9291906114f3565b60405180910390f35b610130600480360381019061012b9190610f0c565b61046b565b005b61014c60048036038101906101479190610f71565b6104ef565b005b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915091509091565b6101a7610c52565b81600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b610235610c52565b61023f6000610cd0565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080610275610c52565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b81526004016102d493929190611373565b602060405180830381600087803b1580156102ee57600080fd5b505af1158015610302573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103269190610fd4565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161038693929190611373565b602060405180830381600087803b1580156103a057600080fd5b505af11580156103b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d89190610fd4565b506000806103e860015487610d94565b915091506000806103fb60025488610d94565b915091508380156104095750815b610448576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043f906113f3565b60405180910390fd5b826001819055508060028190555060015460025495509550505050509250929050565b610473610c52565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156104e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104da906113d3565b60405180910390fd5b6104ec81610cd0565b50565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561055f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610556906114d3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156105cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c6906114b3565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806106785750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b6106b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ae90611473565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561098357600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161076c93929190611373565b602060405180830381600087803b15801561078657600080fd5b505af115801561079a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107be9190610fd4565b506000806107ce60015486610d94565b9150915081610812576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080990611453565b60405180910390fd5b80600181905550600061082a86600254600154610dc3565b905084811161086e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086590611413565b60405180910390fd5b60025481106108b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a990611493565b60405180910390fd5b80600260008282546108c4919061152d565b92505081905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85836040518363ffffffff1660e01b81526004016109289291906113aa565b602060405180830381600087803b15801561094257600080fd5b505af1158015610956573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097a9190610fd4565b50505050610c4c565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610c4b57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610a3893929190611373565b602060405180830381600087803b158015610a5257600080fd5b505af1158015610a66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8a9190610fd4565b50600080610a9a60025486610d94565b9150915081610ade576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad590611453565b60405180910390fd5b806002819055506000610af686600154600254610dc3565b9050848111610b3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3190611413565b60405180910390fd5b6001548110610b7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7590611493565b60405180910390fd5b8060016000828254610b90919061152d565b92505081905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85836040518363ffffffff1660e01b8152600401610bf49291906113aa565b602060405180830381600087803b158015610c0e57600080fd5b505af1158015610c22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c469190610fd4565b505050505b5b50505050565b610c5a610ec5565b73ffffffffffffffffffffffffffffffffffffffff16610c78610241565b73ffffffffffffffffffffffffffffffffffffffff1614610cce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc590611433565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000806000838501905084811015610db3576000809250925050610dbc565b60018192509250505b9250929050565b600080600080198587098587029250828110838203039150506000811415610e2557838281610e1b577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492505050610ebe565b808411610e3157600080fd5b60008486880990508281118203915080830392506000600186190186169050808604955080840493506001818260000304019050808302841793506000600287600302189050808702600203810290508087026002038102905080870260020381029050808702600203810290508087026002038102905080870260020381029050808502955050505050505b9392505050565b600033905090565b600081359050610edc816115d8565b92915050565b600081519050610ef1816115ef565b92915050565b600081359050610f0681611606565b92915050565b600060208284031215610f1e57600080fd5b6000610f2c84828501610ecd565b91505092915050565b60008060408385031215610f4857600080fd5b6000610f5685828601610ecd565b9250506020610f6785828601610ecd565b9150509250929050565b60008060008060808587031215610f8757600080fd5b6000610f9587828801610ecd565b9450506020610fa687828801610ef7565b9350506040610fb787828801610ef7565b9250506060610fc887828801610ecd565b91505092959194509250565b600060208284031215610fe657600080fd5b6000610ff484828501610ee2565b91505092915050565b6000806040838503121561101057600080fd5b600061101e85828601610ef7565b925050602061102f85828601610ef7565b9150509250929050565b61104281611561565b82525050565b600061105560268361151c565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006110bb601d8361151c565b91507f616464206661696c202c20627920536166654d6174682e7472794164640000006000830152602082019050919050565b60006110fb60218361151c565b91507f616d6f756e744f7574206c657373207468616e205f616d6f756e744f75744d6960008301527f6e000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061116160208361151c565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b60006111a1602d8361151c565b91507f746f6b656e496e20616d6f756e7420616464206661696c2c20736f757263652060008301527f66726f6d20736166654d617468000000000000000000000000000000000000006020830152604082019050919050565b600061120760268361151c565b91507f746f6b656e496e206d7573742062652041206f7220422074686174206861732060008301527f62652073657400000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061126d601a8361151c565b91507f746f6b656e4f757420616d6f756e74206e6f7420656e6f7567680000000000006000830152602082019050919050565b60006112ad601b8361151c565b91507f5f746f2063616e206e6f74206265207a65726f206164647265737300000000006000830152602082019050919050565b60006112ed601f8361151c565b91507f746f6b656e496e2063616e206e6f74206265207a65726f2061646472657373006000830152602082019050919050565b6113298161159f565b82525050565b60006020820190506113446000830184611039565b92915050565b600060408201905061135f6000830185611039565b61136c6020830184611039565b9392505050565b60006060820190506113886000830186611039565b6113956020830185611039565b6113a26040830184611320565b949350505050565b60006040820190506113bf6000830185611039565b6113cc6020830184611320565b9392505050565b600060208201905081810360008301526113ec81611048565b9050919050565b6000602082019050818103600083015261140c816110ae565b9050919050565b6000602082019050818103600083015261142c816110ee565b9050919050565b6000602082019050818103600083015261144c81611154565b9050919050565b6000602082019050818103600083015261146c81611194565b9050919050565b6000602082019050818103600083015261148c816111fa565b9050919050565b600060208201905081810360008301526114ac81611260565b9050919050565b600060208201905081810360008301526114cc816112a0565b9050919050565b600060208201905081810360008301526114ec816112e0565b9050919050565b60006040820190506115086000830185611320565b6115156020830184611320565b9392505050565b600082825260208201905092915050565b60006115388261159f565b91506115438361159f565b925082821015611556576115556115a9565b5b828203905092915050565b600061156c8261157f565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6115e181611561565b81146115ec57600080fd5b50565b6115f881611573565b811461160357600080fd5b50565b61160f8161159f565b811461161a57600080fd5b5056fea26469706673582212205c95ebe9fa515f09316e1e6056233ee294736cf5ce777a5aca6bb823ebf0e5ee64736f6c63430008000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D PUSH2 0x22 PUSH2 0x32 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x3A PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x1653 DUP1 PUSH2 0x10D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xC7 JUMPI DUP1 PUSH4 0x9CD441DA EQ PUSH2 0xE5 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x116 JUMPI DUP1 PUSH4 0xF3E6EA8A EQ PUSH2 0x132 JUMPI PUSH2 0x7D JUMP JUMPDEST DUP1 PUSH4 0x1A727C26 EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x6F9632DA EQ PUSH2 0xA1 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xBD JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8A PUSH2 0x14E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x98 SWAP3 SWAP2 SWAP1 PUSH2 0x134A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xBB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xB6 SWAP2 SWAP1 PUSH2 0xF35 JUMP JUMPDEST PUSH2 0x19F JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC5 PUSH2 0x22D JUMP JUMPDEST STOP JUMPDEST PUSH2 0xCF PUSH2 0x241 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xDC SWAP2 SWAP1 PUSH2 0x132F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xFA SWAP2 SWAP1 PUSH2 0xFFD JUMP JUMPDEST PUSH2 0x26A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10D SWAP3 SWAP2 SWAP1 PUSH2 0x14F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x130 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x12B SWAP2 SWAP1 PUSH2 0xF0C JUMP JUMPDEST PUSH2 0x46B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x14C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x147 SWAP2 SWAP1 PUSH2 0xF71 JUMP JUMPDEST PUSH2 0x4EF JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH2 0x1A7 PUSH2 0xC52 JUMP JUMPDEST DUP2 PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x4 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0x235 PUSH2 0xC52 JUMP JUMPDEST PUSH2 0x23F PUSH1 0x0 PUSH2 0xCD0 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x275 PUSH2 0xC52 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP8 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1373 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x302 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x326 SWAP2 SWAP1 PUSH2 0xFD4 JUMP JUMPDEST POP PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP7 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x386 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1373 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3B4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3D8 SWAP2 SWAP1 PUSH2 0xFD4 JUMP JUMPDEST POP PUSH1 0x0 DUP1 PUSH2 0x3E8 PUSH1 0x1 SLOAD DUP8 PUSH2 0xD94 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP1 PUSH2 0x3FB PUSH1 0x2 SLOAD DUP9 PUSH2 0xD94 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP4 DUP1 ISZERO PUSH2 0x409 JUMPI POP DUP2 JUMPDEST PUSH2 0x448 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x43F SWAP1 PUSH2 0x13F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH1 0x1 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x2 DUP2 SWAP1 SSTORE POP PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD SWAP6 POP SWAP6 POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x473 PUSH2 0xC52 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4E3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4DA SWAP1 PUSH2 0x13D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4EC DUP2 PUSH2 0xCD0 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x55F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x556 SWAP1 PUSH2 0x14D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x5CF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5C6 SWAP1 PUSH2 0x14B3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x678 JUMPI POP PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST PUSH2 0x6B7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AE SWAP1 PUSH2 0x1473 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x983 JUMPI PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP7 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x76C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1373 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x786 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x79A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7BE SWAP2 SWAP1 PUSH2 0xFD4 JUMP JUMPDEST POP PUSH1 0x0 DUP1 PUSH2 0x7CE PUSH1 0x1 SLOAD DUP7 PUSH2 0xD94 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0x812 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x809 SWAP1 PUSH2 0x1453 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH2 0x82A DUP7 PUSH1 0x2 SLOAD PUSH1 0x1 SLOAD PUSH2 0xDC3 JUMP JUMPDEST SWAP1 POP DUP5 DUP2 GT PUSH2 0x86E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x865 SWAP1 PUSH2 0x1413 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 SLOAD DUP2 LT PUSH2 0x8B2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8A9 SWAP1 PUSH2 0x1493 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x8C4 SWAP2 SWAP1 PUSH2 0x152D JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP6 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x928 SWAP3 SWAP2 SWAP1 PUSH2 0x13AA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x942 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x956 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x97A SWAP2 SWAP1 PUSH2 0xFD4 JUMP JUMPDEST POP POP POP POP PUSH2 0xC4C JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC4B JUMPI PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP7 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA38 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1373 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA66 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA8A SWAP2 SWAP1 PUSH2 0xFD4 JUMP JUMPDEST POP PUSH1 0x0 DUP1 PUSH2 0xA9A PUSH1 0x2 SLOAD DUP7 PUSH2 0xD94 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0xADE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAD5 SWAP1 PUSH2 0x1453 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x2 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH2 0xAF6 DUP7 PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD PUSH2 0xDC3 JUMP JUMPDEST SWAP1 POP DUP5 DUP2 GT PUSH2 0xB3A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB31 SWAP1 PUSH2 0x1413 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD DUP2 LT PUSH2 0xB7E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB75 SWAP1 PUSH2 0x1493 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xB90 SWAP2 SWAP1 PUSH2 0x152D JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP6 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBF4 SWAP3 SWAP2 SWAP1 PUSH2 0x13AA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC22 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC46 SWAP2 SWAP1 PUSH2 0xFD4 JUMP JUMPDEST POP POP POP POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0xC5A PUSH2 0xEC5 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC78 PUSH2 0x241 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCCE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCC5 SWAP1 PUSH2 0x1433 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP6 ADD SWAP1 POP DUP5 DUP2 LT ISZERO PUSH2 0xDB3 JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0xDBC JUMP JUMPDEST PUSH1 0x1 DUP2 SWAP3 POP SWAP3 POP POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 NOT DUP6 DUP8 MULMOD DUP6 DUP8 MUL SWAP3 POP DUP3 DUP2 LT DUP4 DUP3 SUB SUB SWAP2 POP POP PUSH1 0x0 DUP2 EQ ISZERO PUSH2 0xE25 JUMPI DUP4 DUP3 DUP2 PUSH2 0xE1B JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP POP POP PUSH2 0xEBE JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0xE31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP7 DUP9 MULMOD SWAP1 POP DUP3 DUP2 GT DUP3 SUB SWAP2 POP DUP1 DUP4 SUB SWAP3 POP PUSH1 0x0 PUSH1 0x1 DUP7 NOT ADD DUP7 AND SWAP1 POP DUP1 DUP7 DIV SWAP6 POP DUP1 DUP5 DIV SWAP4 POP PUSH1 0x1 DUP2 DUP3 PUSH1 0x0 SUB DIV ADD SWAP1 POP DUP1 DUP4 MUL DUP5 OR SWAP4 POP PUSH1 0x0 PUSH1 0x2 DUP8 PUSH1 0x3 MUL XOR SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP6 MUL SWAP6 POP POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xEDC DUP2 PUSH2 0x15D8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xEF1 DUP2 PUSH2 0x15EF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xF06 DUP2 PUSH2 0x1606 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xF2C DUP5 DUP3 DUP6 ADD PUSH2 0xECD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xF56 DUP6 DUP3 DUP7 ADD PUSH2 0xECD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xF67 DUP6 DUP3 DUP7 ADD PUSH2 0xECD JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xF87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xF95 DUP8 DUP3 DUP9 ADD PUSH2 0xECD JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0xFA6 DUP8 DUP3 DUP9 ADD PUSH2 0xEF7 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0xFB7 DUP8 DUP3 DUP9 ADD PUSH2 0xEF7 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0xFC8 DUP8 DUP3 DUP9 ADD PUSH2 0xECD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xFF4 DUP5 DUP3 DUP6 ADD PUSH2 0xEE2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1010 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x101E DUP6 DUP3 DUP7 ADD PUSH2 0xEF7 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x102F DUP6 DUP3 DUP7 ADD PUSH2 0xEF7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x1042 DUP2 PUSH2 0x1561 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1055 PUSH1 0x26 DUP4 PUSH2 0x151C JUMP JUMPDEST SWAP2 POP PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10BB PUSH1 0x1D DUP4 PUSH2 0x151C JUMP JUMPDEST SWAP2 POP PUSH32 0x616464206661696C202C20627920536166654D6174682E747279416464000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FB PUSH1 0x21 DUP4 PUSH2 0x151C JUMP JUMPDEST SWAP2 POP PUSH32 0x616D6F756E744F7574206C657373207468616E205F616D6F756E744F75744D69 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x6E00000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1161 PUSH1 0x20 DUP4 PUSH2 0x151C JUMP JUMPDEST SWAP2 POP PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11A1 PUSH1 0x2D DUP4 PUSH2 0x151C JUMP JUMPDEST SWAP2 POP PUSH32 0x746F6B656E496E20616D6F756E7420616464206661696C2C20736F7572636520 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x66726F6D20736166654D61746800000000000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1207 PUSH1 0x26 DUP4 PUSH2 0x151C JUMP JUMPDEST SWAP2 POP PUSH32 0x746F6B656E496E206D7573742062652041206F72204220746861742068617320 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x6265207365740000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x126D PUSH1 0x1A DUP4 PUSH2 0x151C JUMP JUMPDEST SWAP2 POP PUSH32 0x746F6B656E4F757420616D6F756E74206E6F7420656E6F756768000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12AD PUSH1 0x1B DUP4 PUSH2 0x151C JUMP JUMPDEST SWAP2 POP PUSH32 0x5F746F2063616E206E6F74206265207A65726F20616464726573730000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12ED PUSH1 0x1F DUP4 PUSH2 0x151C JUMP JUMPDEST SWAP2 POP PUSH32 0x746F6B656E496E2063616E206E6F74206265207A65726F206164647265737300 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1329 DUP2 PUSH2 0x159F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1344 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1039 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x135F PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1039 JUMP JUMPDEST PUSH2 0x136C PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1039 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1388 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1039 JUMP JUMPDEST PUSH2 0x1395 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1039 JUMP JUMPDEST PUSH2 0x13A2 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1320 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x13BF PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1039 JUMP JUMPDEST PUSH2 0x13CC PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1320 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x13EC DUP2 PUSH2 0x1048 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x140C DUP2 PUSH2 0x10AE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x142C DUP2 PUSH2 0x10EE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x144C DUP2 PUSH2 0x1154 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x146C DUP2 PUSH2 0x1194 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x148C DUP2 PUSH2 0x11FA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x14AC DUP2 PUSH2 0x1260 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x14CC DUP2 PUSH2 0x12A0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x14EC DUP2 PUSH2 0x12E0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1508 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1320 JUMP JUMPDEST PUSH2 0x1515 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1320 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1538 DUP3 PUSH2 0x159F JUMP JUMPDEST SWAP2 POP PUSH2 0x1543 DUP4 PUSH2 0x159F JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x1556 JUMPI PUSH2 0x1555 PUSH2 0x15A9 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x156C DUP3 PUSH2 0x157F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x15E1 DUP2 PUSH2 0x1561 JUMP JUMPDEST DUP2 EQ PUSH2 0x15EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x15F8 DUP2 PUSH2 0x1573 JUMP JUMPDEST DUP2 EQ PUSH2 0x1603 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x160F DUP2 PUSH2 0x159F JUMP JUMPDEST DUP2 EQ PUSH2 0x161A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5C SWAP6 0xEB 0xE9 STATICCALL MLOAD 0x5F MULMOD BALANCE PUSH15 0x1E6056233EE294736CF5CE777A5ACA PUSH12 0xB823EBF0E5EE64736F6C6343 STOP ADDMOD STOP STOP CALLER ",
							"sourceMap": "279:3150:5:-:0;;;;;;;;;;;;;936:32:0;955:12;:10;;;:12;;:::i;:::-;936:18;;;:32;;:::i;:::-;279:3150:5;;640:96:2;693:7;719:10;712:17;;640:96;:::o;2433:187:0:-;2506:16;2525:6;;;;;;;;;;;2506:25;;2550:8;2541:6;;:17;;;;;;;;;;;;;;;;;;2604:8;2573:40;;2594:8;2573:40;;;;;;;;;;;;2433:187;;:::o;279:3150:5:-;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:12802:6",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "59:87:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "69:29:6",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "91:6:6"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "78:12:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "78:20:6"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "69:5:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "134:5:6"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "107:26:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "107:33:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "107:33:6"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "37:6:6",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "45:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "53:5:6",
														"type": ""
													}
												],
												"src": "7:139:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "212:77:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "222:22:6",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "237:6:6"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "231:5:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "231:13:6"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "222:5:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "277:5:6"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bool",
																	"nodeType": "YulIdentifier",
																	"src": "253:23:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "253:30:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "253:30:6"
														}
													]
												},
												"name": "abi_decode_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "190:6:6",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "198:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "206:5:6",
														"type": ""
													}
												],
												"src": "152:137:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "347:87:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "357:29:6",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "379:6:6"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "366:12:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "366:20:6"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "357:5:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "422:5:6"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "395:26:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "395:33:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "395:33:6"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "325:6:6",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "333:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "341:5:6",
														"type": ""
													}
												],
												"src": "295:139:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "506:196:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "552:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "561:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "564:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "554:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "554:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "554:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "527:7:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "536:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "523:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "523:23:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "548:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "519:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "519:32:6"
															},
															"nodeType": "YulIf",
															"src": "516:2:6"
														},
														{
															"nodeType": "YulBlock",
															"src": "578:117:6",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "593:15:6",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "607:1:6",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "597:6:6",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "622:63:6",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "657:9:6"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "668:6:6"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "653:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "653:22:6"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "677:7:6"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "632:20:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "632:53:6"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "622:6:6"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "476:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "487:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "499:6:6",
														"type": ""
													}
												],
												"src": "440:262:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "791:324:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "837:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "846:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "849:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "839:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "839:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "839:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "812:7:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "821:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "808:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "808:23:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "833:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "804:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "804:32:6"
															},
															"nodeType": "YulIf",
															"src": "801:2:6"
														},
														{
															"nodeType": "YulBlock",
															"src": "863:117:6",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "878:15:6",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "892:1:6",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "882:6:6",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "907:63:6",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "942:9:6"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "953:6:6"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "938:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "938:22:6"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "962:7:6"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "917:20:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "917:53:6"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "907:6:6"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "990:118:6",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1005:16:6",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1019:2:6",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1009:6:6",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1035:63:6",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1070:9:6"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1081:6:6"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1066:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1066:22:6"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1090:7:6"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1045:20:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1045:53:6"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "1035:6:6"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "753:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "764:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "776:6:6",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "784:6:6",
														"type": ""
													}
												],
												"src": "708:407:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1238:581:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1285:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1294:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1297:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1287:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1287:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1287:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1259:7:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1268:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1255:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1255:23:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1280:3:6",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1251:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1251:33:6"
															},
															"nodeType": "YulIf",
															"src": "1248:2:6"
														},
														{
															"nodeType": "YulBlock",
															"src": "1311:117:6",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1326:15:6",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1340:1:6",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1330:6:6",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1355:63:6",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1390:9:6"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1401:6:6"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1386:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1386:22:6"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1410:7:6"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1365:20:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1365:53:6"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1355:6:6"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1438:118:6",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1453:16:6",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1467:2:6",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1457:6:6",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1483:63:6",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1518:9:6"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1529:6:6"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1514:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1514:22:6"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1538:7:6"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "1493:20:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1493:53:6"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "1483:6:6"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1566:118:6",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1581:16:6",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1595:2:6",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1585:6:6",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1611:63:6",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1646:9:6"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1657:6:6"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1642:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1642:22:6"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1666:7:6"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "1621:20:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1621:53:6"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "1611:6:6"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1694:118:6",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1709:16:6",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1723:2:6",
																		"type": "",
																		"value": "96"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1713:6:6",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1739:63:6",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1774:9:6"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1785:6:6"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1770:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1770:22:6"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1794:7:6"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1749:20:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1749:53:6"
																	},
																	"variableNames": [
																		{
																			"name": "value3",
																			"nodeType": "YulIdentifier",
																			"src": "1739:6:6"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256t_uint256t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1184:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1195:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1207:6:6",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1215:6:6",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1223:6:6",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "1231:6:6",
														"type": ""
													}
												],
												"src": "1121:698:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1899:204:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1945:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1954:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1957:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1947:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1947:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1947:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1920:7:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1929:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1916:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1916:23:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1941:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1912:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1912:32:6"
															},
															"nodeType": "YulIf",
															"src": "1909:2:6"
														},
														{
															"nodeType": "YulBlock",
															"src": "1971:125:6",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1986:15:6",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2000:1:6",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1990:6:6",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2015:71:6",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2058:9:6"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2069:6:6"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2054:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2054:22:6"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2078:7:6"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bool_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "2025:28:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2025:61:6"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "2015:6:6"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1869:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1880:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1892:6:6",
														"type": ""
													}
												],
												"src": "1825:278:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2192:324:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2238:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2247:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2250:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2240:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2240:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2240:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2213:7:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2222:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2209:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2209:23:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2234:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2205:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2205:32:6"
															},
															"nodeType": "YulIf",
															"src": "2202:2:6"
														},
														{
															"nodeType": "YulBlock",
															"src": "2264:117:6",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2279:15:6",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2293:1:6",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2283:6:6",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2308:63:6",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2343:9:6"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2354:6:6"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2339:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2339:22:6"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2363:7:6"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "2318:20:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2318:53:6"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "2308:6:6"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "2391:118:6",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2406:16:6",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2420:2:6",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2410:6:6",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2436:63:6",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2471:9:6"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2482:6:6"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2467:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2467:22:6"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2491:7:6"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "2446:20:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2446:53:6"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "2436:6:6"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2154:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2165:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2177:6:6",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2185:6:6",
														"type": ""
													}
												],
												"src": "2109:407:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2587:53:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2604:3:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2627:5:6"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "2609:17:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2609:24:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2597:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2597:37:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2597:37:6"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2575:5:6",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2582:3:6",
														"type": ""
													}
												],
												"src": "2522:118:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2792:224:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2802:74:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2868:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2873:2:6",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2809:58:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2809:67:6"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "2802:3:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "2897:3:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2902:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2893:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2893:11:6"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2906:34:6",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2886:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2886:55:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2886:55:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "2962:3:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2967:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2958:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2958:12:6"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2972:8:6",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2951:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2951:30:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2951:30:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2991:19:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3002:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3007:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2998:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2998:12:6"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "2991:3:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2780:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2788:3:6",
														"type": ""
													}
												],
												"src": "2646:370:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3168:181:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3178:74:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3244:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3249:2:6",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3185:58:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3185:67:6"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "3178:3:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "3273:3:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3278:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3269:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3269:11:6"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3282:31:6",
																		"type": "",
																		"value": "add fail , by SafeMath.tryAdd"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3262:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3262:52:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3262:52:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3324:19:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3335:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3340:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3331:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3331:12:6"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "3324:3:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_4337cdfd5c68574db0b6060d273fdacc9ae8ef491fa78b4b476aadb2c7d8b3c2_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3156:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3164:3:6",
														"type": ""
													}
												],
												"src": "3022:327:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3501:219:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3511:74:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3577:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3582:2:6",
																		"type": "",
																		"value": "33"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3518:58:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3518:67:6"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "3511:3:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "3606:3:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3611:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3602:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3602:11:6"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3615:34:6",
																		"type": "",
																		"value": "amountOut less than _amountOutMi"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3595:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3595:55:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3595:55:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "3671:3:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3676:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3667:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3667:12:6"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3681:3:6",
																		"type": "",
																		"value": "n"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3660:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3660:25:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3660:25:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3695:19:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3706:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3711:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3702:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3702:12:6"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "3695:3:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_497078f79163175cc78d87055f82228b7033ca1eca1d87771351ccf046fb1ac1_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3489:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3497:3:6",
														"type": ""
													}
												],
												"src": "3355:365:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3872:184:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3882:74:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3948:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3953:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3889:58:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3889:67:6"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "3882:3:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "3977:3:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3982:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3973:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3973:11:6"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3986:34:6",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3966:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3966:55:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3966:55:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4031:19:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4042:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4047:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4038:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4038:12:6"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "4031:3:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3860:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3868:3:6",
														"type": ""
													}
												],
												"src": "3726:330:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4208:231:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4218:74:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4284:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4289:2:6",
																		"type": "",
																		"value": "45"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4225:58:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4225:67:6"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "4218:3:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "4313:3:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4318:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4309:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4309:11:6"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4322:34:6",
																		"type": "",
																		"value": "tokenIn amount add fail, source "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4302:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4302:55:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4302:55:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "4378:3:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4383:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4374:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4374:12:6"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4388:15:6",
																		"type": "",
																		"value": "from safeMath"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4367:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4367:37:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4367:37:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4414:19:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4425:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4430:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4421:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4421:12:6"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "4414:3:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_bc6f5779ae692f37c9b00da7a6d431e94538b09b47b02ad0cb826da30a5f9a62_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4196:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4204:3:6",
														"type": ""
													}
												],
												"src": "4062:377:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4591:224:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4601:74:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4667:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4672:2:6",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4608:58:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4608:67:6"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "4601:3:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "4696:3:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4701:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4692:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4692:11:6"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4705:34:6",
																		"type": "",
																		"value": "tokenIn must be A or B that has "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4685:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4685:55:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4685:55:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "4761:3:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4766:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4757:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4757:12:6"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4771:8:6",
																		"type": "",
																		"value": "be set"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4750:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4750:30:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4750:30:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4790:19:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4801:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4806:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4797:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4797:12:6"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "4790:3:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_c3b506890a40fd410855a187665159c4979fd1d4a1cd0a2574a9a88822e93850_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4579:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4587:3:6",
														"type": ""
													}
												],
												"src": "4445:370:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4967:178:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4977:74:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5043:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5048:2:6",
																		"type": "",
																		"value": "26"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4984:58:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4984:67:6"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "4977:3:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "5072:3:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5077:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5068:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5068:11:6"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5081:28:6",
																		"type": "",
																		"value": "tokenOut amount not enough"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5061:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5061:49:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5061:49:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5120:19:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5131:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5136:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5127:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5127:12:6"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "5120:3:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_cf912b2603b1f63d525e98d065e83dcb24a37d03f8d299cd98363fb8f2c1858a_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4955:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4963:3:6",
														"type": ""
													}
												],
												"src": "4821:324:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5297:179:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5307:74:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5373:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5378:2:6",
																		"type": "",
																		"value": "27"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5314:58:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5314:67:6"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "5307:3:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "5402:3:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5407:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5398:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5398:11:6"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5411:29:6",
																		"type": "",
																		"value": "_to can not be zero address"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5391:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5391:50:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5391:50:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5451:19:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5462:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5467:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5458:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5458:12:6"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "5451:3:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_eb769f39a40bd11862b348c781a111e0dc4d12f234ca57b18ea9b1f585a5edc1_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5285:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "5293:3:6",
														"type": ""
													}
												],
												"src": "5151:325:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5628:183:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5638:74:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5704:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5709:2:6",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5645:58:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5645:67:6"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "5638:3:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "5733:3:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5738:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5729:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5729:11:6"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5742:33:6",
																		"type": "",
																		"value": "tokenIn can not be zero address"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5722:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5722:54:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5722:54:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5786:19:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5797:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5802:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5793:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5793:12:6"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "5786:3:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_ee1bb919b7d803d612a588aa2d3c76f58e496c5e0e171750a929f3aabba11471_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5616:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "5624:3:6",
														"type": ""
													}
												],
												"src": "5482:329:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5882:53:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5899:3:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5922:5:6"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "5904:17:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5904:24:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5892:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5892:37:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5892:37:6"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5870:5:6",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5877:3:6",
														"type": ""
													}
												],
												"src": "5817:118:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6039:124:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6049:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6061:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6072:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6057:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "6057:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6049:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6129:6:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6142:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6153:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6138:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6138:17:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6085:43:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "6085:71:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6085:71:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6011:9:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6023:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6034:4:6",
														"type": ""
													}
												],
												"src": "5941:222:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6295:206:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6305:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6317:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6328:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6313:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "6313:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6305:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6385:6:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6398:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6409:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6394:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6394:17:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6341:43:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "6341:71:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6341:71:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "6466:6:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6479:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6490:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6475:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6475:18:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6422:43:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "6422:72:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6422:72:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6259:9:6",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "6271:6:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6279:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6290:4:6",
														"type": ""
													}
												],
												"src": "6169:332:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6661:288:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6671:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6683:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6694:2:6",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6679:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "6679:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6671:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6751:6:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6764:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6775:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6760:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6760:17:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6707:43:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "6707:71:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6707:71:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "6832:6:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6845:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6856:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6841:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6841:18:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6788:43:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "6788:72:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6788:72:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "6914:6:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6927:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6938:2:6",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6923:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6923:18:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6870:43:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "6870:72:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6870:72:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6617:9:6",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "6629:6:6",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "6637:6:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6645:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6656:4:6",
														"type": ""
													}
												],
												"src": "6507:442:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7081:206:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7091:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7103:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7114:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7099:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "7099:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7091:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "7171:6:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7184:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7195:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7180:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7180:17:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7127:43:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "7127:71:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7127:71:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "7252:6:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7265:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7276:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7261:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7261:18:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7208:43:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "7208:72:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7208:72:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7045:9:6",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "7057:6:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7065:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7076:4:6",
														"type": ""
													}
												],
												"src": "6955:332:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7464:248:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7474:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7486:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7497:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7482:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "7482:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7474:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7521:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7532:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7517:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7517:17:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "7540:4:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7546:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7536:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7536:20:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7510:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "7510:47:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7510:47:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7566:139:6",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "7700:4:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7574:124:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "7574:131:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7566:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7444:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7459:4:6",
														"type": ""
													}
												],
												"src": "7293:419:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7889:248:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7899:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7911:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7922:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7907:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "7907:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7899:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7946:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7957:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7942:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7942:17:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "7965:4:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7971:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7961:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7961:20:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7935:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "7935:47:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7935:47:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7991:139:6",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "8125:4:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_4337cdfd5c68574db0b6060d273fdacc9ae8ef491fa78b4b476aadb2c7d8b3c2_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7999:124:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "7999:131:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7991:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4337cdfd5c68574db0b6060d273fdacc9ae8ef491fa78b4b476aadb2c7d8b3c2__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7869:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7884:4:6",
														"type": ""
													}
												],
												"src": "7718:419:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8314:248:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8324:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8336:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8347:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8332:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "8332:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8324:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8371:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8382:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8367:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8367:17:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "8390:4:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8396:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "8386:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8386:20:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8360:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "8360:47:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8360:47:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8416:139:6",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "8550:4:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_497078f79163175cc78d87055f82228b7033ca1eca1d87771351ccf046fb1ac1_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8424:124:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "8424:131:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8416:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_497078f79163175cc78d87055f82228b7033ca1eca1d87771351ccf046fb1ac1__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8294:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8309:4:6",
														"type": ""
													}
												],
												"src": "8143:419:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8739:248:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8749:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8761:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8772:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8757:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "8757:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8749:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8796:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8807:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8792:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8792:17:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "8815:4:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8821:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "8811:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8811:20:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8785:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "8785:47:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8785:47:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8841:139:6",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "8975:4:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8849:124:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "8849:131:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8841:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8719:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8734:4:6",
														"type": ""
													}
												],
												"src": "8568:419:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9164:248:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9174:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9186:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9197:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9182:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "9182:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9174:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9221:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9232:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9217:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9217:17:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "9240:4:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9246:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "9236:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9236:20:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9210:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "9210:47:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9210:47:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9266:139:6",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "9400:4:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_bc6f5779ae692f37c9b00da7a6d431e94538b09b47b02ad0cb826da30a5f9a62_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9274:124:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "9274:131:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9266:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_bc6f5779ae692f37c9b00da7a6d431e94538b09b47b02ad0cb826da30a5f9a62__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9144:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9159:4:6",
														"type": ""
													}
												],
												"src": "8993:419:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9589:248:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9599:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9611:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9622:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9607:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "9607:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9599:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9646:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9657:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9642:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9642:17:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "9665:4:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9671:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "9661:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9661:20:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9635:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "9635:47:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9635:47:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9691:139:6",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "9825:4:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_c3b506890a40fd410855a187665159c4979fd1d4a1cd0a2574a9a88822e93850_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9699:124:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "9699:131:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9691:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c3b506890a40fd410855a187665159c4979fd1d4a1cd0a2574a9a88822e93850__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9569:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9584:4:6",
														"type": ""
													}
												],
												"src": "9418:419:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10014:248:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10024:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10036:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10047:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10032:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "10032:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10024:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10071:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10082:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10067:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10067:17:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "10090:4:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10096:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "10086:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10086:20:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10060:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "10060:47:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10060:47:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10116:139:6",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "10250:4:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_cf912b2603b1f63d525e98d065e83dcb24a37d03f8d299cd98363fb8f2c1858a_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10124:124:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "10124:131:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10116:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_cf912b2603b1f63d525e98d065e83dcb24a37d03f8d299cd98363fb8f2c1858a__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9994:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10009:4:6",
														"type": ""
													}
												],
												"src": "9843:419:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10439:248:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10449:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10461:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10472:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10457:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "10457:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10449:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10496:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10507:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10492:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10492:17:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "10515:4:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10521:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "10511:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10511:20:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10485:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "10485:47:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10485:47:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10541:139:6",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "10675:4:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_eb769f39a40bd11862b348c781a111e0dc4d12f234ca57b18ea9b1f585a5edc1_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10549:124:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "10549:131:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10541:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_eb769f39a40bd11862b348c781a111e0dc4d12f234ca57b18ea9b1f585a5edc1__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10419:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10434:4:6",
														"type": ""
													}
												],
												"src": "10268:419:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10864:248:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10874:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10886:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10897:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10882:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "10882:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10874:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10921:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10932:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10917:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10917:17:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "10940:4:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10946:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "10936:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10936:20:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10910:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "10910:47:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10910:47:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10966:139:6",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "11100:4:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_ee1bb919b7d803d612a588aa2d3c76f58e496c5e0e171750a929f3aabba11471_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10974:124:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "10974:131:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10966:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ee1bb919b7d803d612a588aa2d3c76f58e496c5e0e171750a929f3aabba11471__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10844:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10859:4:6",
														"type": ""
													}
												],
												"src": "10693:419:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11244:206:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11254:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11266:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11277:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11262:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "11262:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11254:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "11334:6:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11347:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11358:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11343:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11343:17:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11290:43:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "11290:71:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11290:71:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "11415:6:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11428:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11439:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11424:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11424:18:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11371:43:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "11371:72:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11371:72:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11208:9:6",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "11220:6:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11228:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11239:4:6",
														"type": ""
													}
												],
												"src": "11118:332:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11552:73:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11569:3:6"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "11574:6:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11562:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "11562:19:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11562:19:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11590:29:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11609:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11614:4:6",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11605:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "11605:14:6"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "11590:11:6"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "11524:3:6",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "11529:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "11540:11:6",
														"type": ""
													}
												],
												"src": "11456:169:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11676:146:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11686:25:6",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "11709:1:6"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "11691:17:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "11691:20:6"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "11686:1:6"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "11720:25:6",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "11743:1:6"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "11725:17:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "11725:20:6"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "11720:1:6"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11767:22:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "11769:16:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11769:18:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11769:18:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "11761:1:6"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "11764:1:6"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "11758:2:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "11758:8:6"
															},
															"nodeType": "YulIf",
															"src": "11755:2:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11799:17:6",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "11811:1:6"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "11814:1:6"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "11807:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "11807:9:6"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "11799:4:6"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "11662:1:6",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "11665:1:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "11671:4:6",
														"type": ""
													}
												],
												"src": "11631:191:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11873:51:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11883:35:6",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "11912:5:6"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "11894:17:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "11894:24:6"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "11883:7:6"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11855:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "11865:7:6",
														"type": ""
													}
												],
												"src": "11828:96:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11972:48:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11982:32:6",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "12007:5:6"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "12000:6:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12000:13:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "11993:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "11993:21:6"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "11982:7:6"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11954:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "11964:7:6",
														"type": ""
													}
												],
												"src": "11930:90:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12071:81:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12081:65:6",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "12096:5:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12103:42:6",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "12092:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "12092:54:6"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "12081:7:6"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12053:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "12063:7:6",
														"type": ""
													}
												],
												"src": "12026:126:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12203:32:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12213:16:6",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "12224:5:6"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "12213:7:6"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12185:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "12195:7:6",
														"type": ""
													}
												],
												"src": "12158:77:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12269:152:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12286:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12289:77:6",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12279:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "12279:88:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12279:88:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12383:1:6",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12386:4:6",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12376:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "12376:15:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12376:15:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12407:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12410:4:6",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "12400:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "12400:15:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12400:15:6"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "12241:180:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12470:79:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12527:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12536:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12539:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "12529:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12529:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12529:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "12493:5:6"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "12518:5:6"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "12500:17:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "12500:24:6"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "12490:2:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12490:35:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "12483:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "12483:43:6"
															},
															"nodeType": "YulIf",
															"src": "12480:2:6"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12463:5:6",
														"type": ""
													}
												],
												"src": "12427:122:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12595:76:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12649:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12658:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12661:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "12651:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12651:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12651:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "12618:5:6"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "12640:5:6"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bool",
																					"nodeType": "YulIdentifier",
																					"src": "12625:14:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "12625:21:6"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "12615:2:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12615:32:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "12608:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "12608:40:6"
															},
															"nodeType": "YulIf",
															"src": "12605:2:6"
														}
													]
												},
												"name": "validator_revert_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12588:5:6",
														"type": ""
													}
												],
												"src": "12555:116:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12720:79:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12777:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12786:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12789:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "12779:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12779:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12779:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "12743:5:6"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "12768:5:6"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "12750:17:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "12750:24:6"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "12740:2:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12740:35:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "12733:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "12733:43:6"
															},
															"nodeType": "YulIf",
															"src": "12730:2:6"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12713:5:6",
														"type": ""
													}
												],
												"src": "12677:122:6"
											}
										]
									},
									"contents": "{\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_uint256t_uint256t_address(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n\n        mstore(add(pos, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(pos, 32), \"ddress\")\n\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_4337cdfd5c68574db0b6060d273fdacc9ae8ef491fa78b4b476aadb2c7d8b3c2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n\n        mstore(add(pos, 0), \"add fail , by SafeMath.tryAdd\")\n\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_497078f79163175cc78d87055f82228b7033ca1eca1d87771351ccf046fb1ac1_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n\n        mstore(add(pos, 0), \"amountOut less than _amountOutMi\")\n\n        mstore(add(pos, 32), \"n\")\n\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n\n        mstore(add(pos, 0), \"Ownable: caller is not the owner\")\n\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_bc6f5779ae692f37c9b00da7a6d431e94538b09b47b02ad0cb826da30a5f9a62_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 45)\n\n        mstore(add(pos, 0), \"tokenIn amount add fail, source \")\n\n        mstore(add(pos, 32), \"from safeMath\")\n\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_c3b506890a40fd410855a187665159c4979fd1d4a1cd0a2574a9a88822e93850_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n\n        mstore(add(pos, 0), \"tokenIn must be A or B that has \")\n\n        mstore(add(pos, 32), \"be set\")\n\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_cf912b2603b1f63d525e98d065e83dcb24a37d03f8d299cd98363fb8f2c1858a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 26)\n\n        mstore(add(pos, 0), \"tokenOut amount not enough\")\n\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_eb769f39a40bd11862b348c781a111e0dc4d12f234ca57b18ea9b1f585a5edc1_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 27)\n\n        mstore(add(pos, 0), \"_to can not be zero address\")\n\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_ee1bb919b7d803d612a588aa2d3c76f58e496c5e0e171750a929f3aabba11471_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n\n        mstore(add(pos, 0), \"tokenIn can not be zero address\")\n\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_4337cdfd5c68574db0b6060d273fdacc9ae8ef491fa78b4b476aadb2c7d8b3c2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_4337cdfd5c68574db0b6060d273fdacc9ae8ef491fa78b4b476aadb2c7d8b3c2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_497078f79163175cc78d87055f82228b7033ca1eca1d87771351ccf046fb1ac1__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_497078f79163175cc78d87055f82228b7033ca1eca1d87771351ccf046fb1ac1_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_bc6f5779ae692f37c9b00da7a6d431e94538b09b47b02ad0cb826da30a5f9a62__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_bc6f5779ae692f37c9b00da7a6d431e94538b09b47b02ad0cb826da30a5f9a62_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_c3b506890a40fd410855a187665159c4979fd1d4a1cd0a2574a9a88822e93850__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c3b506890a40fd410855a187665159c4979fd1d4a1cd0a2574a9a88822e93850_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_cf912b2603b1f63d525e98d065e83dcb24a37d03f8d299cd98363fb8f2c1858a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_cf912b2603b1f63d525e98d065e83dcb24a37d03f8d299cd98363fb8f2c1858a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_eb769f39a40bd11862b348c781a111e0dc4d12f234ca57b18ea9b1f585a5edc1__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_eb769f39a40bd11862b348c781a111e0dc4d12f234ca57b18ea9b1f585a5edc1_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_ee1bb919b7d803d612a588aa2d3c76f58e496c5e0e171750a929f3aabba11471__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_ee1bb919b7d803d612a588aa2d3c76f58e496c5e0e171750a929f3aabba11471_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n",
									"id": 6,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100c75780639cd441da146100e5578063f2fde38b14610116578063f3e6ea8a146101325761007d565b80631a727c26146100825780636f9632da146100a1578063715018a6146100bd575b600080fd5b61008a61014e565b60405161009892919061134a565b60405180910390f35b6100bb60048036038101906100b69190610f35565b61019f565b005b6100c561022d565b005b6100cf610241565b6040516100dc919061132f565b60405180910390f35b6100ff60048036038101906100fa9190610ffd565b61026a565b60405161010d9291906114f3565b60405180910390f35b610130600480360381019061012b9190610f0c565b61046b565b005b61014c60048036038101906101479190610f71565b6104ef565b005b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915091509091565b6101a7610c52565b81600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b610235610c52565b61023f6000610cd0565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080610275610c52565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b81526004016102d493929190611373565b602060405180830381600087803b1580156102ee57600080fd5b505af1158015610302573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103269190610fd4565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161038693929190611373565b602060405180830381600087803b1580156103a057600080fd5b505af11580156103b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d89190610fd4565b506000806103e860015487610d94565b915091506000806103fb60025488610d94565b915091508380156104095750815b610448576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043f906113f3565b60405180910390fd5b826001819055508060028190555060015460025495509550505050509250929050565b610473610c52565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156104e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104da906113d3565b60405180910390fd5b6104ec81610cd0565b50565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561055f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610556906114d3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156105cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c6906114b3565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806106785750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b6106b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ae90611473565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561098357600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161076c93929190611373565b602060405180830381600087803b15801561078657600080fd5b505af115801561079a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107be9190610fd4565b506000806107ce60015486610d94565b9150915081610812576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080990611453565b60405180910390fd5b80600181905550600061082a86600254600154610dc3565b905084811161086e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086590611413565b60405180910390fd5b60025481106108b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a990611493565b60405180910390fd5b80600260008282546108c4919061152d565b92505081905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85836040518363ffffffff1660e01b81526004016109289291906113aa565b602060405180830381600087803b15801561094257600080fd5b505af1158015610956573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097a9190610fd4565b50505050610c4c565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610c4b57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610a3893929190611373565b602060405180830381600087803b158015610a5257600080fd5b505af1158015610a66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8a9190610fd4565b50600080610a9a60025486610d94565b9150915081610ade576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad590611453565b60405180910390fd5b806002819055506000610af686600154600254610dc3565b9050848111610b3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3190611413565b60405180910390fd5b6001548110610b7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7590611493565b60405180910390fd5b8060016000828254610b90919061152d565b92505081905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85836040518363ffffffff1660e01b8152600401610bf49291906113aa565b602060405180830381600087803b158015610c0e57600080fd5b505af1158015610c22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c469190610fd4565b505050505b5b50505050565b610c5a610ec5565b73ffffffffffffffffffffffffffffffffffffffff16610c78610241565b73ffffffffffffffffffffffffffffffffffffffff1614610cce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc590611433565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000806000838501905084811015610db3576000809250925050610dbc565b60018192509250505b9250929050565b600080600080198587098587029250828110838203039150506000811415610e2557838281610e1b577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b0492505050610ebe565b808411610e3157600080fd5b60008486880990508281118203915080830392506000600186190186169050808604955080840493506001818260000304019050808302841793506000600287600302189050808702600203810290508087026002038102905080870260020381029050808702600203810290508087026002038102905080870260020381029050808502955050505050505b9392505050565b600033905090565b600081359050610edc816115d8565b92915050565b600081519050610ef1816115ef565b92915050565b600081359050610f0681611606565b92915050565b600060208284031215610f1e57600080fd5b6000610f2c84828501610ecd565b91505092915050565b60008060408385031215610f4857600080fd5b6000610f5685828601610ecd565b9250506020610f6785828601610ecd565b9150509250929050565b60008060008060808587031215610f8757600080fd5b6000610f9587828801610ecd565b9450506020610fa687828801610ef7565b9350506040610fb787828801610ef7565b9250506060610fc887828801610ecd565b91505092959194509250565b600060208284031215610fe657600080fd5b6000610ff484828501610ee2565b91505092915050565b6000806040838503121561101057600080fd5b600061101e85828601610ef7565b925050602061102f85828601610ef7565b9150509250929050565b61104281611561565b82525050565b600061105560268361151c565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006110bb601d8361151c565b91507f616464206661696c202c20627920536166654d6174682e7472794164640000006000830152602082019050919050565b60006110fb60218361151c565b91507f616d6f756e744f7574206c657373207468616e205f616d6f756e744f75744d6960008301527f6e000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061116160208361151c565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b60006111a1602d8361151c565b91507f746f6b656e496e20616d6f756e7420616464206661696c2c20736f757263652060008301527f66726f6d20736166654d617468000000000000000000000000000000000000006020830152604082019050919050565b600061120760268361151c565b91507f746f6b656e496e206d7573742062652041206f7220422074686174206861732060008301527f62652073657400000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061126d601a8361151c565b91507f746f6b656e4f757420616d6f756e74206e6f7420656e6f7567680000000000006000830152602082019050919050565b60006112ad601b8361151c565b91507f5f746f2063616e206e6f74206265207a65726f206164647265737300000000006000830152602082019050919050565b60006112ed601f8361151c565b91507f746f6b656e496e2063616e206e6f74206265207a65726f2061646472657373006000830152602082019050919050565b6113298161159f565b82525050565b60006020820190506113446000830184611039565b92915050565b600060408201905061135f6000830185611039565b61136c6020830184611039565b9392505050565b60006060820190506113886000830186611039565b6113956020830185611039565b6113a26040830184611320565b949350505050565b60006040820190506113bf6000830185611039565b6113cc6020830184611320565b9392505050565b600060208201905081810360008301526113ec81611048565b9050919050565b6000602082019050818103600083015261140c816110ae565b9050919050565b6000602082019050818103600083015261142c816110ee565b9050919050565b6000602082019050818103600083015261144c81611154565b9050919050565b6000602082019050818103600083015261146c81611194565b9050919050565b6000602082019050818103600083015261148c816111fa565b9050919050565b600060208201905081810360008301526114ac81611260565b9050919050565b600060208201905081810360008301526114cc816112a0565b9050919050565b600060208201905081810360008301526114ec816112e0565b9050919050565b60006040820190506115086000830185611320565b6115156020830184611320565b9392505050565b600082825260208201905092915050565b60006115388261159f565b91506115438361159f565b925082821015611556576115556115a9565b5b828203905092915050565b600061156c8261157f565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6115e181611561565b81146115ec57600080fd5b50565b6115f881611573565b811461160357600080fd5b50565b61160f8161159f565b811461161a57600080fd5b5056fea26469706673582212205c95ebe9fa515f09316e1e6056233ee294736cf5ce777a5aca6bb823ebf0e5ee64736f6c63430008000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xC7 JUMPI DUP1 PUSH4 0x9CD441DA EQ PUSH2 0xE5 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x116 JUMPI DUP1 PUSH4 0xF3E6EA8A EQ PUSH2 0x132 JUMPI PUSH2 0x7D JUMP JUMPDEST DUP1 PUSH4 0x1A727C26 EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x6F9632DA EQ PUSH2 0xA1 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xBD JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8A PUSH2 0x14E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x98 SWAP3 SWAP2 SWAP1 PUSH2 0x134A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xBB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xB6 SWAP2 SWAP1 PUSH2 0xF35 JUMP JUMPDEST PUSH2 0x19F JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC5 PUSH2 0x22D JUMP JUMPDEST STOP JUMPDEST PUSH2 0xCF PUSH2 0x241 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xDC SWAP2 SWAP1 PUSH2 0x132F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xFA SWAP2 SWAP1 PUSH2 0xFFD JUMP JUMPDEST PUSH2 0x26A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10D SWAP3 SWAP2 SWAP1 PUSH2 0x14F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x130 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x12B SWAP2 SWAP1 PUSH2 0xF0C JUMP JUMPDEST PUSH2 0x46B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x14C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x147 SWAP2 SWAP1 PUSH2 0xF71 JUMP JUMPDEST PUSH2 0x4EF JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH2 0x1A7 PUSH2 0xC52 JUMP JUMPDEST DUP2 PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x4 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0x235 PUSH2 0xC52 JUMP JUMPDEST PUSH2 0x23F PUSH1 0x0 PUSH2 0xCD0 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x275 PUSH2 0xC52 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP8 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1373 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x302 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x326 SWAP2 SWAP1 PUSH2 0xFD4 JUMP JUMPDEST POP PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP7 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x386 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1373 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3B4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3D8 SWAP2 SWAP1 PUSH2 0xFD4 JUMP JUMPDEST POP PUSH1 0x0 DUP1 PUSH2 0x3E8 PUSH1 0x1 SLOAD DUP8 PUSH2 0xD94 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP1 PUSH2 0x3FB PUSH1 0x2 SLOAD DUP9 PUSH2 0xD94 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP4 DUP1 ISZERO PUSH2 0x409 JUMPI POP DUP2 JUMPDEST PUSH2 0x448 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x43F SWAP1 PUSH2 0x13F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH1 0x1 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x2 DUP2 SWAP1 SSTORE POP PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD SWAP6 POP SWAP6 POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x473 PUSH2 0xC52 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4E3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4DA SWAP1 PUSH2 0x13D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4EC DUP2 PUSH2 0xCD0 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x55F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x556 SWAP1 PUSH2 0x14D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x5CF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5C6 SWAP1 PUSH2 0x14B3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x678 JUMPI POP PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST PUSH2 0x6B7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AE SWAP1 PUSH2 0x1473 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x983 JUMPI PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP7 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x76C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1373 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x786 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x79A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7BE SWAP2 SWAP1 PUSH2 0xFD4 JUMP JUMPDEST POP PUSH1 0x0 DUP1 PUSH2 0x7CE PUSH1 0x1 SLOAD DUP7 PUSH2 0xD94 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0x812 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x809 SWAP1 PUSH2 0x1453 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH2 0x82A DUP7 PUSH1 0x2 SLOAD PUSH1 0x1 SLOAD PUSH2 0xDC3 JUMP JUMPDEST SWAP1 POP DUP5 DUP2 GT PUSH2 0x86E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x865 SWAP1 PUSH2 0x1413 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 SLOAD DUP2 LT PUSH2 0x8B2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8A9 SWAP1 PUSH2 0x1493 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x8C4 SWAP2 SWAP1 PUSH2 0x152D JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP6 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x928 SWAP3 SWAP2 SWAP1 PUSH2 0x13AA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x942 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x956 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x97A SWAP2 SWAP1 PUSH2 0xFD4 JUMP JUMPDEST POP POP POP POP PUSH2 0xC4C JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC4B JUMPI PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP7 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA38 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1373 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA66 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA8A SWAP2 SWAP1 PUSH2 0xFD4 JUMP JUMPDEST POP PUSH1 0x0 DUP1 PUSH2 0xA9A PUSH1 0x2 SLOAD DUP7 PUSH2 0xD94 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0xADE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAD5 SWAP1 PUSH2 0x1453 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x2 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH2 0xAF6 DUP7 PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD PUSH2 0xDC3 JUMP JUMPDEST SWAP1 POP DUP5 DUP2 GT PUSH2 0xB3A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB31 SWAP1 PUSH2 0x1413 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD DUP2 LT PUSH2 0xB7E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB75 SWAP1 PUSH2 0x1493 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xB90 SWAP2 SWAP1 PUSH2 0x152D JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP6 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBF4 SWAP3 SWAP2 SWAP1 PUSH2 0x13AA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC22 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC46 SWAP2 SWAP1 PUSH2 0xFD4 JUMP JUMPDEST POP POP POP POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0xC5A PUSH2 0xEC5 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC78 PUSH2 0x241 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCCE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCC5 SWAP1 PUSH2 0x1433 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP6 ADD SWAP1 POP DUP5 DUP2 LT ISZERO PUSH2 0xDB3 JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0xDBC JUMP JUMPDEST PUSH1 0x1 DUP2 SWAP3 POP SWAP3 POP POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 NOT DUP6 DUP8 MULMOD DUP6 DUP8 MUL SWAP3 POP DUP3 DUP2 LT DUP4 DUP3 SUB SUB SWAP2 POP POP PUSH1 0x0 DUP2 EQ ISZERO PUSH2 0xE25 JUMPI DUP4 DUP3 DUP2 PUSH2 0xE1B JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP POP POP PUSH2 0xEBE JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0xE31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP7 DUP9 MULMOD SWAP1 POP DUP3 DUP2 GT DUP3 SUB SWAP2 POP DUP1 DUP4 SUB SWAP3 POP PUSH1 0x0 PUSH1 0x1 DUP7 NOT ADD DUP7 AND SWAP1 POP DUP1 DUP7 DIV SWAP6 POP DUP1 DUP5 DIV SWAP4 POP PUSH1 0x1 DUP2 DUP3 PUSH1 0x0 SUB DIV ADD SWAP1 POP DUP1 DUP4 MUL DUP5 OR SWAP4 POP PUSH1 0x0 PUSH1 0x2 DUP8 PUSH1 0x3 MUL XOR SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP6 MUL SWAP6 POP POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xEDC DUP2 PUSH2 0x15D8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xEF1 DUP2 PUSH2 0x15EF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xF06 DUP2 PUSH2 0x1606 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xF2C DUP5 DUP3 DUP6 ADD PUSH2 0xECD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xF56 DUP6 DUP3 DUP7 ADD PUSH2 0xECD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xF67 DUP6 DUP3 DUP7 ADD PUSH2 0xECD JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xF87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xF95 DUP8 DUP3 DUP9 ADD PUSH2 0xECD JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0xFA6 DUP8 DUP3 DUP9 ADD PUSH2 0xEF7 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0xFB7 DUP8 DUP3 DUP9 ADD PUSH2 0xEF7 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0xFC8 DUP8 DUP3 DUP9 ADD PUSH2 0xECD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xFF4 DUP5 DUP3 DUP6 ADD PUSH2 0xEE2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1010 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x101E DUP6 DUP3 DUP7 ADD PUSH2 0xEF7 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x102F DUP6 DUP3 DUP7 ADD PUSH2 0xEF7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x1042 DUP2 PUSH2 0x1561 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1055 PUSH1 0x26 DUP4 PUSH2 0x151C JUMP JUMPDEST SWAP2 POP PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10BB PUSH1 0x1D DUP4 PUSH2 0x151C JUMP JUMPDEST SWAP2 POP PUSH32 0x616464206661696C202C20627920536166654D6174682E747279416464000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FB PUSH1 0x21 DUP4 PUSH2 0x151C JUMP JUMPDEST SWAP2 POP PUSH32 0x616D6F756E744F7574206C657373207468616E205F616D6F756E744F75744D69 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x6E00000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1161 PUSH1 0x20 DUP4 PUSH2 0x151C JUMP JUMPDEST SWAP2 POP PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11A1 PUSH1 0x2D DUP4 PUSH2 0x151C JUMP JUMPDEST SWAP2 POP PUSH32 0x746F6B656E496E20616D6F756E7420616464206661696C2C20736F7572636520 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x66726F6D20736166654D61746800000000000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1207 PUSH1 0x26 DUP4 PUSH2 0x151C JUMP JUMPDEST SWAP2 POP PUSH32 0x746F6B656E496E206D7573742062652041206F72204220746861742068617320 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x6265207365740000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x126D PUSH1 0x1A DUP4 PUSH2 0x151C JUMP JUMPDEST SWAP2 POP PUSH32 0x746F6B656E4F757420616D6F756E74206E6F7420656E6F756768000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12AD PUSH1 0x1B DUP4 PUSH2 0x151C JUMP JUMPDEST SWAP2 POP PUSH32 0x5F746F2063616E206E6F74206265207A65726F20616464726573730000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12ED PUSH1 0x1F DUP4 PUSH2 0x151C JUMP JUMPDEST SWAP2 POP PUSH32 0x746F6B656E496E2063616E206E6F74206265207A65726F206164647265737300 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1329 DUP2 PUSH2 0x159F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1344 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1039 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x135F PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1039 JUMP JUMPDEST PUSH2 0x136C PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1039 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1388 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1039 JUMP JUMPDEST PUSH2 0x1395 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1039 JUMP JUMPDEST PUSH2 0x13A2 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1320 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x13BF PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1039 JUMP JUMPDEST PUSH2 0x13CC PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1320 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x13EC DUP2 PUSH2 0x1048 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x140C DUP2 PUSH2 0x10AE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x142C DUP2 PUSH2 0x10EE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x144C DUP2 PUSH2 0x1154 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x146C DUP2 PUSH2 0x1194 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x148C DUP2 PUSH2 0x11FA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x14AC DUP2 PUSH2 0x1260 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x14CC DUP2 PUSH2 0x12A0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x14EC DUP2 PUSH2 0x12E0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1508 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1320 JUMP JUMPDEST PUSH2 0x1515 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1320 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1538 DUP3 PUSH2 0x159F JUMP JUMPDEST SWAP2 POP PUSH2 0x1543 DUP4 PUSH2 0x159F JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x1556 JUMPI PUSH2 0x1555 PUSH2 0x15A9 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x156C DUP3 PUSH2 0x157F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x15E1 DUP2 PUSH2 0x1561 JUMP JUMPDEST DUP2 EQ PUSH2 0x15EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x15F8 DUP2 PUSH2 0x1573 JUMP JUMPDEST DUP2 EQ PUSH2 0x1603 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x160F DUP2 PUSH2 0x159F JUMP JUMPDEST DUP2 EQ PUSH2 0x161A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5C SWAP6 0xEB 0xE9 STATICCALL MLOAD 0x5F MULMOD BALANCE PUSH15 0x1E6056233EE294736CF5CE777A5ACA PUSH12 0xB823EBF0E5EE64736F6C6343 STOP ADDMOD STOP STOP CALLER ",
							"sourceMap": "279:3150:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;551:99;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;435:110;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1831:101:0;;;:::i;:::-;;1201:85;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;656:685:5;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;2081:198:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1347:1906:5;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;551:99;595:7;604;630:5;;;;;;;;;;;637;;;;;;;;;;;622:21;;;;551:99;;:::o;435:110::-;1094:13:0;:11;:13::i;:::-;516:2:5::1;508:5;;:10;;;;;;;;;;;;;;;;;;536:2;528:5;;:10;;;;;;;;;;;;;;;;;;435:110:::0;;:::o;1831:101:0:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;:::-;1831:101::o:0;1201:85::-;1247:7;1273:6;;;;;;;;;;;1266:13;;1201:85;:::o;656:685:5:-;742:7;751;1094:13:0;:11;:13::i;:::-;837:5:5::1;;;;;;;;;;;830:26;;;857:10;877:4;884:8;830:63;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;970:5;;;;;;;;;;;963:26;;;990:10;1010:4;1017:8;963:63;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1038:13;1053:12:::0;1069:34:::1;1085:7;;1094:8;1069:15;:34::i;:::-;1037:66;;;;1114:13;1129:12:::0;1145:34:::1;1161:7;;1170:8;1145:15;:34::i;:::-;1113:66;;;;1197:8;:20;;;;;1209:8;1197:20;1189:62;;;;;;;;;;;;:::i;:::-;;;;;;;;;1271:4;1261:7;:14;;;;1295:4;1285:7;:14;;;;1317:7;;1326;;1309:25;;;;;;;;656:685:::0;;;;;:::o;2081:198:0:-;1094:13;:11;:13::i;:::-;2189:1:::1;2169:22;;:8;:22;;;;2161:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2244:28;2263:8;2244:18;:28::i;:::-;2081:198:::0;:::o;1347:1906:5:-;1481:1;1461:22;;:8;:22;;;;1453:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;1552:1;1537:17;;:3;:17;;;;1529:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;1616:5;;;;;;;;;;;1604:17;;:8;:17;;;:38;;;;1637:5;;;;;;;;;;;1625:17;;:8;:17;;;1604:38;1596:89;;;;;;;;;;;;:::i;:::-;;;;;;;;;1739:5;;;;;;;;;;;1727:17;;:8;:17;;;1723:1524;;;1832:5;;;;;;;;;;;1825:26;;;1852:10;1872:4;1879:9;1825:64;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1905:12;1919:8;1931:35;1947:7;;1956:9;1931:15;:35::i;:::-;1904:62;;;;1988:7;1980:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;2069:3;2059:7;:13;;;;2087:18;2108:40;2120:9;2131:7;;2140;;2108:11;:40::i;:::-;2087:61;;2183:13;2170:10;:26;2162:72;;;;;;;;;;;;:::i;:::-;;;;;;;;;2269:7;;2256:10;:20;2248:59;;;;;;;;;;;;:::i;:::-;;;;;;;;;2332:10;2321:7;;:21;;;;;;;:::i;:::-;;;;;;;;2426:5;;;;;;;;;;;2419:22;;;2442:3;2447:10;2419:39;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1723:1524;;;;;;2517:5;;;;;;;;;;;2505:17;;:8;:17;;;2501:746;;;2610:5;;;;;;;;;;;2603:26;;;2630:10;2650:4;2657:9;2603:64;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2683:12;2697:8;2709:35;2725:7;;2734:9;2709:15;:35::i;:::-;2682:62;;;;2766:7;2758:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;2847:3;2837:7;:13;;;;2865:18;2886:40;2898:9;2909:7;;2918;;2886:11;:40::i;:::-;2865:61;;2961:13;2948:10;:26;2940:72;;;;;;;;;;;;:::i;:::-;;;;;;;;;3047:7;;3034:10;:20;3026:59;;;;;;;;;;;;:::i;:::-;;;;;;;;;3110:10;3099:7;;:21;;;;;;;:::i;:::-;;;;;;;;3204:5;;;;;;;;;;;3197:22;;;3220:3;3225:10;3197:39;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2501:746;;;;1723:1524;1347:1906;;;;:::o;1359:130:0:-;1433:12;:10;:12::i;:::-;1422:23;;:7;:5;:7::i;:::-;:23;;;1414:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1359:130::o;2433:187::-;2506:16;2525:6;;;;;;;;;;;2506:25;;2550:8;2541:6;;:17;;;;;;;;;;;;;;;;;;2604:8;2573:40;;2594:8;2573:40;;;;;;;;;;;;2433:187;;:::o;641:216:4:-;702:4;708:7;751:9;767:1;763;:5;751:17;;790:1;786;:5;782:28;;;801:5;808:1;793:17;;;;;;;782:28;832:4;838:1;824:16;;;;;641:216;;;;;;:::o;1667:3925:3:-;1779:14;2126:13;2198;2323:1;2319:6;2316:1;2313;2306:20;2359:1;2356;2352:9;2343:18;;2414:5;2410:2;2407:13;2399:5;2395:2;2391:14;2387:34;2378:43;;2278:157;2525:1;2516:5;:10;2512:75;;;2561:11;2553:5;:19;;;;;;;;;;;;;;2546:26;;;;;;2512:75;2711:5;2697:11;:19;2689:28;;;;;;2973:17;3108:11;3105:1;3102;3095:25;3082:38;;3236:5;3225:9;3222:20;3215:5;3211:32;3202:41;;3280:9;3273:5;3269:21;3260:30;;3611:12;3656:1;3642:11;3641:12;:16;3626:11;:32;3611:47;;3778:4;3765:11;3761:22;3746:37;;3870:4;3863:5;3859:16;3850:25;;4027:1;4020:4;4013;4010:1;4006:12;4002:23;3998:31;3990:39;;4126:4;4118:5;:12;4109:21;;;;4448:15;4486:1;4471:11;4467:1;:15;4466:21;4448:39;;4733:7;4719:11;:21;4715:1;:25;4704:36;;;;4802:7;4788:11;:21;4784:1;:25;4773:36;;;;4872:7;4858:11;:21;4854:1;:25;4843:36;;;;4942:7;4928:11;:21;4924:1;:25;4913:36;;;;5012:7;4998:11;:21;4994:1;:25;4983:36;;;;5083:7;5069:11;:21;5065:1;:25;5054:36;;;;5541:7;5533:5;:15;5524:24;;5562:13;;;;;1667:3925;;;;;;:::o;640:96:2:-;693:7;719:10;712:17;;640:96;:::o;7:139:6:-;;91:6;78:20;69:29;;107:33;134:5;107:33;:::i;:::-;59:87;;;;:::o;152:137::-;;237:6;231:13;222:22;;253:30;277:5;253:30;:::i;:::-;212:77;;;;:::o;295:139::-;;379:6;366:20;357:29;;395:33;422:5;395:33;:::i;:::-;347:87;;;;:::o;440:262::-;;548:2;536:9;527:7;523:23;519:32;516:2;;;564:1;561;554:12;516:2;607:1;632:53;677:7;668:6;657:9;653:22;632:53;:::i;:::-;622:63;;578:117;506:196;;;;:::o;708:407::-;;;833:2;821:9;812:7;808:23;804:32;801:2;;;849:1;846;839:12;801:2;892:1;917:53;962:7;953:6;942:9;938:22;917:53;:::i;:::-;907:63;;863:117;1019:2;1045:53;1090:7;1081:6;1070:9;1066:22;1045:53;:::i;:::-;1035:63;;990:118;791:324;;;;;:::o;1121:698::-;;;;;1280:3;1268:9;1259:7;1255:23;1251:33;1248:2;;;1297:1;1294;1287:12;1248:2;1340:1;1365:53;1410:7;1401:6;1390:9;1386:22;1365:53;:::i;:::-;1355:63;;1311:117;1467:2;1493:53;1538:7;1529:6;1518:9;1514:22;1493:53;:::i;:::-;1483:63;;1438:118;1595:2;1621:53;1666:7;1657:6;1646:9;1642:22;1621:53;:::i;:::-;1611:63;;1566:118;1723:2;1749:53;1794:7;1785:6;1774:9;1770:22;1749:53;:::i;:::-;1739:63;;1694:118;1238:581;;;;;;;:::o;1825:278::-;;1941:2;1929:9;1920:7;1916:23;1912:32;1909:2;;;1957:1;1954;1947:12;1909:2;2000:1;2025:61;2078:7;2069:6;2058:9;2054:22;2025:61;:::i;:::-;2015:71;;1971:125;1899:204;;;;:::o;2109:407::-;;;2234:2;2222:9;2213:7;2209:23;2205:32;2202:2;;;2250:1;2247;2240:12;2202:2;2293:1;2318:53;2363:7;2354:6;2343:9;2339:22;2318:53;:::i;:::-;2308:63;;2264:117;2420:2;2446:53;2491:7;2482:6;2471:9;2467:22;2446:53;:::i;:::-;2436:63;;2391:118;2192:324;;;;;:::o;2522:118::-;2609:24;2627:5;2609:24;:::i;:::-;2604:3;2597:37;2587:53;;:::o;2646:370::-;;2809:67;2873:2;2868:3;2809:67;:::i;:::-;2802:74;;2906:34;2902:1;2897:3;2893:11;2886:55;2972:8;2967:2;2962:3;2958:12;2951:30;3007:2;3002:3;2998:12;2991:19;;2792:224;;;:::o;3022:327::-;;3185:67;3249:2;3244:3;3185:67;:::i;:::-;3178:74;;3282:31;3278:1;3273:3;3269:11;3262:52;3340:2;3335:3;3331:12;3324:19;;3168:181;;;:::o;3355:365::-;;3518:67;3582:2;3577:3;3518:67;:::i;:::-;3511:74;;3615:34;3611:1;3606:3;3602:11;3595:55;3681:3;3676:2;3671:3;3667:12;3660:25;3711:2;3706:3;3702:12;3695:19;;3501:219;;;:::o;3726:330::-;;3889:67;3953:2;3948:3;3889:67;:::i;:::-;3882:74;;3986:34;3982:1;3977:3;3973:11;3966:55;4047:2;4042:3;4038:12;4031:19;;3872:184;;;:::o;4062:377::-;;4225:67;4289:2;4284:3;4225:67;:::i;:::-;4218:74;;4322:34;4318:1;4313:3;4309:11;4302:55;4388:15;4383:2;4378:3;4374:12;4367:37;4430:2;4425:3;4421:12;4414:19;;4208:231;;;:::o;4445:370::-;;4608:67;4672:2;4667:3;4608:67;:::i;:::-;4601:74;;4705:34;4701:1;4696:3;4692:11;4685:55;4771:8;4766:2;4761:3;4757:12;4750:30;4806:2;4801:3;4797:12;4790:19;;4591:224;;;:::o;4821:324::-;;4984:67;5048:2;5043:3;4984:67;:::i;:::-;4977:74;;5081:28;5077:1;5072:3;5068:11;5061:49;5136:2;5131:3;5127:12;5120:19;;4967:178;;;:::o;5151:325::-;;5314:67;5378:2;5373:3;5314:67;:::i;:::-;5307:74;;5411:29;5407:1;5402:3;5398:11;5391:50;5467:2;5462:3;5458:12;5451:19;;5297:179;;;:::o;5482:329::-;;5645:67;5709:2;5704:3;5645:67;:::i;:::-;5638:74;;5742:33;5738:1;5733:3;5729:11;5722:54;5802:2;5797:3;5793:12;5786:19;;5628:183;;;:::o;5817:118::-;5904:24;5922:5;5904:24;:::i;:::-;5899:3;5892:37;5882:53;;:::o;5941:222::-;;6072:2;6061:9;6057:18;6049:26;;6085:71;6153:1;6142:9;6138:17;6129:6;6085:71;:::i;:::-;6039:124;;;;:::o;6169:332::-;;6328:2;6317:9;6313:18;6305:26;;6341:71;6409:1;6398:9;6394:17;6385:6;6341:71;:::i;:::-;6422:72;6490:2;6479:9;6475:18;6466:6;6422:72;:::i;:::-;6295:206;;;;;:::o;6507:442::-;;6694:2;6683:9;6679:18;6671:26;;6707:71;6775:1;6764:9;6760:17;6751:6;6707:71;:::i;:::-;6788:72;6856:2;6845:9;6841:18;6832:6;6788:72;:::i;:::-;6870;6938:2;6927:9;6923:18;6914:6;6870:72;:::i;:::-;6661:288;;;;;;:::o;6955:332::-;;7114:2;7103:9;7099:18;7091:26;;7127:71;7195:1;7184:9;7180:17;7171:6;7127:71;:::i;:::-;7208:72;7276:2;7265:9;7261:18;7252:6;7208:72;:::i;:::-;7081:206;;;;;:::o;7293:419::-;;7497:2;7486:9;7482:18;7474:26;;7546:9;7540:4;7536:20;7532:1;7521:9;7517:17;7510:47;7574:131;7700:4;7574:131;:::i;:::-;7566:139;;7464:248;;;:::o;7718:419::-;;7922:2;7911:9;7907:18;7899:26;;7971:9;7965:4;7961:20;7957:1;7946:9;7942:17;7935:47;7999:131;8125:4;7999:131;:::i;:::-;7991:139;;7889:248;;;:::o;8143:419::-;;8347:2;8336:9;8332:18;8324:26;;8396:9;8390:4;8386:20;8382:1;8371:9;8367:17;8360:47;8424:131;8550:4;8424:131;:::i;:::-;8416:139;;8314:248;;;:::o;8568:419::-;;8772:2;8761:9;8757:18;8749:26;;8821:9;8815:4;8811:20;8807:1;8796:9;8792:17;8785:47;8849:131;8975:4;8849:131;:::i;:::-;8841:139;;8739:248;;;:::o;8993:419::-;;9197:2;9186:9;9182:18;9174:26;;9246:9;9240:4;9236:20;9232:1;9221:9;9217:17;9210:47;9274:131;9400:4;9274:131;:::i;:::-;9266:139;;9164:248;;;:::o;9418:419::-;;9622:2;9611:9;9607:18;9599:26;;9671:9;9665:4;9661:20;9657:1;9646:9;9642:17;9635:47;9699:131;9825:4;9699:131;:::i;:::-;9691:139;;9589:248;;;:::o;9843:419::-;;10047:2;10036:9;10032:18;10024:26;;10096:9;10090:4;10086:20;10082:1;10071:9;10067:17;10060:47;10124:131;10250:4;10124:131;:::i;:::-;10116:139;;10014:248;;;:::o;10268:419::-;;10472:2;10461:9;10457:18;10449:26;;10521:9;10515:4;10511:20;10507:1;10496:9;10492:17;10485:47;10549:131;10675:4;10549:131;:::i;:::-;10541:139;;10439:248;;;:::o;10693:419::-;;10897:2;10886:9;10882:18;10874:26;;10946:9;10940:4;10936:20;10932:1;10921:9;10917:17;10910:47;10974:131;11100:4;10974:131;:::i;:::-;10966:139;;10864:248;;;:::o;11118:332::-;;11277:2;11266:9;11262:18;11254:26;;11290:71;11358:1;11347:9;11343:17;11334:6;11290:71;:::i;:::-;11371:72;11439:2;11428:9;11424:18;11415:6;11371:72;:::i;:::-;11244:206;;;;;:::o;11456:169::-;;11574:6;11569:3;11562:19;11614:4;11609:3;11605:14;11590:29;;11552:73;;;;:::o;11631:191::-;;11691:20;11709:1;11691:20;:::i;:::-;11686:25;;11725:20;11743:1;11725:20;:::i;:::-;11720:25;;11764:1;11761;11758:8;11755:2;;;11769:18;;:::i;:::-;11755:2;11814:1;11811;11807:9;11799:17;;11676:146;;;;:::o;11828:96::-;;11894:24;11912:5;11894:24;:::i;:::-;11883:35;;11873:51;;;:::o;11930:90::-;;12007:5;12000:13;11993:21;11982:32;;11972:48;;;:::o;12026:126::-;;12103:42;12096:5;12092:54;12081:65;;12071:81;;;:::o;12158:77::-;;12224:5;12213:16;;12203:32;;;:::o;12241:180::-;12289:77;12286:1;12279:88;12386:4;12383:1;12376:15;12410:4;12407:1;12400:15;12427:122;12500:24;12518:5;12500:24;:::i;:::-;12493:5;12490:35;12480:2;;12539:1;12536;12529:12;12480:2;12470:79;:::o;12555:116::-;12625:21;12640:5;12625:21;:::i;:::-;12618:5;12615:32;12605:2;;12661:1;12658;12651:12;12605:2;12595:76;:::o;12677:122::-;12750:24;12768:5;12750:24;:::i;:::-;12743:5;12740:35;12730:2;;12789:1;12786;12779:12;12730:2;12720:79;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1143000",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"addLiquidity(uint256,uint256)": "infinite",
								"owner()": "1222",
								"queryPair()": "infinite",
								"renounceOwnership()": "24443",
								"setCoinPair(address,address)": "infinite",
								"swap(address,uint256,uint256,address)": "infinite",
								"transferOwnership(address)": "24791"
							},
							"internal": {
								"_checkInit()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 279,
									"end": 3429,
									"name": "PUSH",
									"source": 5,
									"value": "80"
								},
								{
									"begin": 279,
									"end": 3429,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 279,
									"end": 3429,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 279,
									"end": 3429,
									"name": "CALLVALUE",
									"source": 5
								},
								{
									"begin": 279,
									"end": 3429,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 279,
									"end": 3429,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 279,
									"end": 3429,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 279,
									"end": 3429,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 279,
									"end": 3429,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 279,
									"end": 3429,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 279,
									"end": 3429,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 279,
									"end": 3429,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 279,
									"end": 3429,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 279,
									"end": 3429,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 936,
									"end": 968,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 955,
									"end": 967,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "5"
								},
								{
									"begin": 955,
									"end": 965,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "6"
								},
								{
									"begin": 955,
									"end": 965,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 955,
									"end": 965,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 955,
									"end": 967,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 955,
									"end": 967,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 955,
									"end": 967,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 955,
									"end": 967,
									"name": "tag",
									"source": 0,
									"value": "5"
								},
								{
									"begin": 955,
									"end": 967,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 936,
									"end": 954,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 936,
									"end": 954,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 936,
									"end": 954,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 936,
									"end": 968,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 936,
									"end": 968,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "tag",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 279,
									"end": 3429,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "8"
								},
								{
									"begin": 279,
									"end": 3429,
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 640,
									"end": 736,
									"name": "tag",
									"source": 2,
									"value": "6"
								},
								{
									"begin": 640,
									"end": 736,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 693,
									"end": 700,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 2
								},
								{
									"begin": 712,
									"end": 729,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 712,
									"end": 729,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 640,
									"end": 736,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 640,
									"end": 736,
									"name": "JUMP",
									"source": 2,
									"value": "[out]"
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "tag",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2506,
									"end": 2522,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "DIV",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2506,
									"end": 2531,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2506,
									"end": 2531,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2550,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2547,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2541,
									"end": 2547,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2604,
									"end": 2612,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2594,
									"end": 2602,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 279,
									"end": 3429,
									"name": "tag",
									"source": 5,
									"value": "8"
								},
								{
									"begin": 279,
									"end": 3429,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 279,
									"end": 3429,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 279,
									"end": 3429,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 279,
									"end": 3429,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 279,
									"end": 3429,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 279,
									"end": 3429,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 279,
									"end": 3429,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 279,
									"end": 3429,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212205c95ebe9fa515f09316e1e6056233ee294736cf5ce777a5aca6bb823ebf0e5ee64736f6c63430008000033",
									".code": [
										{
											"begin": 279,
											"end": 3429,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "CALLVALUE",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "tag",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "CALLDATALOAD",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "SHR",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "PUSH",
											"source": 5,
											"value": "8DA5CB5B"
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "10"
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "PUSH",
											"source": 5,
											"value": "8DA5CB5B"
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "6"
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "PUSH",
											"source": 5,
											"value": "9CD441DA"
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "PUSH",
											"source": 5,
											"value": "F2FDE38B"
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "8"
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "PUSH",
											"source": 5,
											"value": "F3E6EA8A"
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "9"
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "tag",
											"source": 5,
											"value": "10"
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "PUSH",
											"source": 5,
											"value": "1A727C26"
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "PUSH",
											"source": 5,
											"value": "6F9632DA"
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "PUSH",
											"source": 5,
											"value": "715018A6"
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "tag",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 279,
											"end": 3429,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 551,
											"end": 650,
											"name": "tag",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 551,
											"end": 650,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 551,
											"end": 650,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "11"
										},
										{
											"begin": 551,
											"end": 650,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "12"
										},
										{
											"begin": 551,
											"end": 650,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 551,
											"end": 650,
											"name": "tag",
											"source": 5,
											"value": "11"
										},
										{
											"begin": 551,
											"end": 650,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 551,
											"end": 650,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 650,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 551,
											"end": 650,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "13"
										},
										{
											"begin": 551,
											"end": 650,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 551,
											"end": 650,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 551,
											"end": 650,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 551,
											"end": 650,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "14"
										},
										{
											"begin": 551,
											"end": 650,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 551,
											"end": 650,
											"name": "tag",
											"source": 5,
											"value": "13"
										},
										{
											"begin": 551,
											"end": 650,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 551,
											"end": 650,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 650,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 551,
											"end": 650,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 551,
											"end": 650,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 551,
											"end": 650,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 551,
											"end": 650,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 551,
											"end": 650,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 435,
											"end": 545,
											"name": "tag",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 435,
											"end": 545,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 435,
											"end": 545,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "15"
										},
										{
											"begin": 435,
											"end": 545,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 435,
											"end": 545,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 435,
											"end": 545,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 435,
											"end": 545,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 435,
											"end": 545,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 435,
											"end": 545,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 435,
											"end": 545,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 435,
											"end": 545,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "16"
										},
										{
											"begin": 435,
											"end": 545,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 435,
											"end": 545,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 435,
											"end": 545,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "17"
										},
										{
											"begin": 435,
											"end": 545,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 435,
											"end": 545,
											"name": "tag",
											"source": 5,
											"value": "16"
										},
										{
											"begin": 435,
											"end": 545,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 435,
											"end": 545,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "18"
										},
										{
											"begin": 435,
											"end": 545,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 435,
											"end": 545,
											"name": "tag",
											"source": 5,
											"value": "15"
										},
										{
											"begin": 435,
											"end": 545,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 435,
											"end": 545,
											"name": "STOP",
											"source": 5
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "tag",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "25"
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "26"
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "27"
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "tag",
											"source": 5,
											"value": "26"
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "28"
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "tag",
											"source": 5,
											"value": "25"
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "29"
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "30"
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "tag",
											"source": 5,
											"value": "29"
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 1347,
											"end": 3253,
											"name": "tag",
											"source": 5,
											"value": "9"
										},
										{
											"begin": 1347,
											"end": 3253,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1347,
											"end": 3253,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "35"
										},
										{
											"begin": 1347,
											"end": 3253,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1347,
											"end": 3253,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1347,
											"end": 3253,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 1347,
											"end": 3253,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1347,
											"end": 3253,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1347,
											"end": 3253,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1347,
											"end": 3253,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1347,
											"end": 3253,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "36"
										},
										{
											"begin": 1347,
											"end": 3253,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1347,
											"end": 3253,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1347,
											"end": 3253,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "37"
										},
										{
											"begin": 1347,
											"end": 3253,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1347,
											"end": 3253,
											"name": "tag",
											"source": 5,
											"value": "36"
										},
										{
											"begin": 1347,
											"end": 3253,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1347,
											"end": 3253,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "38"
										},
										{
											"begin": 1347,
											"end": 3253,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1347,
											"end": 3253,
											"name": "tag",
											"source": 5,
											"value": "35"
										},
										{
											"begin": 1347,
											"end": 3253,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1347,
											"end": 3253,
											"name": "STOP",
											"source": 5
										},
										{
											"begin": 551,
											"end": 650,
											"name": "tag",
											"source": 5,
											"value": "12"
										},
										{
											"begin": 551,
											"end": 650,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 595,
											"end": 602,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 604,
											"end": 611,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 630,
											"end": 635,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 630,
											"end": 635,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 630,
											"end": 635,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 630,
											"end": 635,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 630,
											"end": 635,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 630,
											"end": 635,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 630,
											"end": 635,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 630,
											"end": 635,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 630,
											"end": 635,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 630,
											"end": 635,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 630,
											"end": 635,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 637,
											"end": 642,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 637,
											"end": 642,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 637,
											"end": 642,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 637,
											"end": 642,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 637,
											"end": 642,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 637,
											"end": 642,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 637,
											"end": 642,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 637,
											"end": 642,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 637,
											"end": 642,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 637,
											"end": 642,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 637,
											"end": 642,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 622,
											"end": 643,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 622,
											"end": 643,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 622,
											"end": 643,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 622,
											"end": 643,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 551,
											"end": 650,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 551,
											"end": 650,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 551,
											"end": 650,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 435,
											"end": 545,
											"name": "tag",
											"source": 5,
											"value": "18"
										},
										{
											"begin": 435,
											"end": 545,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 516,
											"end": 518,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 508,
											"end": 513,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 508,
											"end": 513,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 508,
											"end": 518,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 508,
											"end": 518,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 508,
											"end": 518,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 508,
											"end": 518,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 508,
											"end": 518,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 508,
											"end": 518,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 508,
											"end": 518,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 508,
											"end": 518,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 508,
											"end": 518,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 508,
											"end": 518,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 508,
											"end": 518,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 508,
											"end": 518,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 508,
											"end": 518,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 508,
											"end": 518,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 508,
											"end": 518,
											"name": "OR",
											"source": 5
										},
										{
											"begin": 508,
											"end": 518,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 508,
											"end": 518,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 508,
											"end": 518,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 536,
											"end": 538,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 528,
											"end": 533,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 528,
											"end": 533,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 528,
											"end": 538,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 528,
											"end": 538,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 528,
											"end": 538,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 528,
											"end": 538,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 528,
											"end": 538,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 528,
											"end": 538,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 528,
											"end": 538,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 528,
											"end": 538,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 528,
											"end": 538,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 528,
											"end": 538,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 528,
											"end": 538,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 528,
											"end": 538,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 528,
											"end": 538,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 528,
											"end": 538,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 528,
											"end": 538,
											"name": "OR",
											"source": 5
										},
										{
											"begin": 528,
											"end": 538,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 528,
											"end": 538,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 528,
											"end": 538,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 435,
											"end": 545,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 435,
											"end": 545,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 435,
											"end": 545,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 1922,
											"end": 1923,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1895,
											"end": 1913,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "tag",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1247,
											"end": 1254,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1266,
											"end": 1279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1266,
											"end": 1279,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "tag",
											"source": 5,
											"value": "28"
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 742,
											"end": 749,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 751,
											"end": 758,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 837,
											"end": 842,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 837,
											"end": 842,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 837,
											"end": 842,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 837,
											"end": 842,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 837,
											"end": 842,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 837,
											"end": 842,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 837,
											"end": 842,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 837,
											"end": 842,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 837,
											"end": 842,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 837,
											"end": 842,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 837,
											"end": 842,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 830,
											"end": 856,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 830,
											"end": 856,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 830,
											"end": 856,
											"name": "PUSH",
											"source": 5,
											"value": "23B872DD"
										},
										{
											"begin": 857,
											"end": 867,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 877,
											"end": 881,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 884,
											"end": 892,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 830,
											"end": 893,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFF"
										},
										{
											"begin": 830,
											"end": 893,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 830,
											"end": 893,
											"name": "SHL",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 830,
											"end": 893,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "53"
										},
										{
											"begin": 830,
											"end": 893,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "54"
										},
										{
											"begin": 830,
											"end": 893,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 830,
											"end": 893,
											"name": "tag",
											"source": 5,
											"value": "53"
										},
										{
											"begin": 830,
											"end": 893,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 830,
											"end": 893,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 830,
											"end": 893,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 830,
											"end": 893,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "EXTCODESIZE",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "55"
										},
										{
											"begin": 830,
											"end": 893,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 830,
											"end": 893,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "tag",
											"source": 5,
											"value": "55"
										},
										{
											"begin": 830,
											"end": 893,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "GAS",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "CALL",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "57"
										},
										{
											"begin": 830,
											"end": 893,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 830,
											"end": 893,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "RETURNDATACOPY",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 830,
											"end": 893,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "tag",
											"source": 5,
											"value": "57"
										},
										{
											"begin": 830,
											"end": 893,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 830,
											"end": 893,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 830,
											"end": 893,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 830,
											"end": 893,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 830,
											"end": 893,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "58"
										},
										{
											"begin": 830,
											"end": 893,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "59"
										},
										{
											"begin": 830,
											"end": 893,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 830,
											"end": 893,
											"name": "tag",
											"source": 5,
											"value": "58"
										},
										{
											"begin": 830,
											"end": 893,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 830,
											"end": 893,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 970,
											"end": 975,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 963,
											"end": 989,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 963,
											"end": 989,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 963,
											"end": 989,
											"name": "PUSH",
											"source": 5,
											"value": "23B872DD"
										},
										{
											"begin": 990,
											"end": 1000,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1010,
											"end": 1014,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 1017,
											"end": 1025,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFF"
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "SHL",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "54"
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "tag",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "EXTCODESIZE",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "61"
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "tag",
											"source": 5,
											"value": "61"
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "GAS",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "CALL",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "63"
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "RETURNDATACOPY",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "tag",
											"source": 5,
											"value": "63"
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "59"
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "tag",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 963,
											"end": 1026,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1038,
											"end": 1051,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1053,
											"end": 1065,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1069,
											"end": 1103,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "65"
										},
										{
											"begin": 1085,
											"end": 1092,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1085,
											"end": 1092,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1094,
											"end": 1102,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 1069,
											"end": 1084,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "66"
										},
										{
											"begin": 1069,
											"end": 1103,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1069,
											"end": 1103,
											"name": "tag",
											"source": 5,
											"value": "65"
										},
										{
											"begin": 1069,
											"end": 1103,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1037,
											"end": 1103,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1037,
											"end": 1103,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1037,
											"end": 1103,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1037,
											"end": 1103,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1114,
											"end": 1127,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1129,
											"end": 1141,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1145,
											"end": 1179,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "67"
										},
										{
											"begin": 1161,
											"end": 1168,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 1161,
											"end": 1168,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1170,
											"end": 1178,
											"name": "DUP9",
											"source": 5
										},
										{
											"begin": 1145,
											"end": 1160,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "66"
										},
										{
											"begin": 1145,
											"end": 1179,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1145,
											"end": 1179,
											"name": "tag",
											"source": 5,
											"value": "67"
										},
										{
											"begin": 1145,
											"end": 1179,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1113,
											"end": 1179,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1113,
											"end": 1179,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1113,
											"end": 1179,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1113,
											"end": 1179,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1197,
											"end": 1205,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1197,
											"end": 1217,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1197,
											"end": 1217,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1197,
											"end": 1217,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "68"
										},
										{
											"begin": 1197,
											"end": 1217,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1197,
											"end": 1217,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1209,
											"end": 1217,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1197,
											"end": 1217,
											"name": "tag",
											"source": 5,
											"value": "68"
										},
										{
											"begin": 1197,
											"end": 1217,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1189,
											"end": 1251,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "69"
										},
										{
											"begin": 1189,
											"end": 1251,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1189,
											"end": 1251,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1189,
											"end": 1251,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1189,
											"end": 1251,
											"name": "PUSH",
											"source": 5,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1189,
											"end": 1251,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1189,
											"end": 1251,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1189,
											"end": 1251,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1189,
											"end": 1251,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1189,
											"end": 1251,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "70"
										},
										{
											"begin": 1189,
											"end": 1251,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1189,
											"end": 1251,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "71"
										},
										{
											"begin": 1189,
											"end": 1251,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1189,
											"end": 1251,
											"name": "tag",
											"source": 5,
											"value": "70"
										},
										{
											"begin": 1189,
											"end": 1251,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1189,
											"end": 1251,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1189,
											"end": 1251,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1189,
											"end": 1251,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1189,
											"end": 1251,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1189,
											"end": 1251,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1189,
											"end": 1251,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1189,
											"end": 1251,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1189,
											"end": 1251,
											"name": "tag",
											"source": 5,
											"value": "69"
										},
										{
											"begin": 1189,
											"end": 1251,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1271,
											"end": 1275,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1261,
											"end": 1268,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1261,
											"end": 1275,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1261,
											"end": 1275,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1261,
											"end": 1275,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 1261,
											"end": 1275,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1295,
											"end": 1299,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1285,
											"end": 1292,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 1285,
											"end": 1299,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1285,
											"end": 1299,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1285,
											"end": 1299,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 1285,
											"end": 1299,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1317,
											"end": 1324,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1317,
											"end": 1324,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1326,
											"end": 1333,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 1326,
											"end": 1333,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1309,
											"end": 1334,
											"name": "SWAP6",
											"source": 5
										},
										{
											"begin": 1309,
											"end": 1334,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1309,
											"end": 1334,
											"name": "SWAP6",
											"source": 5
										},
										{
											"begin": 1309,
											"end": 1334,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1309,
											"end": 1334,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1309,
											"end": 1334,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1309,
											"end": 1334,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1309,
											"end": 1334,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 656,
											"end": 1341,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2189,
											"end": 2190,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2169,
											"end": 2177,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "tag",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "tag",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 2263,
											"end": 2271,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2244,
											"end": 2262,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "tag",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1347,
											"end": 3253,
											"name": "tag",
											"source": 5,
											"value": "38"
										},
										{
											"begin": 1347,
											"end": 3253,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1481,
											"end": 1482,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1461,
											"end": 1483,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1461,
											"end": 1483,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1461,
											"end": 1469,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 1461,
											"end": 1483,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1461,
											"end": 1483,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1461,
											"end": 1483,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1461,
											"end": 1483,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1453,
											"end": 1519,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 1453,
											"end": 1519,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1453,
											"end": 1519,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1453,
											"end": 1519,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1453,
											"end": 1519,
											"name": "PUSH",
											"source": 5,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1453,
											"end": 1519,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1453,
											"end": 1519,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1453,
											"end": 1519,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1453,
											"end": 1519,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1453,
											"end": 1519,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "81"
										},
										{
											"begin": 1453,
											"end": 1519,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1453,
											"end": 1519,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "82"
										},
										{
											"begin": 1453,
											"end": 1519,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1453,
											"end": 1519,
											"name": "tag",
											"source": 5,
											"value": "81"
										},
										{
											"begin": 1453,
											"end": 1519,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1453,
											"end": 1519,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1453,
											"end": 1519,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1453,
											"end": 1519,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1453,
											"end": 1519,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1453,
											"end": 1519,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1453,
											"end": 1519,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1453,
											"end": 1519,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1453,
											"end": 1519,
											"name": "tag",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 1453,
											"end": 1519,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1552,
											"end": 1553,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1537,
											"end": 1554,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1537,
											"end": 1554,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1537,
											"end": 1540,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1537,
											"end": 1554,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1537,
											"end": 1554,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1537,
											"end": 1554,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1537,
											"end": 1554,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1529,
											"end": 1586,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "83"
										},
										{
											"begin": 1529,
											"end": 1586,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1529,
											"end": 1586,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1529,
											"end": 1586,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1529,
											"end": 1586,
											"name": "PUSH",
											"source": 5,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1529,
											"end": 1586,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1529,
											"end": 1586,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1529,
											"end": 1586,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1529,
											"end": 1586,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1529,
											"end": 1586,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "84"
										},
										{
											"begin": 1529,
											"end": 1586,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1529,
											"end": 1586,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "85"
										},
										{
											"begin": 1529,
											"end": 1586,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1529,
											"end": 1586,
											"name": "tag",
											"source": 5,
											"value": "84"
										},
										{
											"begin": 1529,
											"end": 1586,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1529,
											"end": 1586,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1529,
											"end": 1586,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1529,
											"end": 1586,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1529,
											"end": 1586,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1529,
											"end": 1586,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1529,
											"end": 1586,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1529,
											"end": 1586,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1529,
											"end": 1586,
											"name": "tag",
											"source": 5,
											"value": "83"
										},
										{
											"begin": 1529,
											"end": 1586,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1616,
											"end": 1621,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 1616,
											"end": 1621,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1616,
											"end": 1621,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1616,
											"end": 1621,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1616,
											"end": 1621,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1616,
											"end": 1621,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 1616,
											"end": 1621,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 1616,
											"end": 1621,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1616,
											"end": 1621,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 1616,
											"end": 1621,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1616,
											"end": 1621,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1604,
											"end": 1621,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1604,
											"end": 1621,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1604,
											"end": 1612,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 1604,
											"end": 1621,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1604,
											"end": 1621,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1604,
											"end": 1621,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1604,
											"end": 1642,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1604,
											"end": 1642,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "86"
										},
										{
											"begin": 1604,
											"end": 1642,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1604,
											"end": 1642,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1637,
											"end": 1642,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1637,
											"end": 1642,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1637,
											"end": 1642,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1637,
											"end": 1642,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1637,
											"end": 1642,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1637,
											"end": 1642,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 1637,
											"end": 1642,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 1637,
											"end": 1642,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1637,
											"end": 1642,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 1637,
											"end": 1642,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1637,
											"end": 1642,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1625,
											"end": 1642,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1625,
											"end": 1642,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1625,
											"end": 1633,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 1625,
											"end": 1642,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1625,
											"end": 1642,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1625,
											"end": 1642,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1604,
											"end": 1642,
											"name": "tag",
											"source": 5,
											"value": "86"
										},
										{
											"begin": 1604,
											"end": 1642,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1596,
											"end": 1685,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "87"
										},
										{
											"begin": 1596,
											"end": 1685,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1596,
											"end": 1685,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1596,
											"end": 1685,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1596,
											"end": 1685,
											"name": "PUSH",
											"source": 5,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1596,
											"end": 1685,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1596,
											"end": 1685,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1596,
											"end": 1685,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1596,
											"end": 1685,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1596,
											"end": 1685,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "88"
										},
										{
											"begin": 1596,
											"end": 1685,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1596,
											"end": 1685,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "89"
										},
										{
											"begin": 1596,
											"end": 1685,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1596,
											"end": 1685,
											"name": "tag",
											"source": 5,
											"value": "88"
										},
										{
											"begin": 1596,
											"end": 1685,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1596,
											"end": 1685,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1596,
											"end": 1685,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1596,
											"end": 1685,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1596,
											"end": 1685,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1596,
											"end": 1685,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1596,
											"end": 1685,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1596,
											"end": 1685,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1596,
											"end": 1685,
											"name": "tag",
											"source": 5,
											"value": "87"
										},
										{
											"begin": 1596,
											"end": 1685,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1739,
											"end": 1744,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 1739,
											"end": 1744,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1739,
											"end": 1744,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1739,
											"end": 1744,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1739,
											"end": 1744,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1739,
											"end": 1744,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 1739,
											"end": 1744,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 1739,
											"end": 1744,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1739,
											"end": 1744,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 1739,
											"end": 1744,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1739,
											"end": 1744,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1727,
											"end": 1744,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1727,
											"end": 1744,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1727,
											"end": 1735,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 1727,
											"end": 1744,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1727,
											"end": 1744,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1727,
											"end": 1744,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1723,
											"end": 3247,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1723,
											"end": 3247,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "90"
										},
										{
											"begin": 1723,
											"end": 3247,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1832,
											"end": 1837,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 1832,
											"end": 1837,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1832,
											"end": 1837,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1832,
											"end": 1837,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1832,
											"end": 1837,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1832,
											"end": 1837,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 1832,
											"end": 1837,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 1832,
											"end": 1837,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1832,
											"end": 1837,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 1832,
											"end": 1837,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1832,
											"end": 1837,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1851,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1825,
											"end": 1851,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1851,
											"name": "PUSH",
											"source": 5,
											"value": "23B872DD"
										},
										{
											"begin": 1852,
											"end": 1862,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1872,
											"end": 1876,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 1879,
											"end": 1888,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "SHL",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "91"
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "54"
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "tag",
											"source": 5,
											"value": "91"
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "EXTCODESIZE",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "92"
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "tag",
											"source": 5,
											"value": "92"
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "GAS",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "CALL",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "94"
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "RETURNDATACOPY",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "tag",
											"source": 5,
											"value": "94"
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "95"
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "59"
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "tag",
											"source": 5,
											"value": "95"
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1825,
											"end": 1889,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1905,
											"end": 1917,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1919,
											"end": 1927,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1931,
											"end": 1966,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "96"
										},
										{
											"begin": 1947,
											"end": 1954,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1947,
											"end": 1954,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1956,
											"end": 1965,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 1931,
											"end": 1946,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "66"
										},
										{
											"begin": 1931,
											"end": 1966,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1931,
											"end": 1966,
											"name": "tag",
											"source": 5,
											"value": "96"
										},
										{
											"begin": 1931,
											"end": 1966,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1904,
											"end": 1966,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1904,
											"end": 1966,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1904,
											"end": 1966,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1904,
											"end": 1966,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1988,
											"end": 1995,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1980,
											"end": 2045,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "97"
										},
										{
											"begin": 1980,
											"end": 2045,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1980,
											"end": 2045,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1980,
											"end": 2045,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1980,
											"end": 2045,
											"name": "PUSH",
											"source": 5,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1980,
											"end": 2045,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1980,
											"end": 2045,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1980,
											"end": 2045,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1980,
											"end": 2045,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1980,
											"end": 2045,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "98"
										},
										{
											"begin": 1980,
											"end": 2045,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1980,
											"end": 2045,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "99"
										},
										{
											"begin": 1980,
											"end": 2045,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1980,
											"end": 2045,
											"name": "tag",
											"source": 5,
											"value": "98"
										},
										{
											"begin": 1980,
											"end": 2045,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1980,
											"end": 2045,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1980,
											"end": 2045,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1980,
											"end": 2045,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1980,
											"end": 2045,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1980,
											"end": 2045,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1980,
											"end": 2045,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1980,
											"end": 2045,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1980,
											"end": 2045,
											"name": "tag",
											"source": 5,
											"value": "97"
										},
										{
											"begin": 1980,
											"end": 2045,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2069,
											"end": 2072,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2059,
											"end": 2066,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 2059,
											"end": 2072,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2059,
											"end": 2072,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2059,
											"end": 2072,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 2059,
											"end": 2072,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2087,
											"end": 2105,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2108,
											"end": 2148,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 2120,
											"end": 2129,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 2131,
											"end": 2138,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 2131,
											"end": 2138,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2140,
											"end": 2147,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 2140,
											"end": 2147,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2108,
											"end": 2119,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "101"
										},
										{
											"begin": 2108,
											"end": 2148,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 2108,
											"end": 2148,
											"name": "tag",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 2108,
											"end": 2148,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2087,
											"end": 2148,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2087,
											"end": 2148,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2183,
											"end": 2196,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 2170,
											"end": 2180,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2170,
											"end": 2196,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 2162,
											"end": 2234,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "102"
										},
										{
											"begin": 2162,
											"end": 2234,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2162,
											"end": 2234,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2162,
											"end": 2234,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2162,
											"end": 2234,
											"name": "PUSH",
											"source": 5,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2162,
											"end": 2234,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2162,
											"end": 2234,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2162,
											"end": 2234,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2162,
											"end": 2234,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2162,
											"end": 2234,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "103"
										},
										{
											"begin": 2162,
											"end": 2234,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2162,
											"end": 2234,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "104"
										},
										{
											"begin": 2162,
											"end": 2234,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 2162,
											"end": 2234,
											"name": "tag",
											"source": 5,
											"value": "103"
										},
										{
											"begin": 2162,
											"end": 2234,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2162,
											"end": 2234,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2162,
											"end": 2234,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2162,
											"end": 2234,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2162,
											"end": 2234,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2162,
											"end": 2234,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2162,
											"end": 2234,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2162,
											"end": 2234,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 2162,
											"end": 2234,
											"name": "tag",
											"source": 5,
											"value": "102"
										},
										{
											"begin": 2162,
											"end": 2234,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2269,
											"end": 2276,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 2269,
											"end": 2276,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2256,
											"end": 2266,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2256,
											"end": 2276,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 2248,
											"end": 2307,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "105"
										},
										{
											"begin": 2248,
											"end": 2307,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2248,
											"end": 2307,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2248,
											"end": 2307,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2248,
											"end": 2307,
											"name": "PUSH",
											"source": 5,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2248,
											"end": 2307,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2248,
											"end": 2307,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2248,
											"end": 2307,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2248,
											"end": 2307,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2248,
											"end": 2307,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "106"
										},
										{
											"begin": 2248,
											"end": 2307,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2248,
											"end": 2307,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "107"
										},
										{
											"begin": 2248,
											"end": 2307,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 2248,
											"end": 2307,
											"name": "tag",
											"source": 5,
											"value": "106"
										},
										{
											"begin": 2248,
											"end": 2307,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2248,
											"end": 2307,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2248,
											"end": 2307,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2248,
											"end": 2307,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2248,
											"end": 2307,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2248,
											"end": 2307,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2248,
											"end": 2307,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2248,
											"end": 2307,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 2248,
											"end": 2307,
											"name": "tag",
											"source": 5,
											"value": "105"
										},
										{
											"begin": 2248,
											"end": 2307,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2332,
											"end": 2342,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2321,
											"end": 2328,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 2321,
											"end": 2328,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2321,
											"end": 2342,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2321,
											"end": 2342,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2321,
											"end": 2342,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2321,
											"end": 2342,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "108"
										},
										{
											"begin": 2321,
											"end": 2342,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2321,
											"end": 2342,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2321,
											"end": 2342,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "109"
										},
										{
											"begin": 2321,
											"end": 2342,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 2321,
											"end": 2342,
											"name": "tag",
											"source": 5,
											"value": "108"
										},
										{
											"begin": 2321,
											"end": 2342,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2321,
											"end": 2342,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 2321,
											"end": 2342,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2321,
											"end": 2342,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2321,
											"end": 2342,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2321,
											"end": 2342,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2321,
											"end": 2342,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 2321,
											"end": 2342,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2426,
											"end": 2431,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2426,
											"end": 2431,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2426,
											"end": 2431,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2426,
											"end": 2431,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2426,
											"end": 2431,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2426,
											"end": 2431,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 2426,
											"end": 2431,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 2426,
											"end": 2431,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2426,
											"end": 2431,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 2426,
											"end": 2431,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2426,
											"end": 2431,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2441,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2419,
											"end": 2441,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2441,
											"name": "PUSH",
											"source": 5,
											"value": "A9059CBB"
										},
										{
											"begin": 2442,
											"end": 2445,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 2447,
											"end": 2457,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "SHL",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "110"
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "111"
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "tag",
											"source": 5,
											"value": "110"
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "EXTCODESIZE",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "112"
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "tag",
											"source": 5,
											"value": "112"
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "GAS",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "CALL",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "114"
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "RETURNDATACOPY",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "tag",
											"source": 5,
											"value": "114"
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "115"
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "59"
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "tag",
											"source": 5,
											"value": "115"
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2419,
											"end": 2458,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1723,
											"end": 3247,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1723,
											"end": 3247,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1723,
											"end": 3247,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1723,
											"end": 3247,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "116"
										},
										{
											"begin": 1723,
											"end": 3247,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1723,
											"end": 3247,
											"name": "tag",
											"source": 5,
											"value": "90"
										},
										{
											"begin": 1723,
											"end": 3247,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2517,
											"end": 2522,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2517,
											"end": 2522,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2517,
											"end": 2522,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2517,
											"end": 2522,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2517,
											"end": 2522,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2517,
											"end": 2522,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 2517,
											"end": 2522,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 2517,
											"end": 2522,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2517,
											"end": 2522,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 2517,
											"end": 2522,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2517,
											"end": 2522,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2505,
											"end": 2522,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2505,
											"end": 2522,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2505,
											"end": 2513,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 2505,
											"end": 2522,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2505,
											"end": 2522,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2505,
											"end": 2522,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 2501,
											"end": 3247,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2501,
											"end": 3247,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "117"
										},
										{
											"begin": 2501,
											"end": 3247,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2610,
											"end": 2615,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 2610,
											"end": 2615,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2610,
											"end": 2615,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2610,
											"end": 2615,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2610,
											"end": 2615,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2610,
											"end": 2615,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 2610,
											"end": 2615,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 2610,
											"end": 2615,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2610,
											"end": 2615,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 2610,
											"end": 2615,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2610,
											"end": 2615,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2629,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2603,
											"end": 2629,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2629,
											"name": "PUSH",
											"source": 5,
											"value": "23B872DD"
										},
										{
											"begin": 2630,
											"end": 2640,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 2650,
											"end": 2654,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 2657,
											"end": 2666,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "SHL",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "118"
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "54"
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "tag",
											"source": 5,
											"value": "118"
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "EXTCODESIZE",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "119"
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "tag",
											"source": 5,
											"value": "119"
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "GAS",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "CALL",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "121"
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "RETURNDATACOPY",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "tag",
											"source": 5,
											"value": "121"
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "122"
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "59"
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "tag",
											"source": 5,
											"value": "122"
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2667,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2683,
											"end": 2695,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2697,
											"end": 2705,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2709,
											"end": 2744,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "123"
										},
										{
											"begin": 2725,
											"end": 2732,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 2725,
											"end": 2732,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2734,
											"end": 2743,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 2709,
											"end": 2724,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "66"
										},
										{
											"begin": 2709,
											"end": 2744,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 2709,
											"end": 2744,
											"name": "tag",
											"source": 5,
											"value": "123"
										},
										{
											"begin": 2709,
											"end": 2744,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2682,
											"end": 2744,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2682,
											"end": 2744,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2682,
											"end": 2744,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2682,
											"end": 2744,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2766,
											"end": 2773,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2758,
											"end": 2823,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "124"
										},
										{
											"begin": 2758,
											"end": 2823,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2758,
											"end": 2823,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2758,
											"end": 2823,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2758,
											"end": 2823,
											"name": "PUSH",
											"source": 5,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2758,
											"end": 2823,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2758,
											"end": 2823,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2758,
											"end": 2823,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2758,
											"end": 2823,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2758,
											"end": 2823,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "125"
										},
										{
											"begin": 2758,
											"end": 2823,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2758,
											"end": 2823,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "99"
										},
										{
											"begin": 2758,
											"end": 2823,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 2758,
											"end": 2823,
											"name": "tag",
											"source": 5,
											"value": "125"
										},
										{
											"begin": 2758,
											"end": 2823,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2758,
											"end": 2823,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2758,
											"end": 2823,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2758,
											"end": 2823,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2758,
											"end": 2823,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2758,
											"end": 2823,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2758,
											"end": 2823,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2758,
											"end": 2823,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 2758,
											"end": 2823,
											"name": "tag",
											"source": 5,
											"value": "124"
										},
										{
											"begin": 2758,
											"end": 2823,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2847,
											"end": 2850,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2837,
											"end": 2844,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 2837,
											"end": 2850,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2837,
											"end": 2850,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2837,
											"end": 2850,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 2837,
											"end": 2850,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2865,
											"end": 2883,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2886,
											"end": 2926,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "126"
										},
										{
											"begin": 2898,
											"end": 2907,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 2909,
											"end": 2916,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 2909,
											"end": 2916,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2918,
											"end": 2925,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 2918,
											"end": 2925,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2886,
											"end": 2897,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "101"
										},
										{
											"begin": 2886,
											"end": 2926,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 2886,
											"end": 2926,
											"name": "tag",
											"source": 5,
											"value": "126"
										},
										{
											"begin": 2886,
											"end": 2926,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2865,
											"end": 2926,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2865,
											"end": 2926,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2961,
											"end": 2974,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 2948,
											"end": 2958,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2948,
											"end": 2974,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 2940,
											"end": 3012,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "127"
										},
										{
											"begin": 2940,
											"end": 3012,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2940,
											"end": 3012,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2940,
											"end": 3012,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2940,
											"end": 3012,
											"name": "PUSH",
											"source": 5,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2940,
											"end": 3012,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2940,
											"end": 3012,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2940,
											"end": 3012,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2940,
											"end": 3012,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2940,
											"end": 3012,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "128"
										},
										{
											"begin": 2940,
											"end": 3012,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2940,
											"end": 3012,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "104"
										},
										{
											"begin": 2940,
											"end": 3012,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 2940,
											"end": 3012,
											"name": "tag",
											"source": 5,
											"value": "128"
										},
										{
											"begin": 2940,
											"end": 3012,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2940,
											"end": 3012,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2940,
											"end": 3012,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2940,
											"end": 3012,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2940,
											"end": 3012,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2940,
											"end": 3012,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2940,
											"end": 3012,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2940,
											"end": 3012,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 2940,
											"end": 3012,
											"name": "tag",
											"source": 5,
											"value": "127"
										},
										{
											"begin": 2940,
											"end": 3012,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3047,
											"end": 3054,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 3047,
											"end": 3054,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 3034,
											"end": 3044,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3034,
											"end": 3054,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 3026,
											"end": 3085,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "129"
										},
										{
											"begin": 3026,
											"end": 3085,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 3026,
											"end": 3085,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3026,
											"end": 3085,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3026,
											"end": 3085,
											"name": "PUSH",
											"source": 5,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3026,
											"end": 3085,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3026,
											"end": 3085,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3026,
											"end": 3085,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 3026,
											"end": 3085,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3026,
											"end": 3085,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "130"
										},
										{
											"begin": 3026,
											"end": 3085,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3026,
											"end": 3085,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "107"
										},
										{
											"begin": 3026,
											"end": 3085,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 3026,
											"end": 3085,
											"name": "tag",
											"source": 5,
											"value": "130"
										},
										{
											"begin": 3026,
											"end": 3085,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3026,
											"end": 3085,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3026,
											"end": 3085,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3026,
											"end": 3085,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3026,
											"end": 3085,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3026,
											"end": 3085,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 3026,
											"end": 3085,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3026,
											"end": 3085,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 3026,
											"end": 3085,
											"name": "tag",
											"source": 5,
											"value": "129"
										},
										{
											"begin": 3026,
											"end": 3085,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3110,
											"end": 3120,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3099,
											"end": 3106,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 3099,
											"end": 3106,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3099,
											"end": 3120,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3099,
											"end": 3120,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3099,
											"end": 3120,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 3099,
											"end": 3120,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "131"
										},
										{
											"begin": 3099,
											"end": 3120,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3099,
											"end": 3120,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3099,
											"end": 3120,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "109"
										},
										{
											"begin": 3099,
											"end": 3120,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 3099,
											"end": 3120,
											"name": "tag",
											"source": 5,
											"value": "131"
										},
										{
											"begin": 3099,
											"end": 3120,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3099,
											"end": 3120,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 3099,
											"end": 3120,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3099,
											"end": 3120,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3099,
											"end": 3120,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3099,
											"end": 3120,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3099,
											"end": 3120,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 3099,
											"end": 3120,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3204,
											"end": 3209,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 3204,
											"end": 3209,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3204,
											"end": 3209,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3204,
											"end": 3209,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 3204,
											"end": 3209,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3204,
											"end": 3209,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 3204,
											"end": 3209,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 3204,
											"end": 3209,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3204,
											"end": 3209,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 3204,
											"end": 3209,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3204,
											"end": 3209,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3219,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3197,
											"end": 3219,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3219,
											"name": "PUSH",
											"source": 5,
											"value": "A9059CBB"
										},
										{
											"begin": 3220,
											"end": 3223,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 3225,
											"end": 3235,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "SHL",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "132"
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "111"
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "tag",
											"source": 5,
											"value": "132"
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "EXTCODESIZE",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "133"
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "tag",
											"source": 5,
											"value": "133"
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "GAS",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "CALL",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "135"
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "RETURNDATACOPY",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "tag",
											"source": 5,
											"value": "135"
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "136"
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "59"
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "tag",
											"source": 5,
											"value": "136"
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3197,
											"end": 3236,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2501,
											"end": 3247,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2501,
											"end": 3247,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2501,
											"end": 3247,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2501,
											"end": 3247,
											"name": "tag",
											"source": 5,
											"value": "117"
										},
										{
											"begin": 2501,
											"end": 3247,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1723,
											"end": 3247,
											"name": "tag",
											"source": 5,
											"value": "116"
										},
										{
											"begin": 1723,
											"end": 3247,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1347,
											"end": 3253,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1347,
											"end": 3253,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1347,
											"end": 3253,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1347,
											"end": 3253,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1347,
											"end": 3253,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "tag",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1433,
											"end": 1445,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "138"
										},
										{
											"begin": 1433,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "139"
										},
										{
											"begin": 1433,
											"end": 1445,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1433,
											"end": 1445,
											"name": "tag",
											"source": 0,
											"value": "138"
										},
										{
											"begin": 1433,
											"end": 1445,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1422,
											"end": 1429,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 1422,
											"end": 1427,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 1422,
											"end": 1429,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1422,
											"end": 1429,
											"name": "tag",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 1422,
											"end": 1429,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "143"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "tag",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "tag",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "tag",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2522,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2531,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2547,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2541,
											"end": 2547,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2604,
											"end": 2612,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2594,
											"end": 2602,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 641,
											"end": 857,
											"name": "tag",
											"source": 4,
											"value": "66"
										},
										{
											"begin": 641,
											"end": 857,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 702,
											"end": 706,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 708,
											"end": 715,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 751,
											"end": 760,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 767,
											"end": 768,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 763,
											"end": 764,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 763,
											"end": 768,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 751,
											"end": 768,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 751,
											"end": 768,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 790,
											"end": 791,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 786,
											"end": 787,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 786,
											"end": 791,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 782,
											"end": 810,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 782,
											"end": 810,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "146"
										},
										{
											"begin": 782,
											"end": 810,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 801,
											"end": 806,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 808,
											"end": 809,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 793,
											"end": 810,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 793,
											"end": 810,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 793,
											"end": 810,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 793,
											"end": 810,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 793,
											"end": 810,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 793,
											"end": 810,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "145"
										},
										{
											"begin": 793,
											"end": 810,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 782,
											"end": 810,
											"name": "tag",
											"source": 4,
											"value": "146"
										},
										{
											"begin": 782,
											"end": 810,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 832,
											"end": 836,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 838,
											"end": 839,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 824,
											"end": 840,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 824,
											"end": 840,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 824,
											"end": 840,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 824,
											"end": 840,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 824,
											"end": 840,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 641,
											"end": 857,
											"name": "tag",
											"source": 4,
											"value": "145"
										},
										{
											"begin": 641,
											"end": 857,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 641,
											"end": 857,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 641,
											"end": 857,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 641,
											"end": 857,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 641,
											"end": 857,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 641,
											"end": 857,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 641,
											"end": 857,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 1667,
											"end": 5592,
											"name": "tag",
											"source": 3,
											"value": "101"
										},
										{
											"begin": 1667,
											"end": 5592,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1779,
											"end": 1793,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2126,
											"end": 2139,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2198,
											"end": 2211,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2323,
											"end": 2324,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2319,
											"end": 2325,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 2316,
											"end": 2317,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 2313,
											"end": 2314,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 2306,
											"end": 2326,
											"name": "MULMOD",
											"source": 3
										},
										{
											"begin": 2359,
											"end": 2360,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 2356,
											"end": 2357,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 2352,
											"end": 2361,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 2343,
											"end": 2361,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2343,
											"end": 2361,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2414,
											"end": 2419,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2410,
											"end": 2412,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2407,
											"end": 2420,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 2399,
											"end": 2404,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2395,
											"end": 2397,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2391,
											"end": 2405,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2387,
											"end": 2421,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2378,
											"end": 2421,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2378,
											"end": 2421,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2278,
											"end": 2435,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2525,
											"end": 2526,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2516,
											"end": 2521,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2526,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 2512,
											"end": 2587,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2512,
											"end": 2587,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "148"
										},
										{
											"begin": 2512,
											"end": 2587,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2561,
											"end": 2572,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2553,
											"end": 2558,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2553,
											"end": 2572,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2553,
											"end": 2572,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "149"
										},
										{
											"begin": 2553,
											"end": 2572,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2553,
											"end": 2572,
											"name": "PUSH",
											"source": 3,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2553,
											"end": 2572,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2553,
											"end": 2572,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2553,
											"end": 2572,
											"name": "PUSH",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 2553,
											"end": 2572,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 2553,
											"end": 2572,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2553,
											"end": 2572,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 2553,
											"end": 2572,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2553,
											"end": 2572,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 2553,
											"end": 2572,
											"name": "tag",
											"source": 3,
											"value": "149"
										},
										{
											"begin": 2553,
											"end": 2572,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2553,
											"end": 2572,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 2546,
											"end": 2572,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2546,
											"end": 2572,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2546,
											"end": 2572,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2546,
											"end": 2572,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2546,
											"end": 2572,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "147"
										},
										{
											"begin": 2546,
											"end": 2572,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2512,
											"end": 2587,
											"name": "tag",
											"source": 3,
											"value": "148"
										},
										{
											"begin": 2512,
											"end": 2587,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2711,
											"end": 2716,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2697,
											"end": 2708,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 2697,
											"end": 2716,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 2689,
											"end": 2717,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "150"
										},
										{
											"begin": 2689,
											"end": 2717,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2689,
											"end": 2717,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2689,
											"end": 2717,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2689,
											"end": 2717,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 2689,
											"end": 2717,
											"name": "tag",
											"source": 3,
											"value": "150"
										},
										{
											"begin": 2689,
											"end": 2717,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2973,
											"end": 2990,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3108,
											"end": 3119,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 3105,
											"end": 3106,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 3102,
											"end": 3103,
											"name": "DUP9",
											"source": 3
										},
										{
											"begin": 3095,
											"end": 3120,
											"name": "MULMOD",
											"source": 3
										},
										{
											"begin": 3082,
											"end": 3120,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3082,
											"end": 3120,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3236,
											"end": 3241,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3225,
											"end": 3234,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3222,
											"end": 3242,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 3215,
											"end": 3220,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3211,
											"end": 3243,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3202,
											"end": 3243,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3202,
											"end": 3243,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3280,
											"end": 3289,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3273,
											"end": 3278,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 3269,
											"end": 3290,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3260,
											"end": 3290,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 3260,
											"end": 3290,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3611,
											"end": 3623,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3656,
											"end": 3657,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 3642,
											"end": 3653,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 3641,
											"end": 3653,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 3641,
											"end": 3657,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3626,
											"end": 3637,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 3626,
											"end": 3658,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3611,
											"end": 3658,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3611,
											"end": 3658,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3778,
											"end": 3782,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3765,
											"end": 3776,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 3761,
											"end": 3783,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 3746,
											"end": 3783,
											"name": "SWAP6",
											"source": 3
										},
										{
											"begin": 3746,
											"end": 3783,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3870,
											"end": 3874,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3863,
											"end": 3868,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 3859,
											"end": 3875,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 3850,
											"end": 3875,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 3850,
											"end": 3875,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4027,
											"end": 4028,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 4020,
											"end": 4024,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4013,
											"end": 4017,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4010,
											"end": 4011,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4006,
											"end": 4018,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 4002,
											"end": 4025,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 3998,
											"end": 4029,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3990,
											"end": 4029,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3990,
											"end": 4029,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4126,
											"end": 4130,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4118,
											"end": 4123,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 4118,
											"end": 4130,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 4109,
											"end": 4130,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 4109,
											"end": 4130,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 4109,
											"end": 4130,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 4109,
											"end": 4130,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4448,
											"end": 4463,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4486,
											"end": 4487,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 4471,
											"end": 4482,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 4467,
											"end": 4468,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 4467,
											"end": 4482,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 4466,
											"end": 4487,
											"name": "XOR",
											"source": 3
										},
										{
											"begin": 4448,
											"end": 4487,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4448,
											"end": 4487,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4733,
											"end": 4740,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4719,
											"end": 4730,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 4719,
											"end": 4740,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 4715,
											"end": 4716,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 4715,
											"end": 4740,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 4704,
											"end": 4740,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4704,
											"end": 4740,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 4704,
											"end": 4740,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4704,
											"end": 4740,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4802,
											"end": 4809,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4788,
											"end": 4799,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 4788,
											"end": 4809,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 4784,
											"end": 4785,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 4784,
											"end": 4809,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 4773,
											"end": 4809,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4773,
											"end": 4809,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 4773,
											"end": 4809,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4773,
											"end": 4809,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4872,
											"end": 4879,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4858,
											"end": 4869,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 4858,
											"end": 4879,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 4854,
											"end": 4855,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 4854,
											"end": 4879,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 4843,
											"end": 4879,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4843,
											"end": 4879,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 4843,
											"end": 4879,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4843,
											"end": 4879,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4942,
											"end": 4949,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4928,
											"end": 4939,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 4928,
											"end": 4949,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 4924,
											"end": 4925,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 4924,
											"end": 4949,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 4913,
											"end": 4949,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4913,
											"end": 4949,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 4913,
											"end": 4949,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4913,
											"end": 4949,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5012,
											"end": 5019,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4998,
											"end": 5009,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 4998,
											"end": 5019,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 4994,
											"end": 4995,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 4994,
											"end": 5019,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 4983,
											"end": 5019,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4983,
											"end": 5019,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 4983,
											"end": 5019,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4983,
											"end": 5019,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5083,
											"end": 5090,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5080,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5090,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 5065,
											"end": 5066,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 5065,
											"end": 5090,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 5054,
											"end": 5090,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5054,
											"end": 5090,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 5054,
											"end": 5090,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5054,
											"end": 5090,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5541,
											"end": 5548,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5533,
											"end": 5538,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5533,
											"end": 5548,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 5524,
											"end": 5548,
											"name": "SWAP6",
											"source": 3
										},
										{
											"begin": 5524,
											"end": 5548,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5562,
											"end": 5575,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5562,
											"end": 5575,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5562,
											"end": 5575,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5562,
											"end": 5575,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5562,
											"end": 5575,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1667,
											"end": 5592,
											"name": "tag",
											"source": 3,
											"value": "147"
										},
										{
											"begin": 1667,
											"end": 5592,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1667,
											"end": 5592,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1667,
											"end": 5592,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1667,
											"end": 5592,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1667,
											"end": 5592,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1667,
											"end": 5592,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1667,
											"end": 5592,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 640,
											"end": 736,
											"name": "tag",
											"source": 2,
											"value": "139"
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 693,
											"end": 700,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 712,
											"end": 729,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 712,
											"end": 729,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 640,
											"end": 736,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 146,
											"name": "tag",
											"source": 6,
											"value": "153"
										},
										{
											"begin": 7,
											"end": 146,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7,
											"end": 146,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 91,
											"end": 97,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 78,
											"end": 98,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 69,
											"end": 98,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 69,
											"end": 98,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 107,
											"end": 140,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "155"
										},
										{
											"begin": 134,
											"end": 139,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 107,
											"end": 140,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "156"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "tag",
											"source": 6,
											"value": "155"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 59,
											"end": 146,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 59,
											"end": 146,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 59,
											"end": 146,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 59,
											"end": 146,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 59,
											"end": 146,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 152,
											"end": 289,
											"name": "tag",
											"source": 6,
											"value": "157"
										},
										{
											"begin": 152,
											"end": 289,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 152,
											"end": 289,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 237,
											"end": 243,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 231,
											"end": 244,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 222,
											"end": 244,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 222,
											"end": 244,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 253,
											"end": 283,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "159"
										},
										{
											"begin": 277,
											"end": 282,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 253,
											"end": 283,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "160"
										},
										{
											"begin": 253,
											"end": 283,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 253,
											"end": 283,
											"name": "tag",
											"source": 6,
											"value": "159"
										},
										{
											"begin": 253,
											"end": 283,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 212,
											"end": 289,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 212,
											"end": 289,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 212,
											"end": 289,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 212,
											"end": 289,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 212,
											"end": 289,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 295,
											"end": 434,
											"name": "tag",
											"source": 6,
											"value": "161"
										},
										{
											"begin": 295,
											"end": 434,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 295,
											"end": 434,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 379,
											"end": 385,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 366,
											"end": 386,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 357,
											"end": 386,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 357,
											"end": 386,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 395,
											"end": 428,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "163"
										},
										{
											"begin": 422,
											"end": 427,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 395,
											"end": 428,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "164"
										},
										{
											"begin": 395,
											"end": 428,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 395,
											"end": 428,
											"name": "tag",
											"source": 6,
											"value": "163"
										},
										{
											"begin": 395,
											"end": 428,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 347,
											"end": 434,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 347,
											"end": 434,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 347,
											"end": 434,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 347,
											"end": 434,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 347,
											"end": 434,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 440,
											"end": 702,
											"name": "tag",
											"source": 6,
											"value": "33"
										},
										{
											"begin": 440,
											"end": 702,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 440,
											"end": 702,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 548,
											"end": 550,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 536,
											"end": 545,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 527,
											"end": 534,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 523,
											"end": 546,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 519,
											"end": 551,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 516,
											"end": 518,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 516,
											"end": 518,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "166"
										},
										{
											"begin": 516,
											"end": 518,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 564,
											"end": 565,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 561,
											"end": 562,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 554,
											"end": 566,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 516,
											"end": 518,
											"name": "tag",
											"source": 6,
											"value": "166"
										},
										{
											"begin": 516,
											"end": 518,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 607,
											"end": 608,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 632,
											"end": 685,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "167"
										},
										{
											"begin": 677,
											"end": 684,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 668,
											"end": 674,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 657,
											"end": 666,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 653,
											"end": 675,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 632,
											"end": 685,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "153"
										},
										{
											"begin": 632,
											"end": 685,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 632,
											"end": 685,
											"name": "tag",
											"source": 6,
											"value": "167"
										},
										{
											"begin": 632,
											"end": 685,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 622,
											"end": 685,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 622,
											"end": 685,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 578,
											"end": 695,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 506,
											"end": 702,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 506,
											"end": 702,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 506,
											"end": 702,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 506,
											"end": 702,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 506,
											"end": 702,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 708,
											"end": 1115,
											"name": "tag",
											"source": 6,
											"value": "17"
										},
										{
											"begin": 708,
											"end": 1115,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 708,
											"end": 1115,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 708,
											"end": 1115,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 833,
											"end": 835,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 821,
											"end": 830,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 812,
											"end": 819,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 808,
											"end": 831,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 804,
											"end": 836,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 801,
											"end": 803,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 801,
											"end": 803,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "169"
										},
										{
											"begin": 801,
											"end": 803,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 849,
											"end": 850,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 846,
											"end": 847,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 839,
											"end": 851,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 801,
											"end": 803,
											"name": "tag",
											"source": 6,
											"value": "169"
										},
										{
											"begin": 801,
											"end": 803,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 892,
											"end": 893,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 917,
											"end": 970,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "170"
										},
										{
											"begin": 962,
											"end": 969,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 953,
											"end": 959,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 942,
											"end": 951,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 938,
											"end": 960,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 917,
											"end": 970,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "153"
										},
										{
											"begin": 917,
											"end": 970,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 917,
											"end": 970,
											"name": "tag",
											"source": 6,
											"value": "170"
										},
										{
											"begin": 917,
											"end": 970,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 907,
											"end": 970,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 907,
											"end": 970,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 863,
											"end": 980,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1019,
											"end": 1021,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1045,
											"end": 1098,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "171"
										},
										{
											"begin": 1090,
											"end": 1097,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1081,
											"end": 1087,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1070,
											"end": 1079,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 1066,
											"end": 1088,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1045,
											"end": 1098,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "153"
										},
										{
											"begin": 1045,
											"end": 1098,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1045,
											"end": 1098,
											"name": "tag",
											"source": 6,
											"value": "171"
										},
										{
											"begin": 1045,
											"end": 1098,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1035,
											"end": 1098,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1035,
											"end": 1098,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 990,
											"end": 1108,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 791,
											"end": 1115,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 791,
											"end": 1115,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 791,
											"end": 1115,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 791,
											"end": 1115,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 791,
											"end": 1115,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 791,
											"end": 1115,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 1121,
											"end": 1819,
											"name": "tag",
											"source": 6,
											"value": "37"
										},
										{
											"begin": 1121,
											"end": 1819,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1121,
											"end": 1819,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1121,
											"end": 1819,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1121,
											"end": 1819,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1121,
											"end": 1819,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1280,
											"end": 1283,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 1268,
											"end": 1277,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1259,
											"end": 1266,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 1255,
											"end": 1278,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1251,
											"end": 1284,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 1248,
											"end": 1250,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1248,
											"end": 1250,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "173"
										},
										{
											"begin": 1248,
											"end": 1250,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1297,
											"end": 1298,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1294,
											"end": 1295,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1287,
											"end": 1299,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1248,
											"end": 1250,
											"name": "tag",
											"source": 6,
											"value": "173"
										},
										{
											"begin": 1248,
											"end": 1250,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1340,
											"end": 1341,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1365,
											"end": 1418,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "174"
										},
										{
											"begin": 1410,
											"end": 1417,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 1401,
											"end": 1407,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1399,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 1386,
											"end": 1408,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1365,
											"end": 1418,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "153"
										},
										{
											"begin": 1365,
											"end": 1418,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1365,
											"end": 1418,
											"name": "tag",
											"source": 6,
											"value": "174"
										},
										{
											"begin": 1365,
											"end": 1418,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1355,
											"end": 1418,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 1355,
											"end": 1418,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1311,
											"end": 1428,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1467,
											"end": 1469,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1493,
											"end": 1546,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "175"
										},
										{
											"begin": 1538,
											"end": 1545,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 1529,
											"end": 1535,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1518,
											"end": 1527,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 1514,
											"end": 1536,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1493,
											"end": 1546,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "161"
										},
										{
											"begin": 1493,
											"end": 1546,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1493,
											"end": 1546,
											"name": "tag",
											"source": 6,
											"value": "175"
										},
										{
											"begin": 1493,
											"end": 1546,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1483,
											"end": 1546,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1483,
											"end": 1546,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1438,
											"end": 1556,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1595,
											"end": 1597,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1621,
											"end": 1674,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "176"
										},
										{
											"begin": 1666,
											"end": 1673,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 1657,
											"end": 1663,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1646,
											"end": 1655,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 1642,
											"end": 1664,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1621,
											"end": 1674,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "161"
										},
										{
											"begin": 1621,
											"end": 1674,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1621,
											"end": 1674,
											"name": "tag",
											"source": 6,
											"value": "176"
										},
										{
											"begin": 1621,
											"end": 1674,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1611,
											"end": 1674,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1611,
											"end": 1674,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1566,
											"end": 1684,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1723,
											"end": 1725,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 1749,
											"end": 1802,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "177"
										},
										{
											"begin": 1794,
											"end": 1801,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 1785,
											"end": 1791,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1774,
											"end": 1783,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 1770,
											"end": 1792,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1749,
											"end": 1802,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "153"
										},
										{
											"begin": 1749,
											"end": 1802,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1749,
											"end": 1802,
											"name": "tag",
											"source": 6,
											"value": "177"
										},
										{
											"begin": 1749,
											"end": 1802,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1739,
											"end": 1802,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1739,
											"end": 1802,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1694,
											"end": 1812,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1238,
											"end": 1819,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1238,
											"end": 1819,
											"name": "SWAP6",
											"source": 6
										},
										{
											"begin": 1238,
											"end": 1819,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1238,
											"end": 1819,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 1238,
											"end": 1819,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1238,
											"end": 1819,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1238,
											"end": 1819,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1238,
											"end": 1819,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 1825,
											"end": 2103,
											"name": "tag",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 1825,
											"end": 2103,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1825,
											"end": 2103,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1941,
											"end": 1943,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1929,
											"end": 1938,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1920,
											"end": 1927,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1916,
											"end": 1939,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1912,
											"end": 1944,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 1909,
											"end": 1911,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1909,
											"end": 1911,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "179"
										},
										{
											"begin": 1909,
											"end": 1911,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1957,
											"end": 1958,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1954,
											"end": 1955,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1947,
											"end": 1959,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1909,
											"end": 1911,
											"name": "tag",
											"source": 6,
											"value": "179"
										},
										{
											"begin": 1909,
											"end": 1911,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2000,
											"end": 2001,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2025,
											"end": 2086,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "180"
										},
										{
											"begin": 2078,
											"end": 2085,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 2069,
											"end": 2075,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2058,
											"end": 2067,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 2054,
											"end": 2076,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2025,
											"end": 2086,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "157"
										},
										{
											"begin": 2025,
											"end": 2086,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2025,
											"end": 2086,
											"name": "tag",
											"source": 6,
											"value": "180"
										},
										{
											"begin": 2025,
											"end": 2086,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2015,
											"end": 2086,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2015,
											"end": 2086,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1971,
											"end": 2096,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 2103,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 2103,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 2103,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 2103,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 2103,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 2109,
											"end": 2516,
											"name": "tag",
											"source": 6,
											"value": "27"
										},
										{
											"begin": 2109,
											"end": 2516,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2109,
											"end": 2516,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2109,
											"end": 2516,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2234,
											"end": 2236,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2222,
											"end": 2231,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2213,
											"end": 2220,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 2209,
											"end": 2232,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2205,
											"end": 2237,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 2202,
											"end": 2204,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2202,
											"end": 2204,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "182"
										},
										{
											"begin": 2202,
											"end": 2204,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2250,
											"end": 2251,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2247,
											"end": 2248,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2240,
											"end": 2252,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 2202,
											"end": 2204,
											"name": "tag",
											"source": 6,
											"value": "182"
										},
										{
											"begin": 2202,
											"end": 2204,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2293,
											"end": 2294,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2318,
											"end": 2371,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "183"
										},
										{
											"begin": 2363,
											"end": 2370,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 2354,
											"end": 2360,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2343,
											"end": 2352,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 2339,
											"end": 2361,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2318,
											"end": 2371,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "161"
										},
										{
											"begin": 2318,
											"end": 2371,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2318,
											"end": 2371,
											"name": "tag",
											"source": 6,
											"value": "183"
										},
										{
											"begin": 2318,
											"end": 2371,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2308,
											"end": 2371,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 2308,
											"end": 2371,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2264,
											"end": 2381,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2420,
											"end": 2422,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2446,
											"end": 2499,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "184"
										},
										{
											"begin": 2491,
											"end": 2498,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 2482,
											"end": 2488,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2471,
											"end": 2480,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 2467,
											"end": 2489,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2446,
											"end": 2499,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "161"
										},
										{
											"begin": 2446,
											"end": 2499,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2446,
											"end": 2499,
											"name": "tag",
											"source": 6,
											"value": "184"
										},
										{
											"begin": 2446,
											"end": 2499,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2436,
											"end": 2499,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2436,
											"end": 2499,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2391,
											"end": 2509,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2192,
											"end": 2516,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 2192,
											"end": 2516,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2192,
											"end": 2516,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 2192,
											"end": 2516,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2192,
											"end": 2516,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2192,
											"end": 2516,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 2522,
											"end": 2640,
											"name": "tag",
											"source": 6,
											"value": "185"
										},
										{
											"begin": 2522,
											"end": 2640,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2609,
											"end": 2633,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "187"
										},
										{
											"begin": 2627,
											"end": 2632,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2609,
											"end": 2633,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "188"
										},
										{
											"begin": 2609,
											"end": 2633,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2609,
											"end": 2633,
											"name": "tag",
											"source": 6,
											"value": "187"
										},
										{
											"begin": 2609,
											"end": 2633,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2604,
											"end": 2607,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2597,
											"end": 2634,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2587,
											"end": 2640,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2587,
											"end": 2640,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2587,
											"end": 2640,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 2646,
											"end": 3016,
											"name": "tag",
											"source": 6,
											"value": "189"
										},
										{
											"begin": 2646,
											"end": 3016,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2646,
											"end": 3016,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2809,
											"end": 2876,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "191"
										},
										{
											"begin": 2873,
											"end": 2875,
											"name": "PUSH",
											"source": 6,
											"value": "26"
										},
										{
											"begin": 2868,
											"end": 2871,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2809,
											"end": 2876,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "192"
										},
										{
											"begin": 2809,
											"end": 2876,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2809,
											"end": 2876,
											"name": "tag",
											"source": 6,
											"value": "191"
										},
										{
											"begin": 2809,
											"end": 2876,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2802,
											"end": 2876,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2802,
											"end": 2876,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2906,
											"end": 2940,
											"name": "PUSH",
											"source": 6,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 2902,
											"end": 2903,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2897,
											"end": 2900,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2893,
											"end": 2904,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2886,
											"end": 2941,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2972,
											"end": 2980,
											"name": "PUSH",
											"source": 6,
											"value": "6464726573730000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2967,
											"end": 2969,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2962,
											"end": 2965,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2958,
											"end": 2970,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2951,
											"end": 2981,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3007,
											"end": 3009,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3002,
											"end": 3005,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2998,
											"end": 3010,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2991,
											"end": 3010,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2991,
											"end": 3010,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2792,
											"end": 3016,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2792,
											"end": 3016,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2792,
											"end": 3016,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2792,
											"end": 3016,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 3022,
											"end": 3349,
											"name": "tag",
											"source": 6,
											"value": "193"
										},
										{
											"begin": 3022,
											"end": 3349,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3022,
											"end": 3349,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3185,
											"end": 3252,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "195"
										},
										{
											"begin": 3249,
											"end": 3251,
											"name": "PUSH",
											"source": 6,
											"value": "1D"
										},
										{
											"begin": 3244,
											"end": 3247,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3185,
											"end": 3252,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "192"
										},
										{
											"begin": 3185,
											"end": 3252,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3185,
											"end": 3252,
											"name": "tag",
											"source": 6,
											"value": "195"
										},
										{
											"begin": 3185,
											"end": 3252,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3178,
											"end": 3252,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3178,
											"end": 3252,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3282,
											"end": 3313,
											"name": "PUSH",
											"source": 6,
											"value": "616464206661696C202C20627920536166654D6174682E747279416464000000"
										},
										{
											"begin": 3278,
											"end": 3279,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3273,
											"end": 3276,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3269,
											"end": 3280,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3262,
											"end": 3314,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3340,
											"end": 3342,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3335,
											"end": 3338,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3331,
											"end": 3343,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3324,
											"end": 3343,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3324,
											"end": 3343,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3168,
											"end": 3349,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3168,
											"end": 3349,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3168,
											"end": 3349,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3168,
											"end": 3349,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 3355,
											"end": 3720,
											"name": "tag",
											"source": 6,
											"value": "196"
										},
										{
											"begin": 3355,
											"end": 3720,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3355,
											"end": 3720,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3518,
											"end": 3585,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "198"
										},
										{
											"begin": 3582,
											"end": 3584,
											"name": "PUSH",
											"source": 6,
											"value": "21"
										},
										{
											"begin": 3577,
											"end": 3580,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3518,
											"end": 3585,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "192"
										},
										{
											"begin": 3518,
											"end": 3585,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3518,
											"end": 3585,
											"name": "tag",
											"source": 6,
											"value": "198"
										},
										{
											"begin": 3518,
											"end": 3585,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3511,
											"end": 3585,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3511,
											"end": 3585,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3615,
											"end": 3649,
											"name": "PUSH",
											"source": 6,
											"value": "616D6F756E744F7574206C657373207468616E205F616D6F756E744F75744D69"
										},
										{
											"begin": 3611,
											"end": 3612,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3606,
											"end": 3609,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3602,
											"end": 3613,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3595,
											"end": 3650,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3681,
											"end": 3684,
											"name": "PUSH",
											"source": 6,
											"value": "6E00000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3676,
											"end": 3678,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3671,
											"end": 3674,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3667,
											"end": 3679,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3660,
											"end": 3685,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3711,
											"end": 3713,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3706,
											"end": 3709,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3702,
											"end": 3714,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3695,
											"end": 3714,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3695,
											"end": 3714,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3501,
											"end": 3720,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3501,
											"end": 3720,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3501,
											"end": 3720,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3501,
											"end": 3720,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 3726,
											"end": 4056,
											"name": "tag",
											"source": 6,
											"value": "199"
										},
										{
											"begin": 3726,
											"end": 4056,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3726,
											"end": 4056,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3889,
											"end": 3956,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "201"
										},
										{
											"begin": 3953,
											"end": 3955,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3948,
											"end": 3951,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3889,
											"end": 3956,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "192"
										},
										{
											"begin": 3889,
											"end": 3956,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3889,
											"end": 3956,
											"name": "tag",
											"source": 6,
											"value": "201"
										},
										{
											"begin": 3889,
											"end": 3956,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3882,
											"end": 3956,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3882,
											"end": 3956,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3986,
											"end": 4020,
											"name": "PUSH",
											"source": 6,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 3982,
											"end": 3983,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3977,
											"end": 3980,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3973,
											"end": 3984,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3966,
											"end": 4021,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4047,
											"end": 4049,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4042,
											"end": 4045,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4038,
											"end": 4050,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4031,
											"end": 4050,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4031,
											"end": 4050,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3872,
											"end": 4056,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3872,
											"end": 4056,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3872,
											"end": 4056,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3872,
											"end": 4056,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 4062,
											"end": 4439,
											"name": "tag",
											"source": 6,
											"value": "202"
										},
										{
											"begin": 4062,
											"end": 4439,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4062,
											"end": 4439,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4225,
											"end": 4292,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "204"
										},
										{
											"begin": 4289,
											"end": 4291,
											"name": "PUSH",
											"source": 6,
											"value": "2D"
										},
										{
											"begin": 4284,
											"end": 4287,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4225,
											"end": 4292,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "192"
										},
										{
											"begin": 4225,
											"end": 4292,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4225,
											"end": 4292,
											"name": "tag",
											"source": 6,
											"value": "204"
										},
										{
											"begin": 4225,
											"end": 4292,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4218,
											"end": 4292,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4218,
											"end": 4292,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4322,
											"end": 4356,
											"name": "PUSH",
											"source": 6,
											"value": "746F6B656E496E20616D6F756E7420616464206661696C2C20736F7572636520"
										},
										{
											"begin": 4318,
											"end": 4319,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4313,
											"end": 4316,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4309,
											"end": 4320,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4302,
											"end": 4357,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4388,
											"end": 4403,
											"name": "PUSH",
											"source": 6,
											"value": "66726F6D20736166654D61746800000000000000000000000000000000000000"
										},
										{
											"begin": 4383,
											"end": 4385,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4378,
											"end": 4381,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4374,
											"end": 4386,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4367,
											"end": 4404,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4430,
											"end": 4432,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4425,
											"end": 4428,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4421,
											"end": 4433,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4414,
											"end": 4433,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4414,
											"end": 4433,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4208,
											"end": 4439,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4208,
											"end": 4439,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4208,
											"end": 4439,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4208,
											"end": 4439,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 4445,
											"end": 4815,
											"name": "tag",
											"source": 6,
											"value": "205"
										},
										{
											"begin": 4445,
											"end": 4815,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4445,
											"end": 4815,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4608,
											"end": 4675,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "207"
										},
										{
											"begin": 4672,
											"end": 4674,
											"name": "PUSH",
											"source": 6,
											"value": "26"
										},
										{
											"begin": 4667,
											"end": 4670,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4608,
											"end": 4675,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "192"
										},
										{
											"begin": 4608,
											"end": 4675,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4608,
											"end": 4675,
											"name": "tag",
											"source": 6,
											"value": "207"
										},
										{
											"begin": 4608,
											"end": 4675,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4601,
											"end": 4675,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4601,
											"end": 4675,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4705,
											"end": 4739,
											"name": "PUSH",
											"source": 6,
											"value": "746F6B656E496E206D7573742062652041206F72204220746861742068617320"
										},
										{
											"begin": 4701,
											"end": 4702,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4696,
											"end": 4699,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4692,
											"end": 4703,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4685,
											"end": 4740,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4771,
											"end": 4779,
											"name": "PUSH",
											"source": 6,
											"value": "6265207365740000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4766,
											"end": 4768,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4761,
											"end": 4764,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4757,
											"end": 4769,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4750,
											"end": 4780,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4806,
											"end": 4808,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4801,
											"end": 4804,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4797,
											"end": 4809,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4790,
											"end": 4809,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4790,
											"end": 4809,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4591,
											"end": 4815,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4591,
											"end": 4815,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4591,
											"end": 4815,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4591,
											"end": 4815,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 4821,
											"end": 5145,
											"name": "tag",
											"source": 6,
											"value": "208"
										},
										{
											"begin": 4821,
											"end": 5145,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4821,
											"end": 5145,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4984,
											"end": 5051,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "210"
										},
										{
											"begin": 5048,
											"end": 5050,
											"name": "PUSH",
											"source": 6,
											"value": "1A"
										},
										{
											"begin": 5043,
											"end": 5046,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4984,
											"end": 5051,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "192"
										},
										{
											"begin": 4984,
											"end": 5051,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4984,
											"end": 5051,
											"name": "tag",
											"source": 6,
											"value": "210"
										},
										{
											"begin": 4984,
											"end": 5051,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4977,
											"end": 5051,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4977,
											"end": 5051,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5081,
											"end": 5109,
											"name": "PUSH",
											"source": 6,
											"value": "746F6B656E4F757420616D6F756E74206E6F7420656E6F756768000000000000"
										},
										{
											"begin": 5077,
											"end": 5078,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5072,
											"end": 5075,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5068,
											"end": 5079,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5061,
											"end": 5110,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5136,
											"end": 5138,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5131,
											"end": 5134,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5127,
											"end": 5139,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5120,
											"end": 5139,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5120,
											"end": 5139,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4967,
											"end": 5145,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4967,
											"end": 5145,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4967,
											"end": 5145,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4967,
											"end": 5145,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 5151,
											"end": 5476,
											"name": "tag",
											"source": 6,
											"value": "211"
										},
										{
											"begin": 5151,
											"end": 5476,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5151,
											"end": 5476,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5314,
											"end": 5381,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "213"
										},
										{
											"begin": 5378,
											"end": 5380,
											"name": "PUSH",
											"source": 6,
											"value": "1B"
										},
										{
											"begin": 5373,
											"end": 5376,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5314,
											"end": 5381,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "192"
										},
										{
											"begin": 5314,
											"end": 5381,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5314,
											"end": 5381,
											"name": "tag",
											"source": 6,
											"value": "213"
										},
										{
											"begin": 5314,
											"end": 5381,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5307,
											"end": 5381,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5307,
											"end": 5381,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5411,
											"end": 5440,
											"name": "PUSH",
											"source": 6,
											"value": "5F746F2063616E206E6F74206265207A65726F20616464726573730000000000"
										},
										{
											"begin": 5407,
											"end": 5408,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5402,
											"end": 5405,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5398,
											"end": 5409,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5391,
											"end": 5441,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5467,
											"end": 5469,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5462,
											"end": 5465,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5458,
											"end": 5470,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5451,
											"end": 5470,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5451,
											"end": 5470,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5297,
											"end": 5476,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5297,
											"end": 5476,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5297,
											"end": 5476,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5297,
											"end": 5476,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 5482,
											"end": 5811,
											"name": "tag",
											"source": 6,
											"value": "214"
										},
										{
											"begin": 5482,
											"end": 5811,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5482,
											"end": 5811,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5645,
											"end": 5712,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "216"
										},
										{
											"begin": 5709,
											"end": 5711,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 5704,
											"end": 5707,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5645,
											"end": 5712,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "192"
										},
										{
											"begin": 5645,
											"end": 5712,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5645,
											"end": 5712,
											"name": "tag",
											"source": 6,
											"value": "216"
										},
										{
											"begin": 5645,
											"end": 5712,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5638,
											"end": 5712,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5638,
											"end": 5712,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5742,
											"end": 5775,
											"name": "PUSH",
											"source": 6,
											"value": "746F6B656E496E2063616E206E6F74206265207A65726F206164647265737300"
										},
										{
											"begin": 5738,
											"end": 5739,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5733,
											"end": 5736,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5729,
											"end": 5740,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5722,
											"end": 5776,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5802,
											"end": 5804,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5797,
											"end": 5800,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5793,
											"end": 5805,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5786,
											"end": 5805,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5786,
											"end": 5805,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5628,
											"end": 5811,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5628,
											"end": 5811,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5628,
											"end": 5811,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5628,
											"end": 5811,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 5817,
											"end": 5935,
											"name": "tag",
											"source": 6,
											"value": "217"
										},
										{
											"begin": 5817,
											"end": 5935,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5904,
											"end": 5928,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "219"
										},
										{
											"begin": 5922,
											"end": 5927,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5904,
											"end": 5928,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "220"
										},
										{
											"begin": 5904,
											"end": 5928,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5904,
											"end": 5928,
											"name": "tag",
											"source": 6,
											"value": "219"
										},
										{
											"begin": 5904,
											"end": 5928,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5899,
											"end": 5902,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5892,
											"end": 5929,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5882,
											"end": 5935,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5882,
											"end": 5935,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5882,
											"end": 5935,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 5941,
											"end": 6163,
											"name": "tag",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 5941,
											"end": 6163,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5941,
											"end": 6163,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6072,
											"end": 6074,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6061,
											"end": 6070,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6057,
											"end": 6075,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6049,
											"end": 6075,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6049,
											"end": 6075,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6085,
											"end": 6156,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "222"
										},
										{
											"begin": 6153,
											"end": 6154,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6142,
											"end": 6151,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6138,
											"end": 6155,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6129,
											"end": 6135,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 6085,
											"end": 6156,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "185"
										},
										{
											"begin": 6085,
											"end": 6156,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6085,
											"end": 6156,
											"name": "tag",
											"source": 6,
											"value": "222"
										},
										{
											"begin": 6085,
											"end": 6156,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6039,
											"end": 6163,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 6039,
											"end": 6163,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6039,
											"end": 6163,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6039,
											"end": 6163,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6039,
											"end": 6163,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 6169,
											"end": 6501,
											"name": "tag",
											"source": 6,
											"value": "14"
										},
										{
											"begin": 6169,
											"end": 6501,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6169,
											"end": 6501,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6328,
											"end": 6330,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6317,
											"end": 6326,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6313,
											"end": 6331,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6305,
											"end": 6331,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6305,
											"end": 6331,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6341,
											"end": 6412,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "224"
										},
										{
											"begin": 6409,
											"end": 6410,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6398,
											"end": 6407,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6394,
											"end": 6411,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6385,
											"end": 6391,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 6341,
											"end": 6412,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "185"
										},
										{
											"begin": 6341,
											"end": 6412,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6341,
											"end": 6412,
											"name": "tag",
											"source": 6,
											"value": "224"
										},
										{
											"begin": 6341,
											"end": 6412,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6422,
											"end": 6494,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "225"
										},
										{
											"begin": 6490,
											"end": 6492,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6479,
											"end": 6488,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6475,
											"end": 6493,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6466,
											"end": 6472,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 6422,
											"end": 6494,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "185"
										},
										{
											"begin": 6422,
											"end": 6494,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6422,
											"end": 6494,
											"name": "tag",
											"source": 6,
											"value": "225"
										},
										{
											"begin": 6422,
											"end": 6494,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6295,
											"end": 6501,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 6295,
											"end": 6501,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 6295,
											"end": 6501,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6295,
											"end": 6501,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6295,
											"end": 6501,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6295,
											"end": 6501,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 6507,
											"end": 6949,
											"name": "tag",
											"source": 6,
											"value": "54"
										},
										{
											"begin": 6507,
											"end": 6949,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6507,
											"end": 6949,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6694,
											"end": 6696,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 6683,
											"end": 6692,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6679,
											"end": 6697,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6671,
											"end": 6697,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6671,
											"end": 6697,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6707,
											"end": 6778,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "227"
										},
										{
											"begin": 6775,
											"end": 6776,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6764,
											"end": 6773,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6760,
											"end": 6777,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6751,
											"end": 6757,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 6707,
											"end": 6778,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "185"
										},
										{
											"begin": 6707,
											"end": 6778,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6707,
											"end": 6778,
											"name": "tag",
											"source": 6,
											"value": "227"
										},
										{
											"begin": 6707,
											"end": 6778,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6788,
											"end": 6860,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "228"
										},
										{
											"begin": 6856,
											"end": 6858,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6845,
											"end": 6854,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6841,
											"end": 6859,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6832,
											"end": 6838,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 6788,
											"end": 6860,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "185"
										},
										{
											"begin": 6788,
											"end": 6860,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6788,
											"end": 6860,
											"name": "tag",
											"source": 6,
											"value": "228"
										},
										{
											"begin": 6788,
											"end": 6860,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6870,
											"end": 6942,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "229"
										},
										{
											"begin": 6938,
											"end": 6940,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6927,
											"end": 6936,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6923,
											"end": 6941,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6914,
											"end": 6920,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 6870,
											"end": 6942,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "217"
										},
										{
											"begin": 6870,
											"end": 6942,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6870,
											"end": 6942,
											"name": "tag",
											"source": 6,
											"value": "229"
										},
										{
											"begin": 6870,
											"end": 6942,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6661,
											"end": 6949,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 6661,
											"end": 6949,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 6661,
											"end": 6949,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6661,
											"end": 6949,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6661,
											"end": 6949,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6661,
											"end": 6949,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6661,
											"end": 6949,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 6955,
											"end": 7287,
											"name": "tag",
											"source": 6,
											"value": "111"
										},
										{
											"begin": 6955,
											"end": 7287,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6955,
											"end": 7287,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7114,
											"end": 7116,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7103,
											"end": 7112,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7099,
											"end": 7117,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7091,
											"end": 7117,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7091,
											"end": 7117,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7127,
											"end": 7198,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "231"
										},
										{
											"begin": 7195,
											"end": 7196,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7184,
											"end": 7193,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7180,
											"end": 7197,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7171,
											"end": 7177,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 7127,
											"end": 7198,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "185"
										},
										{
											"begin": 7127,
											"end": 7198,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7127,
											"end": 7198,
											"name": "tag",
											"source": 6,
											"value": "231"
										},
										{
											"begin": 7127,
											"end": 7198,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7208,
											"end": 7280,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "232"
										},
										{
											"begin": 7276,
											"end": 7278,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7265,
											"end": 7274,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7261,
											"end": 7279,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7252,
											"end": 7258,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 7208,
											"end": 7280,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "217"
										},
										{
											"begin": 7208,
											"end": 7280,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7208,
											"end": 7280,
											"name": "tag",
											"source": 6,
											"value": "232"
										},
										{
											"begin": 7208,
											"end": 7280,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7081,
											"end": 7287,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 7081,
											"end": 7287,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 7081,
											"end": 7287,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7081,
											"end": 7287,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7081,
											"end": 7287,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7081,
											"end": 7287,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 7293,
											"end": 7712,
											"name": "tag",
											"source": 6,
											"value": "77"
										},
										{
											"begin": 7293,
											"end": 7712,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7293,
											"end": 7712,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7497,
											"end": 7499,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7486,
											"end": 7495,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7482,
											"end": 7500,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7474,
											"end": 7500,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7474,
											"end": 7500,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7546,
											"end": 7555,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7540,
											"end": 7544,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7536,
											"end": 7556,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 7532,
											"end": 7533,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7521,
											"end": 7530,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7517,
											"end": 7534,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7510,
											"end": 7557,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7574,
											"end": 7705,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "234"
										},
										{
											"begin": 7700,
											"end": 7704,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7574,
											"end": 7705,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "189"
										},
										{
											"begin": 7574,
											"end": 7705,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7574,
											"end": 7705,
											"name": "tag",
											"source": 6,
											"value": "234"
										},
										{
											"begin": 7574,
											"end": 7705,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7566,
											"end": 7705,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7566,
											"end": 7705,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7464,
											"end": 7712,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7464,
											"end": 7712,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7464,
											"end": 7712,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7464,
											"end": 7712,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 7718,
											"end": 8137,
											"name": "tag",
											"source": 6,
											"value": "71"
										},
										{
											"begin": 7718,
											"end": 8137,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7718,
											"end": 8137,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7922,
											"end": 7924,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7911,
											"end": 7920,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7907,
											"end": 7925,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7899,
											"end": 7925,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7899,
											"end": 7925,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7971,
											"end": 7980,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7965,
											"end": 7969,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7961,
											"end": 7981,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 7957,
											"end": 7958,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7946,
											"end": 7955,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7942,
											"end": 7959,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7935,
											"end": 7982,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7999,
											"end": 8130,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "236"
										},
										{
											"begin": 8125,
											"end": 8129,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7999,
											"end": 8130,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "193"
										},
										{
											"begin": 7999,
											"end": 8130,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7999,
											"end": 8130,
											"name": "tag",
											"source": 6,
											"value": "236"
										},
										{
											"begin": 7999,
											"end": 8130,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7991,
											"end": 8130,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7991,
											"end": 8130,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7889,
											"end": 8137,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7889,
											"end": 8137,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7889,
											"end": 8137,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7889,
											"end": 8137,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 8143,
											"end": 8562,
											"name": "tag",
											"source": 6,
											"value": "104"
										},
										{
											"begin": 8143,
											"end": 8562,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8143,
											"end": 8562,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8347,
											"end": 8349,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8336,
											"end": 8345,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8332,
											"end": 8350,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8324,
											"end": 8350,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8324,
											"end": 8350,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8396,
											"end": 8405,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8390,
											"end": 8394,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8386,
											"end": 8406,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 8382,
											"end": 8383,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8371,
											"end": 8380,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8367,
											"end": 8384,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8360,
											"end": 8407,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8424,
											"end": 8555,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "238"
										},
										{
											"begin": 8550,
											"end": 8554,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8424,
											"end": 8555,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "196"
										},
										{
											"begin": 8424,
											"end": 8555,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8424,
											"end": 8555,
											"name": "tag",
											"source": 6,
											"value": "238"
										},
										{
											"begin": 8424,
											"end": 8555,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8416,
											"end": 8555,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8416,
											"end": 8555,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8314,
											"end": 8562,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8314,
											"end": 8562,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8314,
											"end": 8562,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8314,
											"end": 8562,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 8568,
											"end": 8987,
											"name": "tag",
											"source": 6,
											"value": "143"
										},
										{
											"begin": 8568,
											"end": 8987,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8568,
											"end": 8987,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8772,
											"end": 8774,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8761,
											"end": 8770,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8757,
											"end": 8775,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8749,
											"end": 8775,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8749,
											"end": 8775,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8821,
											"end": 8830,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8815,
											"end": 8819,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8811,
											"end": 8831,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 8807,
											"end": 8808,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8796,
											"end": 8805,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8792,
											"end": 8809,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8785,
											"end": 8832,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8849,
											"end": 8980,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "240"
										},
										{
											"begin": 8975,
											"end": 8979,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8849,
											"end": 8980,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "199"
										},
										{
											"begin": 8849,
											"end": 8980,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8849,
											"end": 8980,
											"name": "tag",
											"source": 6,
											"value": "240"
										},
										{
											"begin": 8849,
											"end": 8980,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8841,
											"end": 8980,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8841,
											"end": 8980,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8739,
											"end": 8987,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8739,
											"end": 8987,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8739,
											"end": 8987,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8739,
											"end": 8987,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 8993,
											"end": 9412,
											"name": "tag",
											"source": 6,
											"value": "99"
										},
										{
											"begin": 8993,
											"end": 9412,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8993,
											"end": 9412,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9197,
											"end": 9199,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 9186,
											"end": 9195,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9182,
											"end": 9200,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9174,
											"end": 9200,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9174,
											"end": 9200,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9246,
											"end": 9255,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9240,
											"end": 9244,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9236,
											"end": 9256,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 9232,
											"end": 9233,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9221,
											"end": 9230,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 9217,
											"end": 9234,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9210,
											"end": 9257,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9274,
											"end": 9405,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "242"
										},
										{
											"begin": 9400,
											"end": 9404,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9274,
											"end": 9405,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "202"
										},
										{
											"begin": 9274,
											"end": 9405,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9274,
											"end": 9405,
											"name": "tag",
											"source": 6,
											"value": "242"
										},
										{
											"begin": 9274,
											"end": 9405,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9266,
											"end": 9405,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9266,
											"end": 9405,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9164,
											"end": 9412,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9164,
											"end": 9412,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9164,
											"end": 9412,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9164,
											"end": 9412,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 9418,
											"end": 9837,
											"name": "tag",
											"source": 6,
											"value": "89"
										},
										{
											"begin": 9418,
											"end": 9837,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9418,
											"end": 9837,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9622,
											"end": 9624,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 9611,
											"end": 9620,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9607,
											"end": 9625,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9599,
											"end": 9625,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9599,
											"end": 9625,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9671,
											"end": 9680,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9665,
											"end": 9669,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9661,
											"end": 9681,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 9657,
											"end": 9658,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9646,
											"end": 9655,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 9642,
											"end": 9659,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9635,
											"end": 9682,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9699,
											"end": 9830,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "244"
										},
										{
											"begin": 9825,
											"end": 9829,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9699,
											"end": 9830,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "205"
										},
										{
											"begin": 9699,
											"end": 9830,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9699,
											"end": 9830,
											"name": "tag",
											"source": 6,
											"value": "244"
										},
										{
											"begin": 9699,
											"end": 9830,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9691,
											"end": 9830,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9691,
											"end": 9830,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9589,
											"end": 9837,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9589,
											"end": 9837,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9589,
											"end": 9837,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9589,
											"end": 9837,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 9843,
											"end": 10262,
											"name": "tag",
											"source": 6,
											"value": "107"
										},
										{
											"begin": 9843,
											"end": 10262,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9843,
											"end": 10262,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10047,
											"end": 10049,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 10036,
											"end": 10045,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 10032,
											"end": 10050,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10024,
											"end": 10050,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10024,
											"end": 10050,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10096,
											"end": 10105,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10090,
											"end": 10094,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10086,
											"end": 10106,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 10082,
											"end": 10083,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10071,
											"end": 10080,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 10067,
											"end": 10084,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10060,
											"end": 10107,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10124,
											"end": 10255,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "246"
										},
										{
											"begin": 10250,
											"end": 10254,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10124,
											"end": 10255,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "208"
										},
										{
											"begin": 10124,
											"end": 10255,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10124,
											"end": 10255,
											"name": "tag",
											"source": 6,
											"value": "246"
										},
										{
											"begin": 10124,
											"end": 10255,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10116,
											"end": 10255,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10116,
											"end": 10255,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10014,
											"end": 10262,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10014,
											"end": 10262,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10014,
											"end": 10262,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10014,
											"end": 10262,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 10268,
											"end": 10687,
											"name": "tag",
											"source": 6,
											"value": "85"
										},
										{
											"begin": 10268,
											"end": 10687,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10268,
											"end": 10687,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10472,
											"end": 10474,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 10461,
											"end": 10470,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 10457,
											"end": 10475,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10449,
											"end": 10475,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10449,
											"end": 10475,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10521,
											"end": 10530,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10515,
											"end": 10519,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10511,
											"end": 10531,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 10507,
											"end": 10508,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10496,
											"end": 10505,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 10492,
											"end": 10509,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10485,
											"end": 10532,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10549,
											"end": 10680,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "248"
										},
										{
											"begin": 10675,
											"end": 10679,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10549,
											"end": 10680,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "211"
										},
										{
											"begin": 10549,
											"end": 10680,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10549,
											"end": 10680,
											"name": "tag",
											"source": 6,
											"value": "248"
										},
										{
											"begin": 10549,
											"end": 10680,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10541,
											"end": 10680,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10541,
											"end": 10680,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10439,
											"end": 10687,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10439,
											"end": 10687,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10439,
											"end": 10687,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10439,
											"end": 10687,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 10693,
											"end": 11112,
											"name": "tag",
											"source": 6,
											"value": "82"
										},
										{
											"begin": 10693,
											"end": 11112,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10693,
											"end": 11112,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10897,
											"end": 10899,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 10886,
											"end": 10895,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 10882,
											"end": 10900,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10874,
											"end": 10900,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10874,
											"end": 10900,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10946,
											"end": 10955,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10940,
											"end": 10944,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10936,
											"end": 10956,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 10932,
											"end": 10933,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10921,
											"end": 10930,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 10917,
											"end": 10934,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10910,
											"end": 10957,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10974,
											"end": 11105,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "250"
										},
										{
											"begin": 11100,
											"end": 11104,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10974,
											"end": 11105,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "214"
										},
										{
											"begin": 10974,
											"end": 11105,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10974,
											"end": 11105,
											"name": "tag",
											"source": 6,
											"value": "250"
										},
										{
											"begin": 10974,
											"end": 11105,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10966,
											"end": 11105,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10966,
											"end": 11105,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10864,
											"end": 11112,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10864,
											"end": 11112,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10864,
											"end": 11112,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10864,
											"end": 11112,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 11118,
											"end": 11450,
											"name": "tag",
											"source": 6,
											"value": "30"
										},
										{
											"begin": 11118,
											"end": 11450,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11118,
											"end": 11450,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 11277,
											"end": 11279,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 11266,
											"end": 11275,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 11262,
											"end": 11280,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 11254,
											"end": 11280,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11254,
											"end": 11280,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 11290,
											"end": 11361,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "252"
										},
										{
											"begin": 11358,
											"end": 11359,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 11347,
											"end": 11356,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 11343,
											"end": 11360,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 11334,
											"end": 11340,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 11290,
											"end": 11361,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "217"
										},
										{
											"begin": 11290,
											"end": 11361,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 11290,
											"end": 11361,
											"name": "tag",
											"source": 6,
											"value": "252"
										},
										{
											"begin": 11290,
											"end": 11361,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11371,
											"end": 11443,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "253"
										},
										{
											"begin": 11439,
											"end": 11441,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 11428,
											"end": 11437,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 11424,
											"end": 11442,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 11415,
											"end": 11421,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 11371,
											"end": 11443,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "217"
										},
										{
											"begin": 11371,
											"end": 11443,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 11371,
											"end": 11443,
											"name": "tag",
											"source": 6,
											"value": "253"
										},
										{
											"begin": 11371,
											"end": 11443,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11244,
											"end": 11450,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 11244,
											"end": 11450,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 11244,
											"end": 11450,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 11244,
											"end": 11450,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 11244,
											"end": 11450,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 11244,
											"end": 11450,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 11456,
											"end": 11625,
											"name": "tag",
											"source": 6,
											"value": "192"
										},
										{
											"begin": 11456,
											"end": 11625,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11456,
											"end": 11625,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 11574,
											"end": 11580,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 11569,
											"end": 11572,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 11562,
											"end": 11581,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11614,
											"end": 11618,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 11609,
											"end": 11612,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 11605,
											"end": 11619,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 11590,
											"end": 11619,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11590,
											"end": 11619,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 11552,
											"end": 11625,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 11552,
											"end": 11625,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 11552,
											"end": 11625,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 11552,
											"end": 11625,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 11552,
											"end": 11625,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 11631,
											"end": 11822,
											"name": "tag",
											"source": 6,
											"value": "109"
										},
										{
											"begin": 11631,
											"end": 11822,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11631,
											"end": 11822,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 11691,
											"end": 11711,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "256"
										},
										{
											"begin": 11709,
											"end": 11710,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 11691,
											"end": 11711,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "220"
										},
										{
											"begin": 11691,
											"end": 11711,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 11691,
											"end": 11711,
											"name": "tag",
											"source": 6,
											"value": "256"
										},
										{
											"begin": 11691,
											"end": 11711,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11686,
											"end": 11711,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 11686,
											"end": 11711,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 11725,
											"end": 11745,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "257"
										},
										{
											"begin": 11743,
											"end": 11744,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 11725,
											"end": 11745,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "220"
										},
										{
											"begin": 11725,
											"end": 11745,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 11725,
											"end": 11745,
											"name": "tag",
											"source": 6,
											"value": "257"
										},
										{
											"begin": 11725,
											"end": 11745,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11720,
											"end": 11745,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 11720,
											"end": 11745,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 11764,
											"end": 11765,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 11761,
											"end": 11762,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 11758,
											"end": 11766,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 11755,
											"end": 11757,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 11755,
											"end": 11757,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "258"
										},
										{
											"begin": 11755,
											"end": 11757,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 11769,
											"end": 11787,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "259"
										},
										{
											"begin": 11769,
											"end": 11787,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "260"
										},
										{
											"begin": 11769,
											"end": 11787,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 11769,
											"end": 11787,
											"name": "tag",
											"source": 6,
											"value": "259"
										},
										{
											"begin": 11769,
											"end": 11787,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11755,
											"end": 11757,
											"name": "tag",
											"source": 6,
											"value": "258"
										},
										{
											"begin": 11755,
											"end": 11757,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11814,
											"end": 11815,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 11811,
											"end": 11812,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 11807,
											"end": 11816,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 11799,
											"end": 11816,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11799,
											"end": 11816,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 11676,
											"end": 11822,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 11676,
											"end": 11822,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 11676,
											"end": 11822,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 11676,
											"end": 11822,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 11676,
											"end": 11822,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 11828,
											"end": 11924,
											"name": "tag",
											"source": 6,
											"value": "188"
										},
										{
											"begin": 11828,
											"end": 11924,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11828,
											"end": 11924,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 11894,
											"end": 11918,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "262"
										},
										{
											"begin": 11912,
											"end": 11917,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 11894,
											"end": 11918,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "263"
										},
										{
											"begin": 11894,
											"end": 11918,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 11894,
											"end": 11918,
											"name": "tag",
											"source": 6,
											"value": "262"
										},
										{
											"begin": 11894,
											"end": 11918,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11883,
											"end": 11918,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11883,
											"end": 11918,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 11873,
											"end": 11924,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 11873,
											"end": 11924,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11873,
											"end": 11924,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 11873,
											"end": 11924,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 11930,
											"end": 12020,
											"name": "tag",
											"source": 6,
											"value": "264"
										},
										{
											"begin": 11930,
											"end": 12020,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11930,
											"end": 12020,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 12007,
											"end": 12012,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 12000,
											"end": 12013,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 11993,
											"end": 12014,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 11982,
											"end": 12014,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11982,
											"end": 12014,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 11972,
											"end": 12020,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 11972,
											"end": 12020,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11972,
											"end": 12020,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 11972,
											"end": 12020,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 12026,
											"end": 12152,
											"name": "tag",
											"source": 6,
											"value": "263"
										},
										{
											"begin": 12026,
											"end": 12152,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12026,
											"end": 12152,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 12103,
											"end": 12145,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12096,
											"end": 12101,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 12092,
											"end": 12146,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 12081,
											"end": 12146,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12081,
											"end": 12146,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 12071,
											"end": 12152,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 12071,
											"end": 12152,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12071,
											"end": 12152,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 12071,
											"end": 12152,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 12158,
											"end": 12235,
											"name": "tag",
											"source": 6,
											"value": "220"
										},
										{
											"begin": 12158,
											"end": 12235,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12158,
											"end": 12235,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 12224,
											"end": 12229,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 12213,
											"end": 12229,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12213,
											"end": 12229,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 12203,
											"end": 12235,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 12203,
											"end": 12235,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12203,
											"end": 12235,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 12203,
											"end": 12235,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 12241,
											"end": 12421,
											"name": "tag",
											"source": 6,
											"value": "260"
										},
										{
											"begin": 12241,
											"end": 12421,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12289,
											"end": 12366,
											"name": "PUSH",
											"source": 6,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 12286,
											"end": 12287,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 12279,
											"end": 12367,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12386,
											"end": 12390,
											"name": "PUSH",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 12383,
											"end": 12384,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 12376,
											"end": 12391,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12410,
											"end": 12414,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 12407,
											"end": 12408,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 12400,
											"end": 12415,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 12427,
											"end": 12549,
											"name": "tag",
											"source": 6,
											"value": "156"
										},
										{
											"begin": 12427,
											"end": 12549,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12500,
											"end": 12524,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "270"
										},
										{
											"begin": 12518,
											"end": 12523,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 12500,
											"end": 12524,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "188"
										},
										{
											"begin": 12500,
											"end": 12524,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 12500,
											"end": 12524,
											"name": "tag",
											"source": 6,
											"value": "270"
										},
										{
											"begin": 12500,
											"end": 12524,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12493,
											"end": 12498,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 12490,
											"end": 12525,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 12480,
											"end": 12482,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "271"
										},
										{
											"begin": 12480,
											"end": 12482,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 12539,
											"end": 12540,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 12536,
											"end": 12537,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 12529,
											"end": 12541,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 12480,
											"end": 12482,
											"name": "tag",
											"source": 6,
											"value": "271"
										},
										{
											"begin": 12480,
											"end": 12482,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12470,
											"end": 12549,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 12470,
											"end": 12549,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 12555,
											"end": 12671,
											"name": "tag",
											"source": 6,
											"value": "160"
										},
										{
											"begin": 12555,
											"end": 12671,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12625,
											"end": 12646,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "273"
										},
										{
											"begin": 12640,
											"end": 12645,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 12625,
											"end": 12646,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "264"
										},
										{
											"begin": 12625,
											"end": 12646,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 12625,
											"end": 12646,
											"name": "tag",
											"source": 6,
											"value": "273"
										},
										{
											"begin": 12625,
											"end": 12646,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12618,
											"end": 12623,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 12615,
											"end": 12647,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 12605,
											"end": 12607,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "274"
										},
										{
											"begin": 12605,
											"end": 12607,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 12661,
											"end": 12662,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 12658,
											"end": 12659,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 12651,
											"end": 12663,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 12605,
											"end": 12607,
											"name": "tag",
											"source": 6,
											"value": "274"
										},
										{
											"begin": 12605,
											"end": 12607,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12595,
											"end": 12671,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 12595,
											"end": 12671,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 12677,
											"end": 12799,
											"name": "tag",
											"source": 6,
											"value": "164"
										},
										{
											"begin": 12677,
											"end": 12799,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12750,
											"end": 12774,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "276"
										},
										{
											"begin": 12768,
											"end": 12773,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 12750,
											"end": 12774,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "220"
										},
										{
											"begin": 12750,
											"end": 12774,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 12750,
											"end": 12774,
											"name": "tag",
											"source": 6,
											"value": "276"
										},
										{
											"begin": 12750,
											"end": 12774,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12743,
											"end": 12748,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 12740,
											"end": 12775,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 12730,
											"end": 12732,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "277"
										},
										{
											"begin": 12730,
											"end": 12732,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 12789,
											"end": 12790,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 12786,
											"end": 12787,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 12779,
											"end": 12791,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 12730,
											"end": 12732,
											"name": "tag",
											"source": 6,
											"value": "277"
										},
										{
											"begin": 12730,
											"end": 12732,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12720,
											"end": 12799,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 12720,
											"end": 12799,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"addLiquidity(uint256,uint256)": "9cd441da",
							"owner()": "8da5cb5b",
							"queryPair()": "1a727c26",
							"renounceOwnership()": "715018a6",
							"setCoinPair(address,address)": "6f9632da",
							"swap(address,uint256,uint256,address)": "f3e6ea8a",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_aAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_b\",\"type\":\"address\"}],\"name\":\"setCoinPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/uniV2Pool.sol\":\"Univ2Protocal\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33bbf48cc069be677705037ba7520c22b1b622c23b33e1a71495f2d36549d40b\",\"dweb:/ipfs/Qmct36zWXv3j7LZB83uwbg7TXwnZSN1fqHNDZ93GG98bGz\"]},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://864a40efcffdf408044c332a5aa38ec5618ed7b4eecb8f65faf45671bd6cdc65\",\"dweb:/ipfs/QmQJquTMtc6fgm5JQzGdsGpA2fqBe3MHWEdt2qzaLySMdN\"]},\"contracts/uniV2Pool.sol\":{\"keccak256\":\"0xf09fd5fb371dd8a39e60247821c0ba2f15b4f52e27a596933771337099c1f165\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9effcce9235ab60f7fbd0cdd2a743ee49dd89323496c34f184aa7f6a0bf76e38\",\"dweb:/ipfs/QmVJ28nRxbXEPcXqFqx57quuyJo3BCaLZDUrUtohHD8W4T\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "contracts/uniV2Pool.sol:Univ2Protocal",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 1399,
								"contract": "contracts/uniV2Pool.sol:Univ2Protocal",
								"label": "aAmount",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 1401,
								"contract": "contracts/uniV2Pool.sol:Univ2Protocal",
								"label": "bAmount",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 1403,
								"contract": "contracts/uniV2Pool.sol:Univ2Protocal",
								"label": "coinA",
								"offset": 0,
								"slot": "3",
								"type": "t_address"
							},
							{
								"astId": 1405,
								"contract": "contracts/uniV2Pool.sol:Univ2Protocal",
								"label": "coinB",
								"offset": 0,
								"slot": "4",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "8261",
				"formattedMessage": "Warning: Variable is shadowed in inline assembly by an instruction of the same name\n   --> @openzeppelin/contracts/utils/math/Math.sol:205:5:\n    |\n205 |     function log2(uint256 value) internal pure returns (uint256) {\n    |     ^ (Relevant source part starts here and spans across multiple lines).\n\n",
				"message": "Variable is shadowed in inline assembly by an instruction of the same name",
				"severity": "warning",
				"sourceLocation": {
					"end": 9366,
					"file": "@openzeppelin/contracts/utils/math/Math.sol",
					"start": 8383
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "8261",
				"formattedMessage": "Warning: Variable is shadowed in inline assembly by an instruction of the same name\n   --> @openzeppelin/contracts/utils/math/Math.sol:247:5:\n    |\n247 |     function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n    |     ^ (Relevant source part starts here and spans across multiple lines).\n\n",
				"message": "Variable is shadowed in inline assembly by an instruction of the same name",
				"severity": "warning",
				"sourceLocation": {
					"end": 9764,
					"file": "@openzeppelin/contracts/utils/math/Math.sol",
					"start": 9519
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "8261",
				"formattedMessage": "Warning: Variable is shadowed in inline assembly by an instruction of the same name\n   --> @openzeppelin/contracts/utils/math/Math.sol:205:5:\n    |\n205 |     function log2(uint256 value) internal pure returns (uint256) {\n    |     ^ (Relevant source part starts here and spans across multiple lines).\n\n",
				"message": "Variable is shadowed in inline assembly by an instruction of the same name",
				"severity": "warning",
				"sourceLocation": {
					"end": 9366,
					"file": "@openzeppelin/contracts/utils/math/Math.sol",
					"start": 8383
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "8261",
				"formattedMessage": "Warning: Variable is shadowed in inline assembly by an instruction of the same name\n   --> @openzeppelin/contracts/utils/math/Math.sol:247:5:\n    |\n247 |     function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n    |     ^ (Relevant source part starts here and spans across multiple lines).\n\n",
				"message": "Variable is shadowed in inline assembly by an instruction of the same name",
				"severity": "warning",
				"sourceLocation": {
					"end": 9764,
					"file": "@openzeppelin/contracts/utils/math/Math.sol",
					"start": 9519
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "8261",
				"formattedMessage": "Warning: Variable is shadowed in inline assembly by an instruction of the same name\n   --> @openzeppelin/contracts/utils/math/Math.sol:205:5:\n    |\n205 |     function log2(uint256 value) internal pure returns (uint256) {\n    |     ^ (Relevant source part starts here and spans across multiple lines).\n\n",
				"message": "Variable is shadowed in inline assembly by an instruction of the same name",
				"severity": "warning",
				"sourceLocation": {
					"end": 9366,
					"file": "@openzeppelin/contracts/utils/math/Math.sol",
					"start": 8383
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "8261",
				"formattedMessage": "Warning: Variable is shadowed in inline assembly by an instruction of the same name\n   --> @openzeppelin/contracts/utils/math/Math.sol:247:5:\n    |\n247 |     function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n    |     ^ (Relevant source part starts here and spans across multiple lines).\n\n",
				"message": "Variable is shadowed in inline assembly by an instruction of the same name",
				"severity": "warning",
				"sourceLocation": {
					"end": 9764,
					"file": "@openzeppelin/contracts/utils/math/Math.sol",
					"start": 9519
				},
				"type": "Warning"
			}
		],
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							212
						],
						"Ownable": [
							112
						]
					},
					"id": 113,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "102:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nodeType": "ImportDirective",
							"scope": 113,
							"sourceUnit": 213,
							"src": "127:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 212,
										"src": "683:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "683:7:0"
								}
							],
							"contractDependencies": [
								212
							],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "159:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 112,
							"linearizedBaseContracts": [
								112,
								212
							],
							"name": "Ownable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nodeType": "VariableDeclaration",
									"scope": 112,
									"src": "697:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "697:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 13,
									"name": "OwnershipTransferred",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "753:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "753:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "784:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "784:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "752:57:0"
									},
									"src": "726:84:0"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "926:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 18,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 202,
																"src": "955:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "955:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 17,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "936:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "936:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "936:32:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "816:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 23,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "923:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "926:0:0"
									},
									"scope": 112,
									"src": "912:63:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 30,
										"nodeType": "Block",
										"src": "1084:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 26,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 54,
														"src": "1094:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 27,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1094:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 28,
												"nodeType": "ExpressionStatement",
												"src": "1094:13:0"
											},
											{
												"id": 29,
												"nodeType": "PlaceholderStatement",
												"src": "1117:1:0"
											}
										]
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "981:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 31,
									"name": "onlyOwner",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1081:2:0"
									},
									"src": "1063:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 39,
										"nodeType": "Block",
										"src": "1256:30:0",
										"statements": [
											{
												"expression": {
													"id": 37,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1273:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 36,
												"id": 38,
												"nodeType": "Return",
												"src": "1266:13:0"
											}
										]
									},
									"documentation": {
										"id": 32,
										"nodeType": "StructuredDocumentation",
										"src": "1131:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 40,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1215:2:0"
									},
									"returnParameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "1247:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 34,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1247:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1246:9:0"
									},
									"scope": 112,
									"src": "1201:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "1404:85:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 49,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 45,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 40,
																	"src": "1422:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 46,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1422:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 47,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 202,
																	"src": "1433:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 48,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1433:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1422:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 50,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1447:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 44,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1414:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 51,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1414:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 52,
												"nodeType": "ExpressionStatement",
												"src": "1414:68:0"
											}
										]
									},
									"documentation": {
										"id": 41,
										"nodeType": "StructuredDocumentation",
										"src": "1292:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1379:2:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1404:0:0"
									},
									"scope": 112,
									"src": "1359:130:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 67,
										"nodeType": "Block",
										"src": "1885:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 63,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1922:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 62,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1914:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 61,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1914:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 64,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1914:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 60,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "1895:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 65,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1895:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 66,
												"nodeType": "ExpressionStatement",
												"src": "1895:30:0"
											}
										]
									},
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1495:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 68,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 58,
											"modifierName": {
												"id": 57,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "1875:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1875:9:0"
										}
									],
									"name": "renounceOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1857:2:0"
									},
									"returnParameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1885:0:0"
									},
									"scope": 112,
									"src": "1831:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 90,
										"nodeType": "Block",
										"src": "2151:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 82,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 77,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 71,
																"src": "2169:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 80,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2189:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 79,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2181:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 78,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2181:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 81,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2181:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2169:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 83,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2193:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 76,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2161:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 84,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2161:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 85,
												"nodeType": "ExpressionStatement",
												"src": "2161:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 87,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 71,
															"src": "2263:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 86,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "2244:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 88,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2244:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 89,
												"nodeType": "ExpressionStatement",
												"src": "2244:28:0"
											}
										]
									},
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "1938:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 91,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 74,
											"modifierName": {
												"id": 73,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "2141:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2141:9:0"
										}
									],
									"name": "transferOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 91,
												"src": "2108:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 70,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2108:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2107:18:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2151:0:0"
									},
									"scope": 112,
									"src": "2081:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 110,
										"nodeType": "Block",
										"src": "2496:124:0",
										"statements": [
											{
												"assignments": [
													98
												],
												"declarations": [
													{
														"constant": false,
														"id": 98,
														"mutability": "mutable",
														"name": "oldOwner",
														"nodeType": "VariableDeclaration",
														"scope": 110,
														"src": "2506:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 97,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2506:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 100,
												"initialValue": {
													"id": 99,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "2525:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2506:25:0"
											},
											{
												"expression": {
													"id": 103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 101,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2541:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 102,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 94,
														"src": "2550:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2541:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 104,
												"nodeType": "ExpressionStatement",
												"src": "2541:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 106,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 98,
															"src": "2594:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 107,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 94,
															"src": "2604:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 105,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2573:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2573:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 109,
												"nodeType": "EmitStatement",
												"src": "2568:45:0"
											}
										]
									},
									"documentation": {
										"id": 92,
										"nodeType": "StructuredDocumentation",
										"src": "2285:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 111,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 94,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "2461:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 93,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2461:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2460:18:0"
									},
									"returnParameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2496:0:0"
									},
									"scope": 112,
									"src": "2433:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 113,
							"src": "654:1968:0"
						}
					],
					"src": "102:2521:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							190
						]
					},
					"id": 191,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 114,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 115,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:1",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 190,
							"linearizedBaseContracts": [
								190
							],
							"name": "IERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 116,
										"nodeType": "StructuredDocumentation",
										"src": "225:158:1",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 124,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 123,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 118,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "403:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 117,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "403:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 120,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "425:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 119,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "425:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 122,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "445:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 121,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "402:57:1"
									},
									"src": "388:72:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 125,
										"nodeType": "StructuredDocumentation",
										"src": "466:148:1",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 133,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 132,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 127,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "634:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 126,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 129,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "657:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 131,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "682:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 130,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "682:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "633:63:1"
									},
									"src": "619:78:1"
								},
								{
									"documentation": {
										"id": 134,
										"nodeType": "StructuredDocumentation",
										"src": "703:66:1",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 139,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 135,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:1"
									},
									"returnParameters": {
										"id": 138,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 137,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 139,
												"src": "820:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 136,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:1"
									},
									"scope": 190,
									"src": "774:55:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 140,
										"nodeType": "StructuredDocumentation",
										"src": "835:72:1",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 147,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "931:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 141,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:1"
									},
									"returnParameters": {
										"id": 146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 145,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "971:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 144,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:1"
									},
									"scope": 190,
									"src": "912:68:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 148,
										"nodeType": "StructuredDocumentation",
										"src": "986:202:1",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 157,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 150,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 157,
												"src": "1211:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 149,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 152,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 157,
												"src": "1223:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 151,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:28:1"
									},
									"returnParameters": {
										"id": 156,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 155,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 157,
												"src": "1257:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 154,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1257:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1256:6:1"
									},
									"scope": 190,
									"src": "1193:70:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 158,
										"nodeType": "StructuredDocumentation",
										"src": "1269:264:1",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 167,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 160,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "1557:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 159,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1557:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 162,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "1572:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 161,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1572:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1556:32:1"
									},
									"returnParameters": {
										"id": 166,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 165,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "1612:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 164,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1612:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1611:9:1"
									},
									"scope": 190,
									"src": "1538:83:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 168,
										"nodeType": "StructuredDocumentation",
										"src": "1627:642:1",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 177,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 173,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 170,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "2291:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 169,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2291:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 172,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "2308:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 171,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2308:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2290:33:1"
									},
									"returnParameters": {
										"id": 176,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "2342:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 174,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2342:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2341:6:1"
									},
									"scope": 190,
									"src": "2274:74:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 178,
										"nodeType": "StructuredDocumentation",
										"src": "2354:287:1",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 189,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 185,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 180,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "2677:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 179,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2677:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 182,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "2699:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 181,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2699:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "2719:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 183,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2667:72:1"
									},
									"returnParameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "2758:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 186,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2758:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2757:6:1"
									},
									"scope": 190,
									"src": "2646:118:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 191,
							"src": "202:2564:1"
						}
					],
					"src": "106:2661:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							212
						]
					},
					"id": 213,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 192,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:2"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 193,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:2",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 212,
							"linearizedBaseContracts": [
								212
							],
							"name": "Context",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 201,
										"nodeType": "Block",
										"src": "702:34:2",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 198,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 199,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 197,
												"id": 200,
												"nodeType": "Return",
												"src": "712:17:2"
											}
										]
									},
									"id": 202,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 194,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:2"
									},
									"returnParameters": {
										"id": 197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 202,
												"src": "693:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 195,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:2"
									},
									"scope": 212,
									"src": "640:96:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 210,
										"nodeType": "Block",
										"src": "809:32:2",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 207,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 208,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 206,
												"id": 209,
												"nodeType": "Return",
												"src": "819:15:2"
											}
										]
									},
									"id": 211,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 203,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:2"
									},
									"returnParameters": {
										"id": 206,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 205,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "793:14:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 204,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:2"
									},
									"scope": 212,
									"src": "742:99:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 213,
							"src": "608:235:2"
						}
					],
					"src": "86:758:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
					"exportedSymbols": {
						"Math": [
							1077
						]
					},
					"id": 1078,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 214,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "103:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 215,
								"nodeType": "StructuredDocumentation",
								"src": "128:73:3",
								"text": " @dev Standard math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 1077,
							"linearizedBaseContracts": [
								1077
							],
							"name": "Math",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Math.Rounding",
									"id": 219,
									"members": [
										{
											"id": 216,
											"name": "Down",
											"nodeType": "EnumValue",
											"src": "245:4:3"
										},
										{
											"id": 217,
											"name": "Up",
											"nodeType": "EnumValue",
											"src": "287:2:3"
										},
										{
											"id": 218,
											"name": "Zero",
											"nodeType": "EnumValue",
											"src": "318:4:3"
										}
									],
									"name": "Rounding",
									"nodeType": "EnumDefinition",
									"src": "221:122:3"
								},
								{
									"body": {
										"id": 236,
										"nodeType": "Block",
										"src": "480:37:3",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 231,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 229,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 222,
															"src": "497:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 230,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 224,
															"src": "501:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "497:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 233,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 224,
														"src": "509:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 234,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "497:13:3",
													"trueExpression": {
														"id": 232,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 222,
														"src": "505:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 228,
												"id": 235,
												"nodeType": "Return",
												"src": "490:20:3"
											}
										]
									},
									"documentation": {
										"id": 220,
										"nodeType": "StructuredDocumentation",
										"src": "349:59:3",
										"text": " @dev Returns the largest of two numbers."
									},
									"id": 237,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 225,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 222,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "426:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 221,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 224,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "437:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 223,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "437:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "425:22:3"
									},
									"returnParameters": {
										"id": 228,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 227,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "471:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 226,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "471:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "470:9:3"
									},
									"scope": 1077,
									"src": "413:104:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 254,
										"nodeType": "Block",
										"src": "655:37:3",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 249,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 247,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 240,
															"src": "672:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 248,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 242,
															"src": "676:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "672:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 251,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 242,
														"src": "684:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 252,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "672:13:3",
													"trueExpression": {
														"id": 250,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 240,
														"src": "680:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 246,
												"id": 253,
												"nodeType": "Return",
												"src": "665:20:3"
											}
										]
									},
									"documentation": {
										"id": 238,
										"nodeType": "StructuredDocumentation",
										"src": "523:60:3",
										"text": " @dev Returns the smallest of two numbers."
									},
									"id": 255,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 240,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 255,
												"src": "601:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 239,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "601:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 242,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 255,
												"src": "612:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 241,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "612:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "600:22:3"
									},
									"returnParameters": {
										"id": 246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 245,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 255,
												"src": "646:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 244,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "646:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "645:9:3"
									},
									"scope": 1077,
									"src": "588:104:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 277,
										"nodeType": "Block",
										"src": "876:82:3",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 275,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 267,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 265,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 258,
																	"src": "931:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 266,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 260,
																	"src": "935:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "931:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 268,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "930:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 274,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 271,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 269,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 258,
																		"src": "941:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "^",
																	"rightExpression": {
																		"id": 270,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 260,
																		"src": "945:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "941:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 272,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "940:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"hexValue": "32",
															"id": 273,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "950:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "940:11:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "930:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 264,
												"id": 276,
												"nodeType": "Return",
												"src": "923:28:3"
											}
										]
									},
									"documentation": {
										"id": 256,
										"nodeType": "StructuredDocumentation",
										"src": "698:102:3",
										"text": " @dev Returns the average of two numbers. The result is rounded towards\n zero."
									},
									"id": 278,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 261,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 258,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 278,
												"src": "822:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 257,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "822:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 260,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 278,
												"src": "833:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 259,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "833:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "821:22:3"
									},
									"returnParameters": {
										"id": 264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 278,
												"src": "867:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 262,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "867:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "866:9:3"
									},
									"scope": 1077,
									"src": "805:153:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 302,
										"nodeType": "Block",
										"src": "1228:123:3",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 290,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 288,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 281,
															"src": "1316:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 289,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1321:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1316:6:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 299,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 297,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 294,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 292,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 281,
																			"src": "1330:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 293,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1334:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "1330:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 295,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1329:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 296,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 283,
																"src": "1339:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1329:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 298,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1343:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "1329:15:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 300,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1316:28:3",
													"trueExpression": {
														"hexValue": "30",
														"id": 291,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1325:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 287,
												"id": 301,
												"nodeType": "Return",
												"src": "1309:35:3"
											}
										]
									},
									"documentation": {
										"id": 279,
										"nodeType": "StructuredDocumentation",
										"src": "964:188:3",
										"text": " @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."
									},
									"id": 303,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ceilDiv",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 284,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 281,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 303,
												"src": "1174:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 280,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1174:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 283,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 303,
												"src": "1185:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 282,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1185:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1173:22:3"
									},
									"returnParameters": {
										"id": 287,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 286,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 303,
												"src": "1219:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 285,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1219:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1218:9:3"
									},
									"scope": 1077,
									"src": "1157:194:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 424,
										"nodeType": "Block",
										"src": "1795:3797:3",
										"statements": [
											{
												"id": 423,
												"nodeType": "UncheckedBlock",
												"src": "1805:3781:3",
												"statements": [
													{
														"assignments": [
															316
														],
														"declarations": [
															{
																"constant": false,
																"id": 316,
																"mutability": "mutable",
																"name": "prod0",
																"nodeType": "VariableDeclaration",
																"scope": 423,
																"src": "2126:13:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 315,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2126:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 317,
														"nodeType": "VariableDeclarationStatement",
														"src": "2126:13:3"
													},
													{
														"assignments": [
															319
														],
														"declarations": [
															{
																"constant": false,
																"id": 319,
																"mutability": "mutable",
																"name": "prod1",
																"nodeType": "VariableDeclaration",
																"scope": 423,
																"src": "2198:13:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 318,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2198:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 320,
														"nodeType": "VariableDeclarationStatement",
														"src": "2198:13:3"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "2278:157:3",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2296:30:3",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "2313:1:3"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2316:1:3"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2323:1:3",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "2319:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2319:6:3"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nodeType": "YulIdentifier",
																			"src": "2306:6:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2306:20:3"
																	},
																	"variables": [
																		{
																			"name": "mm",
																			"nodeType": "YulTypedName",
																			"src": "2300:2:3",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2343:18:3",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "2356:1:3"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2359:1:3"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "2352:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2352:9:3"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "2343:5:3"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2378:43:3",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nodeType": "YulIdentifier",
																						"src": "2395:2:3"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "2399:5:3"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "2391:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2391:14:3"
																			},
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nodeType": "YulIdentifier",
																						"src": "2410:2:3"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "2414:5:3"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "2407:2:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2407:13:3"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2387:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2387:34:3"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nodeType": "YulIdentifier",
																			"src": "2378:5:3"
																		}
																	]
																}
															]
														},
														"evmVersion": "istanbul",
														"externalReferences": [
															{
																"declaration": 316,
																"isOffset": false,
																"isSlot": false,
																"src": "2343:5:3",
																"valueSize": 1
															},
															{
																"declaration": 316,
																"isOffset": false,
																"isSlot": false,
																"src": "2399:5:3",
																"valueSize": 1
															},
															{
																"declaration": 316,
																"isOffset": false,
																"isSlot": false,
																"src": "2414:5:3",
																"valueSize": 1
															},
															{
																"declaration": 319,
																"isOffset": false,
																"isSlot": false,
																"src": "2378:5:3",
																"valueSize": 1
															},
															{
																"declaration": 306,
																"isOffset": false,
																"isSlot": false,
																"src": "2313:1:3",
																"valueSize": 1
															},
															{
																"declaration": 306,
																"isOffset": false,
																"isSlot": false,
																"src": "2356:1:3",
																"valueSize": 1
															},
															{
																"declaration": 308,
																"isOffset": false,
																"isSlot": false,
																"src": "2316:1:3",
																"valueSize": 1
															},
															{
																"declaration": 308,
																"isOffset": false,
																"isSlot": false,
																"src": "2359:1:3",
																"valueSize": 1
															}
														],
														"id": 321,
														"nodeType": "InlineAssembly",
														"src": "2269:166:3"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 324,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 322,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 319,
																"src": "2516:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 323,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2525:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2516:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 330,
														"nodeType": "IfStatement",
														"src": "2512:75:3",
														"trueBody": {
															"id": 329,
															"nodeType": "Block",
															"src": "2528:59:3",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 327,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 325,
																			"name": "prod0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 316,
																			"src": "2553:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"id": 326,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 310,
																			"src": "2561:11:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "2553:19:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 314,
																	"id": 328,
																	"nodeType": "Return",
																	"src": "2546:26:3"
																}
															]
														}
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 334,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 332,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 310,
																		"src": "2697:11:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"id": 333,
																		"name": "prod1",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 319,
																		"src": "2711:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2697:19:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																],
																"id": 331,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2689:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																	"typeString": "function (bool) pure"
																}
															},
															"id": 335,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2689:28:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 336,
														"nodeType": "ExpressionStatement",
														"src": "2689:28:3"
													},
													{
														"assignments": [
															338
														],
														"declarations": [
															{
																"constant": false,
																"id": 338,
																"mutability": "mutable",
																"name": "remainder",
																"nodeType": "VariableDeclaration",
																"scope": 423,
																"src": "2973:17:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 337,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2973:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 339,
														"nodeType": "VariableDeclarationStatement",
														"src": "2973:17:3"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "3013:291:3",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "3082:38:3",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "3102:1:3"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "3105:1:3"
																			},
																			{
																				"name": "denominator",
																				"nodeType": "YulIdentifier",
																				"src": "3108:11:3"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nodeType": "YulIdentifier",
																			"src": "3095:6:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3095:25:3"
																	},
																	"variableNames": [
																		{
																			"name": "remainder",
																			"nodeType": "YulIdentifier",
																			"src": "3082:9:3"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3202:41:3",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod1",
																				"nodeType": "YulIdentifier",
																				"src": "3215:5:3"
																			},
																			{
																				"arguments": [
																					{
																						"name": "remainder",
																						"nodeType": "YulIdentifier",
																						"src": "3225:9:3"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "3236:5:3"
																					}
																				],
																				"functionName": {
																					"name": "gt",
																					"nodeType": "YulIdentifier",
																					"src": "3222:2:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3222:20:3"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3211:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3211:32:3"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nodeType": "YulIdentifier",
																			"src": "3202:5:3"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3260:30:3",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "3273:5:3"
																			},
																			{
																				"name": "remainder",
																				"nodeType": "YulIdentifier",
																				"src": "3280:9:3"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3269:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3269:21:3"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "3260:5:3"
																		}
																	]
																}
															]
														},
														"evmVersion": "istanbul",
														"externalReferences": [
															{
																"declaration": 310,
																"isOffset": false,
																"isSlot": false,
																"src": "3108:11:3",
																"valueSize": 1
															},
															{
																"declaration": 316,
																"isOffset": false,
																"isSlot": false,
																"src": "3236:5:3",
																"valueSize": 1
															},
															{
																"declaration": 316,
																"isOffset": false,
																"isSlot": false,
																"src": "3260:5:3",
																"valueSize": 1
															},
															{
																"declaration": 316,
																"isOffset": false,
																"isSlot": false,
																"src": "3273:5:3",
																"valueSize": 1
															},
															{
																"declaration": 319,
																"isOffset": false,
																"isSlot": false,
																"src": "3202:5:3",
																"valueSize": 1
															},
															{
																"declaration": 319,
																"isOffset": false,
																"isSlot": false,
																"src": "3215:5:3",
																"valueSize": 1
															},
															{
																"declaration": 338,
																"isOffset": false,
																"isSlot": false,
																"src": "3082:9:3",
																"valueSize": 1
															},
															{
																"declaration": 338,
																"isOffset": false,
																"isSlot": false,
																"src": "3225:9:3",
																"valueSize": 1
															},
															{
																"declaration": 338,
																"isOffset": false,
																"isSlot": false,
																"src": "3280:9:3",
																"valueSize": 1
															},
															{
																"declaration": 306,
																"isOffset": false,
																"isSlot": false,
																"src": "3102:1:3",
																"valueSize": 1
															},
															{
																"declaration": 308,
																"isOffset": false,
																"isSlot": false,
																"src": "3105:1:3",
																"valueSize": 1
															}
														],
														"id": 340,
														"nodeType": "InlineAssembly",
														"src": "3004:300:3"
													},
													{
														"assignments": [
															342
														],
														"declarations": [
															{
																"constant": false,
																"id": 342,
																"mutability": "mutable",
																"name": "twos",
																"nodeType": "VariableDeclaration",
																"scope": 423,
																"src": "3611:12:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 341,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "3611:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 350,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 349,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 343,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 310,
																"src": "3626:11:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 347,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 345,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "~",
																			"prefix": true,
																			"src": "3641:12:3",
																			"subExpression": {
																				"id": 344,
																				"name": "denominator",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 310,
																				"src": "3642:11:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 346,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3656:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "3641:16:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 348,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3640:18:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3626:32:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "3611:47:3"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "3681:362:3",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "3746:37:3",
																	"value": {
																		"arguments": [
																			{
																				"name": "denominator",
																				"nodeType": "YulIdentifier",
																				"src": "3765:11:3"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "3778:4:3"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "3761:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3761:22:3"
																	},
																	"variableNames": [
																		{
																			"name": "denominator",
																			"nodeType": "YulIdentifier",
																			"src": "3746:11:3"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3850:25:3",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "3863:5:3"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "3870:4:3"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "3859:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3859:16:3"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "3850:5:3"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3990:39:3",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4010:1:3",
																								"type": "",
																								"value": "0"
																							},
																							{
																								"name": "twos",
																								"nodeType": "YulIdentifier",
																								"src": "4013:4:3"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "4006:3:3"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4006:12:3"
																					},
																					{
																						"name": "twos",
																						"nodeType": "YulIdentifier",
																						"src": "4020:4:3"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "4002:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4002:23:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4027:1:3",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3998:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3998:31:3"
																	},
																	"variableNames": [
																		{
																			"name": "twos",
																			"nodeType": "YulIdentifier",
																			"src": "3990:4:3"
																		}
																	]
																}
															]
														},
														"evmVersion": "istanbul",
														"externalReferences": [
															{
																"declaration": 310,
																"isOffset": false,
																"isSlot": false,
																"src": "3746:11:3",
																"valueSize": 1
															},
															{
																"declaration": 310,
																"isOffset": false,
																"isSlot": false,
																"src": "3765:11:3",
																"valueSize": 1
															},
															{
																"declaration": 316,
																"isOffset": false,
																"isSlot": false,
																"src": "3850:5:3",
																"valueSize": 1
															},
															{
																"declaration": 316,
																"isOffset": false,
																"isSlot": false,
																"src": "3863:5:3",
																"valueSize": 1
															},
															{
																"declaration": 342,
																"isOffset": false,
																"isSlot": false,
																"src": "3778:4:3",
																"valueSize": 1
															},
															{
																"declaration": 342,
																"isOffset": false,
																"isSlot": false,
																"src": "3870:4:3",
																"valueSize": 1
															},
															{
																"declaration": 342,
																"isOffset": false,
																"isSlot": false,
																"src": "3990:4:3",
																"valueSize": 1
															},
															{
																"declaration": 342,
																"isOffset": false,
																"isSlot": false,
																"src": "4013:4:3",
																"valueSize": 1
															},
															{
																"declaration": 342,
																"isOffset": false,
																"isSlot": false,
																"src": "4020:4:3",
																"valueSize": 1
															}
														],
														"id": 351,
														"nodeType": "InlineAssembly",
														"src": "3672:371:3"
													},
													{
														"expression": {
															"id": 356,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 352,
																"name": "prod0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 316,
																"src": "4109:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "|=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 355,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 353,
																	"name": "prod1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 319,
																	"src": "4118:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 354,
																	"name": "twos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 342,
																	"src": "4126:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4118:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4109:21:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 357,
														"nodeType": "ExpressionStatement",
														"src": "4109:21:3"
													},
													{
														"assignments": [
															359
														],
														"declarations": [
															{
																"constant": false,
																"id": 359,
																"mutability": "mutable",
																"name": "inverse",
																"nodeType": "VariableDeclaration",
																"scope": 423,
																"src": "4448:15:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 358,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4448:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 366,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 365,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 362,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "33",
																			"id": 360,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "4467:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3_by_1",
																				"typeString": "int_const 3"
																			},
																			"value": "3"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 361,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 310,
																			"src": "4471:11:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4467:15:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 363,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "4466:17:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "^",
															"rightExpression": {
																"hexValue": "32",
																"id": 364,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4486:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "4466:21:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4448:39:3"
													},
													{
														"expression": {
															"id": 373,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 367,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 359,
																"src": "4704:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 372,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 368,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4715:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 371,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 369,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 310,
																		"src": "4719:11:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 370,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 359,
																		"src": "4733:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4719:21:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4715:25:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4704:36:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 374,
														"nodeType": "ExpressionStatement",
														"src": "4704:36:3"
													},
													{
														"expression": {
															"id": 381,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 375,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 359,
																"src": "4773:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 380,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 376,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4784:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 379,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 377,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 310,
																		"src": "4788:11:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 378,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 359,
																		"src": "4802:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4788:21:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4784:25:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4773:36:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 382,
														"nodeType": "ExpressionStatement",
														"src": "4773:36:3"
													},
													{
														"expression": {
															"id": 389,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 383,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 359,
																"src": "4843:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 388,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 384,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4854:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 387,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 385,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 310,
																		"src": "4858:11:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 386,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 359,
																		"src": "4872:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4858:21:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4854:25:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4843:36:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 390,
														"nodeType": "ExpressionStatement",
														"src": "4843:36:3"
													},
													{
														"expression": {
															"id": 397,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 391,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 359,
																"src": "4913:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 396,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 392,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4924:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 395,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 393,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 310,
																		"src": "4928:11:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 394,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 359,
																		"src": "4942:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4928:21:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4924:25:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4913:36:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 398,
														"nodeType": "ExpressionStatement",
														"src": "4913:36:3"
													},
													{
														"expression": {
															"id": 405,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 399,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 359,
																"src": "4983:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 404,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 400,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4994:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 403,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 401,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 310,
																		"src": "4998:11:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 402,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 359,
																		"src": "5012:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4998:21:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4994:25:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4983:36:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 406,
														"nodeType": "ExpressionStatement",
														"src": "4983:36:3"
													},
													{
														"expression": {
															"id": 413,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 407,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 359,
																"src": "5054:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 412,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 408,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5065:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 411,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 409,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 310,
																		"src": "5069:11:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 410,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 359,
																		"src": "5083:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5069:21:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5065:25:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5054:36:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 414,
														"nodeType": "ExpressionStatement",
														"src": "5054:36:3"
													},
													{
														"expression": {
															"id": 419,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 415,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 313,
																"src": "5524:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 418,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 416,
																	"name": "prod0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 316,
																	"src": "5533:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 417,
																	"name": "inverse",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 359,
																	"src": "5541:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5533:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5524:24:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 420,
														"nodeType": "ExpressionStatement",
														"src": "5524:24:3"
													},
													{
														"expression": {
															"id": 421,
															"name": "result",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 313,
															"src": "5569:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 314,
														"id": 422,
														"nodeType": "Return",
														"src": "5562:13:3"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 304,
										"nodeType": "StructuredDocumentation",
										"src": "1357:305:3",
										"text": " @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."
									},
									"id": 425,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 311,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 306,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 425,
												"src": "1692:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 305,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1692:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 308,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 425,
												"src": "1711:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 307,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1711:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 310,
												"mutability": "mutable",
												"name": "denominator",
												"nodeType": "VariableDeclaration",
												"scope": 425,
												"src": "1730:19:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 309,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1730:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1682:73:3"
									},
									"returnParameters": {
										"id": 314,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 313,
												"mutability": "mutable",
												"name": "result",
												"nodeType": "VariableDeclaration",
												"scope": 425,
												"src": "1779:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 312,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1779:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1778:16:3"
									},
									"scope": 1077,
									"src": "1667:3925:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 468,
										"nodeType": "Block",
										"src": "5872:189:3",
										"statements": [
											{
												"assignments": [
													441
												],
												"declarations": [
													{
														"constant": false,
														"id": 441,
														"mutability": "mutable",
														"name": "result",
														"nodeType": "VariableDeclaration",
														"scope": 468,
														"src": "5882:14:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 440,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5882:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 447,
												"initialValue": {
													"arguments": [
														{
															"id": 443,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 428,
															"src": "5906:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 444,
															"name": "y",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 430,
															"src": "5909:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 445,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 432,
															"src": "5912:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 442,
														"name": "mulDiv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															425,
															469
														],
														"referencedDeclaration": 425,
														"src": "5899:6:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 446,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5899:25:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5882:42:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 459,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_enum$_Rounding_$219",
															"typeString": "enum Math.Rounding"
														},
														"id": 451,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 448,
															"name": "rounding",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 435,
															"src": "5938:8:3",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$219",
																"typeString": "enum Math.Rounding"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 449,
																"name": "Rounding",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 219,
																"src": "5950:8:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$219_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 450,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "Up",
															"nodeType": "MemberAccess",
															"src": "5950:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$219",
																"typeString": "enum Math.Rounding"
															}
														},
														"src": "5938:23:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 458,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 453,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 428,
																	"src": "5972:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 454,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 430,
																	"src": "5975:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 455,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 432,
																	"src": "5978:11:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 452,
																"name": "mulmod",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967280,
																"src": "5965:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 456,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5965:25:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 457,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5993:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "5965:29:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "5938:56:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 465,
												"nodeType": "IfStatement",
												"src": "5934:98:3",
												"trueBody": {
													"id": 464,
													"nodeType": "Block",
													"src": "5996:36:3",
													"statements": [
														{
															"expression": {
																"id": 462,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 460,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 441,
																	"src": "6010:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 461,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6020:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "6010:11:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 463,
															"nodeType": "ExpressionStatement",
															"src": "6010:11:3"
														}
													]
												}
											},
											{
												"expression": {
													"id": 466,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 441,
													"src": "6048:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 439,
												"id": 467,
												"nodeType": "Return",
												"src": "6041:13:3"
											}
										]
									},
									"documentation": {
										"id": 426,
										"nodeType": "StructuredDocumentation",
										"src": "5598:121:3",
										"text": " @notice Calculates x * y / denominator with full precision, following the selected rounding direction."
									},
									"id": 469,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 436,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 428,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 469,
												"src": "5749:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 427,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5749:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 430,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 469,
												"src": "5768:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 429,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5768:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 432,
												"mutability": "mutable",
												"name": "denominator",
												"nodeType": "VariableDeclaration",
												"scope": 469,
												"src": "5787:19:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 431,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5787:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 435,
												"mutability": "mutable",
												"name": "rounding",
												"nodeType": "VariableDeclaration",
												"scope": 469,
												"src": "5816:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$219",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 434,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 433,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 219,
														"src": "5816:8:3"
													},
													"referencedDeclaration": 219,
													"src": "5816:8:3",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$219",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5739:100:3"
									},
									"returnParameters": {
										"id": 439,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 438,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 469,
												"src": "5863:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 437,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5863:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5862:9:3"
									},
									"scope": 1077,
									"src": "5724:337:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 580,
										"nodeType": "Block",
										"src": "6337:1585:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 479,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 477,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 472,
														"src": "6351:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 478,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6356:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6351:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 483,
												"nodeType": "IfStatement",
												"src": "6347:45:3",
												"trueBody": {
													"id": 482,
													"nodeType": "Block",
													"src": "6359:33:3",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 480,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6380:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 476,
															"id": 481,
															"nodeType": "Return",
															"src": "6373:8:3"
														}
													]
												}
											},
											{
												"assignments": [
													485
												],
												"declarations": [
													{
														"constant": false,
														"id": 485,
														"mutability": "mutable",
														"name": "result",
														"nodeType": "VariableDeclaration",
														"scope": 580,
														"src": "7071:14:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 484,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7071:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 494,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 493,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "31",
														"id": 486,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7088:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 491,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 488,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 472,
																			"src": "7099:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 487,
																		"name": "log2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			749,
																			785
																		],
																		"referencedDeclaration": 749,
																		"src": "7094:4:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) pure returns (uint256)"
																		}
																	},
																	"id": 489,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7094:7:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 490,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7105:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7094:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 492,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "7093:14:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7088:19:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7071:36:3"
											},
											{
												"id": 579,
												"nodeType": "UncheckedBlock",
												"src": "7508:408:3",
												"statements": [
													{
														"expression": {
															"id": 504,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 495,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 485,
																"src": "7532:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 503,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 500,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 496,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 485,
																				"src": "7542:6:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 499,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 497,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 472,
																					"src": "7551:1:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 498,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 485,
																					"src": "7555:6:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7551:10:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7542:19:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 501,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7541:21:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 502,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7566:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7541:26:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7532:35:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 505,
														"nodeType": "ExpressionStatement",
														"src": "7532:35:3"
													},
													{
														"expression": {
															"id": 515,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 506,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 485,
																"src": "7581:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 514,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 511,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 507,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 485,
																				"src": "7591:6:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 510,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 508,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 472,
																					"src": "7600:1:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 509,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 485,
																					"src": "7604:6:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7600:10:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7591:19:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 512,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7590:21:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 513,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7615:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7590:26:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7581:35:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 516,
														"nodeType": "ExpressionStatement",
														"src": "7581:35:3"
													},
													{
														"expression": {
															"id": 526,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 517,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 485,
																"src": "7630:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 525,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 522,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 518,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 485,
																				"src": "7640:6:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 521,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 519,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 472,
																					"src": "7649:1:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 520,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 485,
																					"src": "7653:6:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7649:10:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7640:19:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 523,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7639:21:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 524,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7664:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7639:26:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7630:35:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 527,
														"nodeType": "ExpressionStatement",
														"src": "7630:35:3"
													},
													{
														"expression": {
															"id": 537,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 528,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 485,
																"src": "7679:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 536,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 533,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 529,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 485,
																				"src": "7689:6:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 532,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 530,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 472,
																					"src": "7698:1:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 531,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 485,
																					"src": "7702:6:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7698:10:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7689:19:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 534,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7688:21:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 535,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7713:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7688:26:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7679:35:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 538,
														"nodeType": "ExpressionStatement",
														"src": "7679:35:3"
													},
													{
														"expression": {
															"id": 548,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 539,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 485,
																"src": "7728:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 547,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 544,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 540,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 485,
																				"src": "7738:6:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 543,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 541,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 472,
																					"src": "7747:1:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 542,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 485,
																					"src": "7751:6:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7747:10:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7738:19:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 545,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7737:21:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 546,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7762:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7737:26:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7728:35:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 549,
														"nodeType": "ExpressionStatement",
														"src": "7728:35:3"
													},
													{
														"expression": {
															"id": 559,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 550,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 485,
																"src": "7777:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 558,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 555,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 551,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 485,
																				"src": "7787:6:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 554,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 552,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 472,
																					"src": "7796:1:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 553,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 485,
																					"src": "7800:6:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7796:10:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7787:19:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 556,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7786:21:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 557,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7811:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7786:26:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7777:35:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 560,
														"nodeType": "ExpressionStatement",
														"src": "7777:35:3"
													},
													{
														"expression": {
															"id": 570,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 561,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 485,
																"src": "7826:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 569,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 566,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 562,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 485,
																				"src": "7836:6:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 565,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 563,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 472,
																					"src": "7845:1:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 564,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 485,
																					"src": "7849:6:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7845:10:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7836:19:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 567,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7835:21:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 568,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7860:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7835:26:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7826:35:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 571,
														"nodeType": "ExpressionStatement",
														"src": "7826:35:3"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 573,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 485,
																	"src": "7886:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 576,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 574,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 472,
																		"src": "7894:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 575,
																		"name": "result",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 485,
																		"src": "7898:6:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7894:10:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 572,
																"name": "min",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 255,
																"src": "7882:3:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 577,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7882:23:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 476,
														"id": 578,
														"nodeType": "Return",
														"src": "7875:30:3"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 470,
										"nodeType": "StructuredDocumentation",
										"src": "6067:208:3",
										"text": " @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."
									},
									"id": 581,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 473,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 472,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 581,
												"src": "6294:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 471,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6294:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6293:11:3"
									},
									"returnParameters": {
										"id": 476,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 475,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 581,
												"src": "6328:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 474,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6328:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6327:9:3"
									},
									"scope": 1077,
									"src": "6280:1642:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 616,
										"nodeType": "Block",
										"src": "8098:161:3",
										"statements": [
											{
												"id": 615,
												"nodeType": "UncheckedBlock",
												"src": "8108:145:3",
												"statements": [
													{
														"assignments": [
															593
														],
														"declarations": [
															{
																"constant": false,
																"id": 593,
																"mutability": "mutable",
																"name": "result",
																"nodeType": "VariableDeclaration",
																"scope": 615,
																"src": "8132:14:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 592,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "8132:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 597,
														"initialValue": {
															"arguments": [
																{
																	"id": 595,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 584,
																	"src": "8154:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 594,
																"name": "sqrt",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	581,
																	617
																],
																"referencedDeclaration": 581,
																"src": "8149:4:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 596,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8149:7:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "8132:24:3"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 613,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 598,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 593,
																"src": "8177:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 608,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$219",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 602,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 599,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 587,
																					"src": "8187:8:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$219",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 600,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 219,
																						"src": "8199:8:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$219_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 601,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"src": "8199:11:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$219",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "8187:23:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 607,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 605,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 603,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 593,
																						"src": "8214:6:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 604,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 593,
																						"src": "8223:6:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "8214:15:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 606,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 584,
																					"src": "8232:1:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8214:19:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "8187:46:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 610,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8240:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 611,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "8187:54:3",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 609,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8236:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 612,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8186:56:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "8177:65:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 591,
														"id": 614,
														"nodeType": "Return",
														"src": "8170:72:3"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 582,
										"nodeType": "StructuredDocumentation",
										"src": "7928:89:3",
										"text": " @notice Calculates sqrt(a), following the selected rounding direction."
									},
									"id": 617,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 588,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 584,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 617,
												"src": "8036:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 583,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8036:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 587,
												"mutability": "mutable",
												"name": "rounding",
												"nodeType": "VariableDeclaration",
												"scope": 617,
												"src": "8047:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$219",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 586,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 585,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 219,
														"src": "8047:8:3"
													},
													"referencedDeclaration": 219,
													"src": "8047:8:3",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$219",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8035:30:3"
									},
									"returnParameters": {
										"id": 591,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 590,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 617,
												"src": "8089:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 589,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8089:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8088:9:3"
									},
									"scope": 1077,
									"src": "8022:237:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 748,
										"nodeType": "Block",
										"src": "8444:922:3",
										"statements": [
											{
												"assignments": [
													626
												],
												"declarations": [
													{
														"constant": false,
														"id": 626,
														"mutability": "mutable",
														"name": "result",
														"nodeType": "VariableDeclaration",
														"scope": 748,
														"src": "8454:14:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 625,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8454:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 628,
												"initialValue": {
													"hexValue": "30",
													"id": 627,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "8471:1:3",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8454:18:3"
											},
											{
												"id": 745,
												"nodeType": "UncheckedBlock",
												"src": "8482:855:3",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 633,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 631,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 629,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 620,
																	"src": "8510:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 630,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8519:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "8510:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 632,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8525:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8510:16:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 643,
														"nodeType": "IfStatement",
														"src": "8506:99:3",
														"trueBody": {
															"id": 642,
															"nodeType": "Block",
															"src": "8528:77:3",
															"statements": [
																{
																	"expression": {
																		"id": 636,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 634,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 620,
																			"src": "8546:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 635,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8556:3:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "8546:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 637,
																	"nodeType": "ExpressionStatement",
																	"src": "8546:13:3"
																},
																{
																	"expression": {
																		"id": 640,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 638,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 626,
																			"src": "8577:6:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 639,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8587:3:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "8577:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 641,
																	"nodeType": "ExpressionStatement",
																	"src": "8577:13:3"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 648,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 646,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 644,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 620,
																	"src": "8622:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 645,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8631:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "8622:11:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 647,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8636:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8622:15:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 658,
														"nodeType": "IfStatement",
														"src": "8618:96:3",
														"trueBody": {
															"id": 657,
															"nodeType": "Block",
															"src": "8639:75:3",
															"statements": [
																{
																	"expression": {
																		"id": 651,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 649,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 620,
																			"src": "8657:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 650,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8667:2:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "8657:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 652,
																	"nodeType": "ExpressionStatement",
																	"src": "8657:12:3"
																},
																{
																	"expression": {
																		"id": 655,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 653,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 626,
																			"src": "8687:6:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 654,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8697:2:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "8687:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 656,
																	"nodeType": "ExpressionStatement",
																	"src": "8687:12:3"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 663,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 661,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 659,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 620,
																	"src": "8731:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 660,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8740:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "8731:11:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 662,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8745:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8731:15:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 673,
														"nodeType": "IfStatement",
														"src": "8727:96:3",
														"trueBody": {
															"id": 672,
															"nodeType": "Block",
															"src": "8748:75:3",
															"statements": [
																{
																	"expression": {
																		"id": 666,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 664,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 620,
																			"src": "8766:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 665,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8776:2:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "8766:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 667,
																	"nodeType": "ExpressionStatement",
																	"src": "8766:12:3"
																},
																{
																	"expression": {
																		"id": 670,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 668,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 626,
																			"src": "8796:6:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 669,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8806:2:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "8796:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 671,
																	"nodeType": "ExpressionStatement",
																	"src": "8796:12:3"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 678,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 676,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 674,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 620,
																	"src": "8840:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 675,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8849:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "8840:11:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 677,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8854:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8840:15:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 688,
														"nodeType": "IfStatement",
														"src": "8836:96:3",
														"trueBody": {
															"id": 687,
															"nodeType": "Block",
															"src": "8857:75:3",
															"statements": [
																{
																	"expression": {
																		"id": 681,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 679,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 620,
																			"src": "8875:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 680,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8885:2:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "8875:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 682,
																	"nodeType": "ExpressionStatement",
																	"src": "8875:12:3"
																},
																{
																	"expression": {
																		"id": 685,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 683,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 626,
																			"src": "8905:6:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 684,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8915:2:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "8905:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 686,
																	"nodeType": "ExpressionStatement",
																	"src": "8905:12:3"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 693,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 691,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 689,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 620,
																	"src": "8949:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 690,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8958:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "8949:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 692,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8962:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8949:14:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 703,
														"nodeType": "IfStatement",
														"src": "8945:93:3",
														"trueBody": {
															"id": 702,
															"nodeType": "Block",
															"src": "8965:73:3",
															"statements": [
																{
																	"expression": {
																		"id": 696,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 694,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 620,
																			"src": "8983:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 695,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8993:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "8983:11:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 697,
																	"nodeType": "ExpressionStatement",
																	"src": "8983:11:3"
																},
																{
																	"expression": {
																		"id": 700,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 698,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 626,
																			"src": "9012:6:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 699,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9022:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "9012:11:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 701,
																	"nodeType": "ExpressionStatement",
																	"src": "9012:11:3"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 708,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 706,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 704,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 620,
																	"src": "9055:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 705,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9064:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "9055:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 707,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9068:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9055:14:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 718,
														"nodeType": "IfStatement",
														"src": "9051:93:3",
														"trueBody": {
															"id": 717,
															"nodeType": "Block",
															"src": "9071:73:3",
															"statements": [
																{
																	"expression": {
																		"id": 711,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 709,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 620,
																			"src": "9089:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 710,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9099:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "9089:11:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 712,
																	"nodeType": "ExpressionStatement",
																	"src": "9089:11:3"
																},
																{
																	"expression": {
																		"id": 715,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 713,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 626,
																			"src": "9118:6:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 714,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9128:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "9118:11:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 716,
																	"nodeType": "ExpressionStatement",
																	"src": "9118:11:3"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 723,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 721,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 719,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 620,
																	"src": "9161:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 720,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9170:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "9161:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 722,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9174:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9161:14:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 733,
														"nodeType": "IfStatement",
														"src": "9157:93:3",
														"trueBody": {
															"id": 732,
															"nodeType": "Block",
															"src": "9177:73:3",
															"statements": [
																{
																	"expression": {
																		"id": 726,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 724,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 620,
																			"src": "9195:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 725,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9205:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "9195:11:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 727,
																	"nodeType": "ExpressionStatement",
																	"src": "9195:11:3"
																},
																{
																	"expression": {
																		"id": 730,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 728,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 626,
																			"src": "9224:6:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 729,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9234:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "9224:11:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 731,
																	"nodeType": "ExpressionStatement",
																	"src": "9224:11:3"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 738,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 736,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 734,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 620,
																	"src": "9267:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 735,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9276:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9267:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 737,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9280:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9267:14:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 744,
														"nodeType": "IfStatement",
														"src": "9263:64:3",
														"trueBody": {
															"id": 743,
															"nodeType": "Block",
															"src": "9283:44:3",
															"statements": [
																{
																	"expression": {
																		"id": 741,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 739,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 626,
																			"src": "9301:6:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 740,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9311:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "9301:11:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 742,
																	"nodeType": "ExpressionStatement",
																	"src": "9301:11:3"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 746,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 626,
													"src": "9353:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 624,
												"id": 747,
												"nodeType": "Return",
												"src": "9346:13:3"
											}
										]
									},
									"documentation": {
										"id": 618,
										"nodeType": "StructuredDocumentation",
										"src": "8265:113:3",
										"text": " @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."
									},
									"id": 749,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 621,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 620,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 749,
												"src": "8397:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 619,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8397:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8396:15:3"
									},
									"returnParameters": {
										"id": 624,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 623,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 749,
												"src": "8435:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 622,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8435:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8434:9:3"
									},
									"scope": 1077,
									"src": "8383:983:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 784,
										"nodeType": "Block",
										"src": "9599:165:3",
										"statements": [
											{
												"id": 783,
												"nodeType": "UncheckedBlock",
												"src": "9609:149:3",
												"statements": [
													{
														"assignments": [
															761
														],
														"declarations": [
															{
																"constant": false,
																"id": 761,
																"mutability": "mutable",
																"name": "result",
																"nodeType": "VariableDeclaration",
																"scope": 783,
																"src": "9633:14:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 760,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "9633:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 765,
														"initialValue": {
															"arguments": [
																{
																	"id": 763,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 752,
																	"src": "9655:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 762,
																"name": "log2",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	749,
																	785
																],
																"referencedDeclaration": 749,
																"src": "9650:4:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 764,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9650:11:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "9633:28:3"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 781,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 766,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 761,
																"src": "9682:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 776,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$219",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 770,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 767,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 755,
																					"src": "9692:8:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$219",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 768,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 219,
																						"src": "9704:8:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$219_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 769,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"src": "9704:11:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$219",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "9692:23:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 775,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 773,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 771,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "9719:1:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"id": 772,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 761,
																						"src": "9724:6:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "9719:11:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 774,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 752,
																					"src": "9733:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9719:19:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "9692:46:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 778,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9745:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 779,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "9692:54:3",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 777,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9741:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 780,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "9691:56:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "9682:65:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 759,
														"id": 782,
														"nodeType": "Return",
														"src": "9675:72:3"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 750,
										"nodeType": "StructuredDocumentation",
										"src": "9372:142:3",
										"text": " @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 785,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 756,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 752,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 785,
												"src": "9533:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 751,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9533:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 755,
												"mutability": "mutable",
												"name": "rounding",
												"nodeType": "VariableDeclaration",
												"scope": 785,
												"src": "9548:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$219",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 754,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 753,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 219,
														"src": "9548:8:3"
													},
													"referencedDeclaration": 219,
													"src": "9548:8:3",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$219",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9532:34:3"
									},
									"returnParameters": {
										"id": 759,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 758,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 785,
												"src": "9590:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 757,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9590:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9589:9:3"
									},
									"scope": 1077,
									"src": "9519:245:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 913,
										"nodeType": "Block",
										"src": "9951:828:3",
										"statements": [
											{
												"assignments": [
													794
												],
												"declarations": [
													{
														"constant": false,
														"id": 794,
														"mutability": "mutable",
														"name": "result",
														"nodeType": "VariableDeclaration",
														"scope": 913,
														"src": "9961:14:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 793,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9961:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 796,
												"initialValue": {
													"hexValue": "30",
													"id": 795,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "9978:1:3",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9961:18:3"
											},
											{
												"id": 910,
												"nodeType": "UncheckedBlock",
												"src": "9989:761:3",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 801,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 797,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 788,
																"src": "10017:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																},
																"id": 800,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 798,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10026:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 799,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10030:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "10026:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																}
															},
															"src": "10017:15:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 813,
														"nodeType": "IfStatement",
														"src": "10013:99:3",
														"trueBody": {
															"id": 812,
															"nodeType": "Block",
															"src": "10034:78:3",
															"statements": [
																{
																	"expression": {
																		"id": 806,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 802,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 788,
																			"src": "10052:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			},
																			"id": 805,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 803,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10061:2:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3634",
																				"id": 804,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10065:2:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_64_by_1",
																					"typeString": "int_const 64"
																				},
																				"value": "64"
																			},
																			"src": "10061:6:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			}
																		},
																		"src": "10052:15:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 807,
																	"nodeType": "ExpressionStatement",
																	"src": "10052:15:3"
																},
																{
																	"expression": {
																		"id": 810,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 808,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 794,
																			"src": "10085:6:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 809,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10095:2:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "10085:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 811,
																	"nodeType": "ExpressionStatement",
																	"src": "10085:12:3"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 818,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 814,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 788,
																"src": "10129:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																},
																"id": 817,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 815,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10138:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 816,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10142:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "10138:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																}
															},
															"src": "10129:15:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 830,
														"nodeType": "IfStatement",
														"src": "10125:99:3",
														"trueBody": {
															"id": 829,
															"nodeType": "Block",
															"src": "10146:78:3",
															"statements": [
																{
																	"expression": {
																		"id": 823,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 819,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 788,
																			"src": "10164:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			},
																			"id": 822,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 820,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10173:2:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 821,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10177:2:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "10173:6:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			}
																		},
																		"src": "10164:15:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 824,
																	"nodeType": "ExpressionStatement",
																	"src": "10164:15:3"
																},
																{
																	"expression": {
																		"id": 827,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 825,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 794,
																			"src": "10197:6:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 826,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10207:2:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "10197:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 828,
																	"nodeType": "ExpressionStatement",
																	"src": "10197:12:3"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 835,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 831,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 788,
																"src": "10241:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																},
																"id": 834,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 832,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10250:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 833,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10254:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "10250:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																}
															},
															"src": "10241:15:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 847,
														"nodeType": "IfStatement",
														"src": "10237:99:3",
														"trueBody": {
															"id": 846,
															"nodeType": "Block",
															"src": "10258:78:3",
															"statements": [
																{
																	"expression": {
																		"id": 840,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 836,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 788,
																			"src": "10276:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			},
																			"id": 839,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 837,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10285:2:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3136",
																				"id": 838,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10289:2:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_16_by_1",
																					"typeString": "int_const 16"
																				},
																				"value": "16"
																			},
																			"src": "10285:6:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			}
																		},
																		"src": "10276:15:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 841,
																	"nodeType": "ExpressionStatement",
																	"src": "10276:15:3"
																},
																{
																	"expression": {
																		"id": 844,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 842,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 794,
																			"src": "10309:6:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 843,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10319:2:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "10309:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 845,
																	"nodeType": "ExpressionStatement",
																	"src": "10309:12:3"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 852,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 848,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 788,
																"src": "10353:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																},
																"id": 851,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 849,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10362:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 850,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10366:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "10362:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																}
															},
															"src": "10353:14:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 864,
														"nodeType": "IfStatement",
														"src": "10349:96:3",
														"trueBody": {
															"id": 863,
															"nodeType": "Block",
															"src": "10369:76:3",
															"statements": [
																{
																	"expression": {
																		"id": 857,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 853,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 788,
																			"src": "10387:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			},
																			"id": 856,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 854,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10396:2:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "38",
																				"id": 855,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10400:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_8_by_1",
																					"typeString": "int_const 8"
																				},
																				"value": "8"
																			},
																			"src": "10396:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			}
																		},
																		"src": "10387:14:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 858,
																	"nodeType": "ExpressionStatement",
																	"src": "10387:14:3"
																},
																{
																	"expression": {
																		"id": 861,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 859,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 794,
																			"src": "10419:6:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 860,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10429:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "10419:11:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 862,
																	"nodeType": "ExpressionStatement",
																	"src": "10419:11:3"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 869,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 865,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 788,
																"src": "10462:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																},
																"id": 868,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 866,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10471:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 867,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10475:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "10471:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																}
															},
															"src": "10462:14:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 881,
														"nodeType": "IfStatement",
														"src": "10458:96:3",
														"trueBody": {
															"id": 880,
															"nodeType": "Block",
															"src": "10478:76:3",
															"statements": [
																{
																	"expression": {
																		"id": 874,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 870,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 788,
																			"src": "10496:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			},
																			"id": 873,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 871,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10505:2:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "34",
																				"id": 872,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10509:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_4_by_1",
																					"typeString": "int_const 4"
																				},
																				"value": "4"
																			},
																			"src": "10505:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			}
																		},
																		"src": "10496:14:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 875,
																	"nodeType": "ExpressionStatement",
																	"src": "10496:14:3"
																},
																{
																	"expression": {
																		"id": 878,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 876,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 794,
																			"src": "10528:6:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 877,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10538:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "10528:11:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 879,
																	"nodeType": "ExpressionStatement",
																	"src": "10528:11:3"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 886,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 882,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 788,
																"src": "10571:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"id": 885,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 883,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10580:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 884,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10584:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "10580:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																}
															},
															"src": "10571:14:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 898,
														"nodeType": "IfStatement",
														"src": "10567:96:3",
														"trueBody": {
															"id": 897,
															"nodeType": "Block",
															"src": "10587:76:3",
															"statements": [
																{
																	"expression": {
																		"id": 891,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 887,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 788,
																			"src": "10605:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			},
																			"id": 890,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 888,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10614:2:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "32",
																				"id": 889,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10618:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_2_by_1",
																					"typeString": "int_const 2"
																				},
																				"value": "2"
																			},
																			"src": "10614:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			}
																		},
																		"src": "10605:14:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 892,
																	"nodeType": "ExpressionStatement",
																	"src": "10605:14:3"
																},
																{
																	"expression": {
																		"id": 895,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 893,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 794,
																			"src": "10637:6:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 894,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10647:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "10637:11:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 896,
																	"nodeType": "ExpressionStatement",
																	"src": "10637:11:3"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 903,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 899,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 788,
																"src": "10680:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"id": 902,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 900,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10689:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 901,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10693:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10689:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																}
															},
															"src": "10680:14:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 909,
														"nodeType": "IfStatement",
														"src": "10676:64:3",
														"trueBody": {
															"id": 908,
															"nodeType": "Block",
															"src": "10696:44:3",
															"statements": [
																{
																	"expression": {
																		"id": 906,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 904,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 794,
																			"src": "10714:6:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 905,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10724:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "10714:11:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 907,
																	"nodeType": "ExpressionStatement",
																	"src": "10714:11:3"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 911,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 794,
													"src": "10766:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 792,
												"id": 912,
												"nodeType": "Return",
												"src": "10759:13:3"
											}
										]
									},
									"documentation": {
										"id": 786,
										"nodeType": "StructuredDocumentation",
										"src": "9770:114:3",
										"text": " @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."
									},
									"id": 914,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 789,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 788,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 914,
												"src": "9904:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 787,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9904:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9903:15:3"
									},
									"returnParameters": {
										"id": 792,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 791,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 914,
												"src": "9942:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 790,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9942:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9941:9:3"
									},
									"scope": 1077,
									"src": "9889:890:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 949,
										"nodeType": "Block",
										"src": "11014:165:3",
										"statements": [
											{
												"id": 948,
												"nodeType": "UncheckedBlock",
												"src": "11024:149:3",
												"statements": [
													{
														"assignments": [
															926
														],
														"declarations": [
															{
																"constant": false,
																"id": 926,
																"mutability": "mutable",
																"name": "result",
																"nodeType": "VariableDeclaration",
																"scope": 948,
																"src": "11048:14:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 925,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "11048:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 930,
														"initialValue": {
															"arguments": [
																{
																	"id": 928,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 917,
																	"src": "11071:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 927,
																"name": "log10",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	914,
																	950
																],
																"referencedDeclaration": 914,
																"src": "11065:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 929,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11065:12:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "11048:29:3"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 946,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 931,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 926,
																"src": "11098:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 941,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$219",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 935,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 932,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 920,
																					"src": "11108:8:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$219",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 933,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 219,
																						"src": "11120:8:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$219_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 934,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"src": "11120:11:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$219",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "11108:23:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 940,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 938,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3130",
																						"id": 936,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "11135:2:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_10_by_1",
																							"typeString": "int_const 10"
																						},
																						"value": "10"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "**",
																					"rightExpression": {
																						"id": 937,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 926,
																						"src": "11139:6:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "11135:10:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 939,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 917,
																					"src": "11148:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11135:18:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "11108:45:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 943,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11160:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 944,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "11108:53:3",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 942,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11156:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 945,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "11107:55:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "11098:64:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 924,
														"id": 947,
														"nodeType": "Return",
														"src": "11091:71:3"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 915,
										"nodeType": "StructuredDocumentation",
										"src": "10785:143:3",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 950,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 921,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 917,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 950,
												"src": "10948:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 916,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10948:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 920,
												"mutability": "mutable",
												"name": "rounding",
												"nodeType": "VariableDeclaration",
												"scope": 950,
												"src": "10963:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$219",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 919,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 918,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 219,
														"src": "10963:8:3"
													},
													"referencedDeclaration": 219,
													"src": "10963:8:3",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$219",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10947:34:3"
									},
									"returnParameters": {
										"id": 924,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 923,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 950,
												"src": "11005:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 922,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11005:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11004:9:3"
									},
									"scope": 1077,
									"src": "10933:246:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1036,
										"nodeType": "Block",
										"src": "11493:600:3",
										"statements": [
											{
												"assignments": [
													959
												],
												"declarations": [
													{
														"constant": false,
														"id": 959,
														"mutability": "mutable",
														"name": "result",
														"nodeType": "VariableDeclaration",
														"scope": 1036,
														"src": "11503:14:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 958,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11503:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 961,
												"initialValue": {
													"hexValue": "30",
													"id": 960,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "11520:1:3",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11503:18:3"
											},
											{
												"id": 1033,
												"nodeType": "UncheckedBlock",
												"src": "11531:533:3",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 966,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 964,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 962,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 953,
																	"src": "11559:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 963,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11568:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "11559:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 965,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11574:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11559:16:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 976,
														"nodeType": "IfStatement",
														"src": "11555:98:3",
														"trueBody": {
															"id": 975,
															"nodeType": "Block",
															"src": "11577:76:3",
															"statements": [
																{
																	"expression": {
																		"id": 969,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 967,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 953,
																			"src": "11595:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 968,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11605:3:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "11595:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 970,
																	"nodeType": "ExpressionStatement",
																	"src": "11595:13:3"
																},
																{
																	"expression": {
																		"id": 973,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 971,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 959,
																			"src": "11626:6:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 972,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11636:2:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11626:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 974,
																	"nodeType": "ExpressionStatement",
																	"src": "11626:12:3"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 981,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 979,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 977,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 953,
																	"src": "11670:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 978,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11679:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "11670:11:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 980,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11684:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11670:15:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 991,
														"nodeType": "IfStatement",
														"src": "11666:95:3",
														"trueBody": {
															"id": 990,
															"nodeType": "Block",
															"src": "11687:74:3",
															"statements": [
																{
																	"expression": {
																		"id": 984,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 982,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 953,
																			"src": "11705:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 983,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11715:2:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "11705:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 985,
																	"nodeType": "ExpressionStatement",
																	"src": "11705:12:3"
																},
																{
																	"expression": {
																		"id": 988,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 986,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 959,
																			"src": "11735:6:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 987,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11745:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11735:11:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 989,
																	"nodeType": "ExpressionStatement",
																	"src": "11735:11:3"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 996,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 994,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 992,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 953,
																	"src": "11778:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 993,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11787:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "11778:11:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 995,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11792:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11778:15:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1006,
														"nodeType": "IfStatement",
														"src": "11774:95:3",
														"trueBody": {
															"id": 1005,
															"nodeType": "Block",
															"src": "11795:74:3",
															"statements": [
																{
																	"expression": {
																		"id": 999,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 997,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 953,
																			"src": "11813:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 998,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11823:2:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11813:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1000,
																	"nodeType": "ExpressionStatement",
																	"src": "11813:12:3"
																},
																{
																	"expression": {
																		"id": 1003,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1001,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 959,
																			"src": "11843:6:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 1002,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11853:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11843:11:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1004,
																	"nodeType": "ExpressionStatement",
																	"src": "11843:11:3"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1011,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1009,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1007,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 953,
																	"src": "11886:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 1008,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11895:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "11886:11:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1010,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11900:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11886:15:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1021,
														"nodeType": "IfStatement",
														"src": "11882:95:3",
														"trueBody": {
															"id": 1020,
															"nodeType": "Block",
															"src": "11903:74:3",
															"statements": [
																{
																	"expression": {
																		"id": 1014,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1012,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 953,
																			"src": "11921:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 1013,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11931:2:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11921:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1015,
																	"nodeType": "ExpressionStatement",
																	"src": "11921:12:3"
																},
																{
																	"expression": {
																		"id": 1018,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1016,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 959,
																			"src": "11951:6:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 1017,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11961:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11951:11:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1019,
																	"nodeType": "ExpressionStatement",
																	"src": "11951:11:3"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1026,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1024,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1022,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 953,
																	"src": "11994:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 1023,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12003:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "11994:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1025,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12007:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11994:14:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1032,
														"nodeType": "IfStatement",
														"src": "11990:64:3",
														"trueBody": {
															"id": 1031,
															"nodeType": "Block",
															"src": "12010:44:3",
															"statements": [
																{
																	"expression": {
																		"id": 1029,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1027,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 959,
																			"src": "12028:6:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 1028,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12038:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "12028:11:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1030,
																	"nodeType": "ExpressionStatement",
																	"src": "12028:11:3"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 1034,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 959,
													"src": "12080:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 957,
												"id": 1035,
												"nodeType": "Return",
												"src": "12073:13:3"
											}
										]
									},
									"documentation": {
										"id": 951,
										"nodeType": "StructuredDocumentation",
										"src": "11185:240:3",
										"text": " @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."
									},
									"id": 1037,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 954,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 953,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 1037,
												"src": "11446:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 952,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11446:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11445:15:3"
									},
									"returnParameters": {
										"id": 957,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 956,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1037,
												"src": "11484:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 955,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11484:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11483:9:3"
									},
									"scope": 1077,
									"src": "11430:663:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1075,
										"nodeType": "Block",
										"src": "12329:173:3",
										"statements": [
											{
												"id": 1074,
												"nodeType": "UncheckedBlock",
												"src": "12339:157:3",
												"statements": [
													{
														"assignments": [
															1049
														],
														"declarations": [
															{
																"constant": false,
																"id": 1049,
																"mutability": "mutable",
																"name": "result",
																"nodeType": "VariableDeclaration",
																"scope": 1074,
																"src": "12363:14:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1048,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "12363:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1053,
														"initialValue": {
															"arguments": [
																{
																	"id": 1051,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1040,
																	"src": "12387:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1050,
																"name": "log256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1037,
																	1076
																],
																"referencedDeclaration": 1037,
																"src": "12380:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 1052,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12380:13:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "12363:30:3"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1072,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1054,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1049,
																"src": "12414:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 1067,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$219",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 1058,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1055,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1043,
																					"src": "12424:8:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$219",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 1056,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 219,
																						"src": "12436:8:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$219_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 1057,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"src": "12436:11:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$219",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "12424:23:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1066,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1064,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 1059,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "12451:1:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1062,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 1060,
																									"name": "result",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1049,
																									"src": "12457:6:3",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "*",
																								"rightExpression": {
																									"hexValue": "38",
																									"id": 1061,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "12466:1:3",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_8_by_1",
																										"typeString": "int_const 8"
																									},
																									"value": "8"
																								},
																								"src": "12457:10:3",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 1063,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "12456:12:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "12451:17:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 1065,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1040,
																					"src": "12471:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "12451:25:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "12424:52:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 1069,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12483:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 1070,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "12424:60:3",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 1068,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12479:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 1071,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "12423:62:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "12414:71:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1047,
														"id": 1073,
														"nodeType": "Return",
														"src": "12407:78:3"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1038,
										"nodeType": "StructuredDocumentation",
										"src": "12099:143:3",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 1076,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1044,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1040,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 1076,
												"src": "12263:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1039,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12263:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1043,
												"mutability": "mutable",
												"name": "rounding",
												"nodeType": "VariableDeclaration",
												"scope": 1076,
												"src": "12278:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$219",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 1042,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1041,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 219,
														"src": "12278:8:3"
													},
													"referencedDeclaration": 219,
													"src": "12278:8:3",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$219",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12262:34:3"
									},
									"returnParameters": {
										"id": 1047,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1046,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1076,
												"src": "12320:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1045,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12320:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12319:9:3"
									},
									"scope": 1077,
									"src": "12247:255:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1078,
							"src": "202:12302:3"
						}
					],
					"src": "103:12402:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							1389
						]
					},
					"id": 1390,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1079,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "107:23:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1080,
								"nodeType": "StructuredDocumentation",
								"src": "285:196:4",
								"text": " @dev Wrappers over Solidity's arithmetic operations.\n NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n now has built in overflow checking."
							},
							"fullyImplemented": true,
							"id": 1389,
							"linearizedBaseContracts": [
								1389
							],
							"name": "SafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1111,
										"nodeType": "Block",
										"src": "717:140:4",
										"statements": [
											{
												"id": 1110,
												"nodeType": "UncheckedBlock",
												"src": "727:124:4",
												"statements": [
													{
														"assignments": [
															1093
														],
														"declarations": [
															{
																"constant": false,
																"id": 1093,
																"mutability": "mutable",
																"name": "c",
																"nodeType": "VariableDeclaration",
																"scope": 1110,
																"src": "751:9:4",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1092,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "751:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1097,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1096,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1094,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1083,
																"src": "763:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 1095,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1085,
																"src": "767:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "763:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "751:17:4"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1100,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1098,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1093,
																"src": "786:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 1099,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1083,
																"src": "790:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "786:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1105,
														"nodeType": "IfStatement",
														"src": "782:28:4",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 1101,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "801:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 1102,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "808:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1103,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "800:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1091,
															"id": 1104,
															"nodeType": "Return",
															"src": "793:17:4"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 1106,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "832:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 1107,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1093,
																	"src": "838:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1108,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "831:9:4",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 1091,
														"id": 1109,
														"nodeType": "Return",
														"src": "824:16:4"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1081,
										"nodeType": "StructuredDocumentation",
										"src": "505:131:4",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 1112,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1086,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1083,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1112,
												"src": "657:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1082,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1085,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1112,
												"src": "668:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1084,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "656:22:4"
									},
									"returnParameters": {
										"id": 1091,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1088,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1112,
												"src": "702:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1087,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "702:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1090,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1112,
												"src": "708:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1089,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "708:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "701:15:4"
									},
									"scope": 1389,
									"src": "641:216:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1139,
										"nodeType": "Block",
										"src": "1078:113:4",
										"statements": [
											{
												"id": 1138,
												"nodeType": "UncheckedBlock",
												"src": "1088:97:4",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1126,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1124,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1117,
																"src": "1116:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 1125,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1115,
																"src": "1120:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1116:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1131,
														"nodeType": "IfStatement",
														"src": "1112:28:4",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 1127,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1131:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 1128,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1138:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1129,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1130:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1123,
															"id": 1130,
															"nodeType": "Return",
															"src": "1123:17:4"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 1132,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1162:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1135,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1133,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1115,
																		"src": "1168:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 1134,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1117,
																		"src": "1172:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1168:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1136,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1161:13:4",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 1123,
														"id": 1137,
														"nodeType": "Return",
														"src": "1154:20:4"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1113,
										"nodeType": "StructuredDocumentation",
										"src": "863:134:4",
										"text": " @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 1140,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1118,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1115,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1140,
												"src": "1018:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1114,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1018:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1117,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1140,
												"src": "1029:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1116,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1029:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1017:22:4"
									},
									"returnParameters": {
										"id": 1123,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1120,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1140,
												"src": "1063:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1119,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1063:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1122,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1140,
												"src": "1069:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1121,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1069:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1062:15:4"
									},
									"scope": 1389,
									"src": "1002:189:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1181,
										"nodeType": "Block",
										"src": "1415:417:4",
										"statements": [
											{
												"id": 1180,
												"nodeType": "UncheckedBlock",
												"src": "1425:401:4",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1154,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1152,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1143,
																"src": "1683:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1153,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1688:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1683:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1159,
														"nodeType": "IfStatement",
														"src": "1679:28:4",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 1155,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1699:4:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 1156,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1705:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1157,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1698:9:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1151,
															"id": 1158,
															"nodeType": "Return",
															"src": "1691:16:4"
														}
													},
													{
														"assignments": [
															1161
														],
														"declarations": [
															{
																"constant": false,
																"id": 1161,
																"mutability": "mutable",
																"name": "c",
																"nodeType": "VariableDeclaration",
																"scope": 1180,
																"src": "1721:9:4",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1160,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1721:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1165,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1164,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1162,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1143,
																"src": "1733:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1163,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1145,
																"src": "1737:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1733:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1721:17:4"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1170,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1168,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1166,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1161,
																	"src": "1756:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 1167,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1143,
																	"src": "1760:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1756:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 1169,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1145,
																"src": "1765:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1756:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1175,
														"nodeType": "IfStatement",
														"src": "1752:33:4",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 1171,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1776:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 1172,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1783:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1173,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1775:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1151,
															"id": 1174,
															"nodeType": "Return",
															"src": "1768:17:4"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 1176,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1807:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 1177,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1161,
																	"src": "1813:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1178,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1806:9:4",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 1151,
														"id": 1179,
														"nodeType": "Return",
														"src": "1799:16:4"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1141,
										"nodeType": "StructuredDocumentation",
										"src": "1197:137:4",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 1182,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1143,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1182,
												"src": "1355:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1142,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1355:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1145,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1182,
												"src": "1366:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1144,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1366:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1354:22:4"
									},
									"returnParameters": {
										"id": 1151,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1148,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1182,
												"src": "1400:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1147,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1400:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1150,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1182,
												"src": "1406:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1149,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1406:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1399:15:4"
									},
									"scope": 1389,
									"src": "1339:493:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1209,
										"nodeType": "Block",
										"src": "2057:114:4",
										"statements": [
											{
												"id": 1208,
												"nodeType": "UncheckedBlock",
												"src": "2067:98:4",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1196,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1194,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1187,
																"src": "2095:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1195,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2100:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2095:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1201,
														"nodeType": "IfStatement",
														"src": "2091:29:4",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 1197,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2111:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 1198,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2118:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1199,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2110:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1193,
															"id": 1200,
															"nodeType": "Return",
															"src": "2103:17:4"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 1202,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2142:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1205,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1203,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1185,
																		"src": "2148:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 1204,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1187,
																		"src": "2152:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2148:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1206,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2141:13:4",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 1193,
														"id": 1207,
														"nodeType": "Return",
														"src": "2134:20:4"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1183,
										"nodeType": "StructuredDocumentation",
										"src": "1838:138:4",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 1210,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1185,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1210,
												"src": "1997:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1184,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1997:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1187,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1210,
												"src": "2008:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1186,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2008:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1996:22:4"
									},
									"returnParameters": {
										"id": 1193,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1190,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1210,
												"src": "2042:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1189,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2042:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1192,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1210,
												"src": "2048:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1191,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2048:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2041:15:4"
									},
									"scope": 1389,
									"src": "1981:190:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1237,
										"nodeType": "Block",
										"src": "2406:114:4",
										"statements": [
											{
												"id": 1236,
												"nodeType": "UncheckedBlock",
												"src": "2416:98:4",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1224,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1222,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1215,
																"src": "2444:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1223,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2449:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2444:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1229,
														"nodeType": "IfStatement",
														"src": "2440:29:4",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 1225,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2460:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 1226,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2467:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1227,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2459:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1221,
															"id": 1228,
															"nodeType": "Return",
															"src": "2452:17:4"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 1230,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2491:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1233,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1231,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1213,
																		"src": "2497:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 1232,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1215,
																		"src": "2501:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2497:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1234,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2490:13:4",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 1221,
														"id": 1235,
														"nodeType": "Return",
														"src": "2483:20:4"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1211,
										"nodeType": "StructuredDocumentation",
										"src": "2177:148:4",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 1238,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1216,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1213,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1238,
												"src": "2346:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1212,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2346:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1215,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1238,
												"src": "2357:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1214,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2357:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2345:22:4"
									},
									"returnParameters": {
										"id": 1221,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1218,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1238,
												"src": "2391:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1217,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2391:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1220,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1238,
												"src": "2397:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1219,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2397:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2390:15:4"
									},
									"scope": 1389,
									"src": "2330:190:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1252,
										"nodeType": "Block",
										"src": "2822:29:4",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1250,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1248,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1241,
														"src": "2839:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 1249,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1243,
														"src": "2843:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2839:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1247,
												"id": 1251,
												"nodeType": "Return",
												"src": "2832:12:4"
											}
										]
									},
									"documentation": {
										"id": 1239,
										"nodeType": "StructuredDocumentation",
										"src": "2526:224:4",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 1253,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1244,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1241,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1253,
												"src": "2768:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1240,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2768:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1243,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1253,
												"src": "2779:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1242,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2779:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2767:22:4"
									},
									"returnParameters": {
										"id": 1247,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1246,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1253,
												"src": "2813:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1245,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2813:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2812:9:4"
									},
									"scope": 1389,
									"src": "2755:96:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1267,
										"nodeType": "Block",
										"src": "3189:29:4",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1265,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1263,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1256,
														"src": "3206:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 1264,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1258,
														"src": "3210:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3206:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1262,
												"id": 1266,
												"nodeType": "Return",
												"src": "3199:12:4"
											}
										]
									},
									"documentation": {
										"id": 1254,
										"nodeType": "StructuredDocumentation",
										"src": "2857:260:4",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 1268,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1259,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1256,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1268,
												"src": "3135:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1255,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3135:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1258,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1268,
												"src": "3146:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1257,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3146:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3134:22:4"
									},
									"returnParameters": {
										"id": 1262,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1261,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1268,
												"src": "3180:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1260,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3180:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3179:9:4"
									},
									"scope": 1389,
									"src": "3122:96:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1282,
										"nodeType": "Block",
										"src": "3532:29:4",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1280,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1278,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1271,
														"src": "3549:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 1279,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1273,
														"src": "3553:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3549:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1277,
												"id": 1281,
												"nodeType": "Return",
												"src": "3542:12:4"
											}
										]
									},
									"documentation": {
										"id": 1269,
										"nodeType": "StructuredDocumentation",
										"src": "3224:236:4",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 1283,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1274,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1271,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1283,
												"src": "3478:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1270,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3478:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1273,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1283,
												"src": "3489:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1272,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3489:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3477:22:4"
									},
									"returnParameters": {
										"id": 1277,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1276,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1283,
												"src": "3523:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1275,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3523:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3522:9:4"
									},
									"scope": 1389,
									"src": "3465:96:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1297,
										"nodeType": "Block",
										"src": "3917:29:4",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1295,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1293,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1286,
														"src": "3934:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 1294,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1288,
														"src": "3938:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3934:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1292,
												"id": 1296,
												"nodeType": "Return",
												"src": "3927:12:4"
											}
										]
									},
									"documentation": {
										"id": 1284,
										"nodeType": "StructuredDocumentation",
										"src": "3567:278:4",
										"text": " @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1298,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1289,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1286,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1298,
												"src": "3863:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1285,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3863:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1288,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1298,
												"src": "3874:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1287,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3874:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3862:22:4"
									},
									"returnParameters": {
										"id": 1292,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1291,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1298,
												"src": "3908:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1290,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3908:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3907:9:4"
									},
									"scope": 1389,
									"src": "3850:96:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1312,
										"nodeType": "Block",
										"src": "4466:29:4",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1310,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1308,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1301,
														"src": "4483:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 1309,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1303,
														"src": "4487:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4483:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1307,
												"id": 1311,
												"nodeType": "Return",
												"src": "4476:12:4"
											}
										]
									},
									"documentation": {
										"id": 1299,
										"nodeType": "StructuredDocumentation",
										"src": "3952:442:4",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1313,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1304,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1301,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1313,
												"src": "4412:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1300,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4412:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1303,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1313,
												"src": "4423:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1302,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4423:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4411:22:4"
									},
									"returnParameters": {
										"id": 1307,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1306,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1313,
												"src": "4457:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1305,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4457:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4456:9:4"
									},
									"scope": 1389,
									"src": "4399:96:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1337,
										"nodeType": "Block",
										"src": "5084:106:4",
										"statements": [
											{
												"id": 1336,
												"nodeType": "UncheckedBlock",
												"src": "5094:90:4",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1328,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1326,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1318,
																		"src": "5126:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<=",
																	"rightExpression": {
																		"id": 1327,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1316,
																		"src": "5131:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5126:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 1329,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1320,
																	"src": "5134:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1325,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5118:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 1330,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5118:29:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1331,
														"nodeType": "ExpressionStatement",
														"src": "5118:29:4"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1334,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1332,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1316,
																"src": "5168:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 1333,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1318,
																"src": "5172:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5168:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1324,
														"id": 1335,
														"nodeType": "Return",
														"src": "5161:12:4"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1314,
										"nodeType": "StructuredDocumentation",
										"src": "4501:453:4",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 1338,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1321,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1316,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1338,
												"src": "4981:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1315,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4981:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1318,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1338,
												"src": "5000:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1317,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5000:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1320,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 1338,
												"src": "5019:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1319,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5019:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4971:80:4"
									},
									"returnParameters": {
										"id": 1324,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1323,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1338,
												"src": "5075:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1322,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5075:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5074:9:4"
									},
									"scope": 1389,
									"src": "4959:231:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1362,
										"nodeType": "Block",
										"src": "5799:105:4",
										"statements": [
											{
												"id": 1361,
												"nodeType": "UncheckedBlock",
												"src": "5809:89:4",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1353,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1351,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1343,
																		"src": "5841:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 1352,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5845:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "5841:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 1354,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1345,
																	"src": "5848:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1350,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5833:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 1355,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5833:28:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1356,
														"nodeType": "ExpressionStatement",
														"src": "5833:28:4"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1359,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1357,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1341,
																"src": "5882:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 1358,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1343,
																"src": "5886:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5882:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1349,
														"id": 1360,
														"nodeType": "Return",
														"src": "5875:12:4"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1339,
										"nodeType": "StructuredDocumentation",
										"src": "5196:473:4",
										"text": " @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1363,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1346,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1341,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1363,
												"src": "5696:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1340,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5696:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1343,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1363,
												"src": "5715:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1342,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5715:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1345,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 1363,
												"src": "5734:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1344,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5734:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5686:80:4"
									},
									"returnParameters": {
										"id": 1349,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1348,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1363,
												"src": "5790:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1347,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5790:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5789:9:4"
									},
									"scope": 1389,
									"src": "5674:230:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1387,
										"nodeType": "Block",
										"src": "6675:105:4",
										"statements": [
											{
												"id": 1386,
												"nodeType": "UncheckedBlock",
												"src": "6685:89:4",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1378,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1376,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1368,
																		"src": "6717:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 1377,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6721:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "6717:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 1379,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1370,
																	"src": "6724:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1375,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "6709:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 1380,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6709:28:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1381,
														"nodeType": "ExpressionStatement",
														"src": "6709:28:4"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1384,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1382,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1366,
																"src": "6758:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"id": 1383,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1368,
																"src": "6762:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6758:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1374,
														"id": 1385,
														"nodeType": "Return",
														"src": "6751:12:4"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1364,
										"nodeType": "StructuredDocumentation",
										"src": "5910:635:4",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1388,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1371,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1366,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1388,
												"src": "6572:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1365,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6572:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1368,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1388,
												"src": "6591:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1367,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6591:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1370,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 1388,
												"src": "6610:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1369,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6610:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6562:80:4"
									},
									"returnParameters": {
										"id": 1374,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1373,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1388,
												"src": "6666:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1372,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6666:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6665:9:4"
									},
									"scope": 1389,
									"src": "6550:230:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1390,
							"src": "482:6300:4"
						}
					],
					"src": "107:6676:4"
				},
				"id": 4
			},
			"contracts/uniV2Pool.sol": {
				"ast": {
					"absolutePath": "contracts/uniV2Pool.sol",
					"exportedSymbols": {
						"Context": [
							212
						],
						"IERC20": [
							190
						],
						"Math": [
							1077
						],
						"Ownable": [
							112
						],
						"SafeMath": [
							1389
						],
						"Univ2Protocal": [
							1726
						]
					},
					"id": 1727,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1391,
							"literals": [
								"solidity",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:22:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 1392,
							"nodeType": "ImportDirective",
							"scope": 1727,
							"sourceUnit": 113,
							"src": "56:52:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 1393,
							"nodeType": "ImportDirective",
							"scope": 1727,
							"sourceUnit": 191,
							"src": "109:56:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
							"file": "@openzeppelin/contracts/utils/math/Math.sol",
							"id": 1394,
							"nodeType": "ImportDirective",
							"scope": 1727,
							"sourceUnit": 1078,
							"src": "166:53:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/SafeMath.sol",
							"file": "@openzeppelin/contracts/utils/math/SafeMath.sol",
							"id": 1395,
							"nodeType": "ImportDirective",
							"scope": 1727,
							"sourceUnit": 1390,
							"src": "220:57:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1396,
										"name": "Ownable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 112,
										"src": "305:7:5"
									},
									"id": 1397,
									"nodeType": "InheritanceSpecifier",
									"src": "305:7:5"
								}
							],
							"contractDependencies": [
								112,
								212
							],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1726,
							"linearizedBaseContracts": [
								1726,
								112,
								212
							],
							"name": "Univ2Protocal",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 1399,
									"mutability": "mutable",
									"name": "aAmount",
									"nodeType": "VariableDeclaration",
									"scope": 1726,
									"src": "319:23:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1398,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "319:7:5",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1401,
									"mutability": "mutable",
									"name": "bAmount",
									"nodeType": "VariableDeclaration",
									"scope": 1726,
									"src": "349:23:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1400,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "349:7:5",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1403,
									"mutability": "mutable",
									"name": "coinA",
									"nodeType": "VariableDeclaration",
									"scope": 1726,
									"src": "379:21:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1402,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "379:7:5",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1405,
									"mutability": "mutable",
									"name": "coinB",
									"nodeType": "VariableDeclaration",
									"scope": 1726,
									"src": "407:21:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1404,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "407:7:5",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1422,
										"nodeType": "Block",
										"src": "498:47:5",
										"statements": [
											{
												"expression": {
													"id": 1416,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1414,
														"name": "coinA",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1403,
														"src": "508:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1415,
														"name": "_a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1407,
														"src": "516:2:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "508:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1417,
												"nodeType": "ExpressionStatement",
												"src": "508:10:5"
											},
											{
												"expression": {
													"id": 1420,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1418,
														"name": "coinB",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1405,
														"src": "528:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1419,
														"name": "_b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1409,
														"src": "536:2:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "528:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1421,
												"nodeType": "ExpressionStatement",
												"src": "528:10:5"
											}
										]
									},
									"functionSelector": "6f9632da",
									"id": 1423,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1412,
											"modifierName": {
												"id": 1411,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "489:9:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "489:9:5"
										}
									],
									"name": "setCoinPair",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1410,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1407,
												"mutability": "mutable",
												"name": "_a",
												"nodeType": "VariableDeclaration",
												"scope": 1423,
												"src": "456:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1406,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "456:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1409,
												"mutability": "mutable",
												"name": "_b",
												"nodeType": "VariableDeclaration",
												"scope": 1423,
												"src": "468:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1408,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "468:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "455:24:5"
									},
									"returnParameters": {
										"id": 1413,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "498:0:5"
									},
									"scope": 1726,
									"src": "435:110:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1434,
										"nodeType": "Block",
										"src": "612:38:5",
										"statements": [
											{
												"expression": {
													"components": [
														{
															"id": 1430,
															"name": "coinA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1403,
															"src": "630:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1431,
															"name": "coinB",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1405,
															"src": "637:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"id": 1432,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "629:14:5",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_address_$",
														"typeString": "tuple(address,address)"
													}
												},
												"functionReturnParameters": 1429,
												"id": 1433,
												"nodeType": "Return",
												"src": "622:21:5"
											}
										]
									},
									"functionSelector": "1a727c26",
									"id": 1435,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "queryPair",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1424,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "569:2:5"
									},
									"returnParameters": {
										"id": 1429,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1426,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1435,
												"src": "595:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1425,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "595:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1428,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1435,
												"src": "604:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1427,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "604:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "594:18:5"
									},
									"scope": 1726,
									"src": "551:99:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1513,
										"nodeType": "Block",
										"src": "760:581:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1452,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "857:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1453,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "857:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1456,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "877:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Univ2Protocal_$1726",
																		"typeString": "contract Univ2Protocal"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Univ2Protocal_$1726",
																		"typeString": "contract Univ2Protocal"
																	}
																],
																"id": 1455,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "869:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1454,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "869:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1457,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "869:13:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1458,
															"name": "_aAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1437,
															"src": "884:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1449,
																	"name": "coinA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1403,
																	"src": "837:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1448,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 190,
																"src": "830:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1450,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "830:13:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														"id": 1451,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 189,
														"src": "830:26:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,address,uint256) external returns (bool)"
														}
													},
													"id": 1459,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "830:63:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1460,
												"nodeType": "ExpressionStatement",
												"src": "830:63:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1465,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "990:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1466,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "990:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1469,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1010:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Univ2Protocal_$1726",
																		"typeString": "contract Univ2Protocal"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Univ2Protocal_$1726",
																		"typeString": "contract Univ2Protocal"
																	}
																],
																"id": 1468,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1002:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1467,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1002:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1470,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1002:13:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1471,
															"name": "_bAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1439,
															"src": "1017:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1462,
																	"name": "coinB",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1405,
																	"src": "970:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1461,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 190,
																"src": "963:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1463,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "963:13:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														"id": 1464,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 189,
														"src": "963:26:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,address,uint256) external returns (bool)"
														}
													},
													"id": 1472,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "963:63:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1473,
												"nodeType": "ExpressionStatement",
												"src": "963:63:5"
											},
											{
												"assignments": [
													1475,
													1477
												],
												"declarations": [
													{
														"constant": false,
														"id": 1475,
														"mutability": "mutable",
														"name": "successA",
														"nodeType": "VariableDeclaration",
														"scope": 1513,
														"src": "1038:13:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1474,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "1038:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1477,
														"mutability": "mutable",
														"name": "resA",
														"nodeType": "VariableDeclaration",
														"scope": 1513,
														"src": "1053:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1476,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1053:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1483,
												"initialValue": {
													"arguments": [
														{
															"id": 1480,
															"name": "aAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1399,
															"src": "1085:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1481,
															"name": "_aAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1437,
															"src": "1094:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1478,
															"name": "SafeMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1389,
															"src": "1069:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeMath_$1389_$",
																"typeString": "type(library SafeMath)"
															}
														},
														"id": 1479,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "tryAdd",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1112,
														"src": "1069:15:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (bool,uint256)"
														}
													},
													"id": 1482,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1069:34:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1037:66:5"
											},
											{
												"assignments": [
													1485,
													1487
												],
												"declarations": [
													{
														"constant": false,
														"id": 1485,
														"mutability": "mutable",
														"name": "successB",
														"nodeType": "VariableDeclaration",
														"scope": 1513,
														"src": "1114:13:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1484,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "1114:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1487,
														"mutability": "mutable",
														"name": "resB",
														"nodeType": "VariableDeclaration",
														"scope": 1513,
														"src": "1129:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1486,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1129:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1493,
												"initialValue": {
													"arguments": [
														{
															"id": 1490,
															"name": "bAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1401,
															"src": "1161:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1491,
															"name": "_bAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1439,
															"src": "1170:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1488,
															"name": "SafeMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1389,
															"src": "1145:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeMath_$1389_$",
																"typeString": "type(library SafeMath)"
															}
														},
														"id": 1489,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "tryAdd",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1112,
														"src": "1145:15:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (bool,uint256)"
														}
													},
													"id": 1492,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1145:34:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1113:66:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1497,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1495,
																"name": "successA",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1475,
																"src": "1197:8:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"id": 1496,
																"name": "successB",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1485,
																"src": "1209:8:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1197:20:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "616464206661696c202c20627920536166654d6174682e747279416464",
															"id": 1498,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1219:31:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4337cdfd5c68574db0b6060d273fdacc9ae8ef491fa78b4b476aadb2c7d8b3c2",
																"typeString": "literal_string \"add fail , by SafeMath.tryAdd\""
															},
															"value": "add fail , by SafeMath.tryAdd"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4337cdfd5c68574db0b6060d273fdacc9ae8ef491fa78b4b476aadb2c7d8b3c2",
																"typeString": "literal_string \"add fail , by SafeMath.tryAdd\""
															}
														],
														"id": 1494,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1189:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1499,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1189:62:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1500,
												"nodeType": "ExpressionStatement",
												"src": "1189:62:5"
											},
											{
												"expression": {
													"id": 1503,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1501,
														"name": "aAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1399,
														"src": "1261:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1502,
														"name": "resA",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1477,
														"src": "1271:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1261:14:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1504,
												"nodeType": "ExpressionStatement",
												"src": "1261:14:5"
											},
											{
												"expression": {
													"id": 1507,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1505,
														"name": "bAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1401,
														"src": "1285:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1506,
														"name": "resB",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1487,
														"src": "1295:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1285:14:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1508,
												"nodeType": "ExpressionStatement",
												"src": "1285:14:5"
											},
											{
												"expression": {
													"components": [
														{
															"id": 1509,
															"name": "aAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1399,
															"src": "1317:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1510,
															"name": "bAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1401,
															"src": "1326:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1511,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1316:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
														"typeString": "tuple(uint256,uint256)"
													}
												},
												"functionReturnParameters": 1447,
												"id": 1512,
												"nodeType": "Return",
												"src": "1309:25:5"
											}
										]
									},
									"functionSelector": "9cd441da",
									"id": 1514,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1442,
											"modifierName": {
												"id": 1441,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "723:9:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "723:9:5"
										}
									],
									"name": "addLiquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1440,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1437,
												"mutability": "mutable",
												"name": "_aAmount",
												"nodeType": "VariableDeclaration",
												"scope": 1514,
												"src": "678:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1436,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "678:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1439,
												"mutability": "mutable",
												"name": "_bAmount",
												"nodeType": "VariableDeclaration",
												"scope": 1514,
												"src": "696:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1438,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "696:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "677:36:5"
									},
									"returnParameters": {
										"id": 1447,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1444,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1514,
												"src": "742:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1443,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "742:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1446,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1514,
												"src": "751:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1445,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "751:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "741:18:5"
									},
									"scope": 1726,
									"src": "656:685:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1700,
										"nodeType": "Block",
										"src": "1443:1810:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1531,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1526,
																"name": "_tokenIn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1516,
																"src": "1461:8:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1529,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1481:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1528,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1473:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1527,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1473:7:5",
																		"typeDescriptions": {}
																	}
																},
																"id": 1530,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1473:10:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1461:22:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "746f6b656e496e2063616e206e6f74206265207a65726f2061646472657373",
															"id": 1532,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1485:33:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ee1bb919b7d803d612a588aa2d3c76f58e496c5e0e171750a929f3aabba11471",
																"typeString": "literal_string \"tokenIn can not be zero address\""
															},
															"value": "tokenIn can not be zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ee1bb919b7d803d612a588aa2d3c76f58e496c5e0e171750a929f3aabba11471",
																"typeString": "literal_string \"tokenIn can not be zero address\""
															}
														],
														"id": 1525,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1453:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1533,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1453:66:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1534,
												"nodeType": "ExpressionStatement",
												"src": "1453:66:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1541,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1536,
																"name": "_to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1522,
																"src": "1537:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1539,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1552:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1538,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1544:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1537,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1544:7:5",
																		"typeDescriptions": {}
																	}
																},
																"id": 1540,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1544:10:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1537:17:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5f746f2063616e206e6f74206265207a65726f2061646472657373",
															"id": 1542,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1556:29:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_eb769f39a40bd11862b348c781a111e0dc4d12f234ca57b18ea9b1f585a5edc1",
																"typeString": "literal_string \"_to can not be zero address\""
															},
															"value": "_to can not be zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_eb769f39a40bd11862b348c781a111e0dc4d12f234ca57b18ea9b1f585a5edc1",
																"typeString": "literal_string \"_to can not be zero address\""
															}
														],
														"id": 1535,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1529:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1543,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1529:57:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1544,
												"nodeType": "ExpressionStatement",
												"src": "1529:57:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1552,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 1548,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1546,
																	"name": "_tokenIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1516,
																	"src": "1604:8:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 1547,
																	"name": "coinA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1403,
																	"src": "1616:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "1604:17:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 1551,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1549,
																	"name": "_tokenIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1516,
																	"src": "1625:8:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 1550,
																	"name": "coinB",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1405,
																	"src": "1637:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "1625:17:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1604:38:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "746f6b656e496e206d7573742062652041206f72204220746861742068617320626520736574",
															"id": 1553,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1644:40:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c3b506890a40fd410855a187665159c4979fd1d4a1cd0a2574a9a88822e93850",
																"typeString": "literal_string \"tokenIn must be A or B that has be set\""
															},
															"value": "tokenIn must be A or B that has be set"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c3b506890a40fd410855a187665159c4979fd1d4a1cd0a2574a9a88822e93850",
																"typeString": "literal_string \"tokenIn must be A or B that has be set\""
															}
														],
														"id": 1545,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1596:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1554,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1596:89:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1555,
												"nodeType": "ExpressionStatement",
												"src": "1596:89:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1558,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1556,
														"name": "_tokenIn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1516,
														"src": "1727:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 1557,
														"name": "coinA",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1403,
														"src": "1739:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1727:17:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 1629,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1627,
															"name": "_tokenIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1516,
															"src": "2505:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 1628,
															"name": "coinB",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1405,
															"src": "2517:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "2505:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1698,
													"nodeType": "IfStatement",
													"src": "2501:746:5",
													"trueBody": {
														"id": 1697,
														"nodeType": "Block",
														"src": "2524:723:5",
														"statements": [
															{
																"expression": {
																	"arguments": [
																		{
																			"expression": {
																				"id": 1634,
																				"name": "msg",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967281,
																				"src": "2630:3:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_message",
																					"typeString": "msg"
																				}
																			},
																			"id": 1635,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "sender",
																			"nodeType": "MemberAccess",
																			"src": "2630:10:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"arguments": [
																				{
																					"id": 1638,
																					"name": "this",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967268,
																					"src": "2650:4:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_Univ2Protocal_$1726",
																						"typeString": "contract Univ2Protocal"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_Univ2Protocal_$1726",
																						"typeString": "contract Univ2Protocal"
																					}
																				],
																				"id": 1637,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "2642:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 1636,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "2642:7:5",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1639,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2642:13:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1640,
																			"name": "_amountIn",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1518,
																			"src": "2657:9:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"arguments": [
																				{
																					"id": 1631,
																					"name": "coinA",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1403,
																					"src": "2610:5:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1630,
																				"name": "IERC20",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 190,
																				"src": "2603:6:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																					"typeString": "type(contract IERC20)"
																				}
																			},
																			"id": 1632,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2603:13:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$190",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 1633,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 189,
																		"src": "2603:26:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 1641,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2603:64:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"id": 1642,
																"nodeType": "ExpressionStatement",
																"src": "2603:64:5"
															},
															{
																"assignments": [
																	1644,
																	1646
																],
																"declarations": [
																	{
																		"constant": false,
																		"id": 1644,
																		"mutability": "mutable",
																		"name": "success",
																		"nodeType": "VariableDeclaration",
																		"scope": 1697,
																		"src": "2683:12:5",
																		"stateVariable": false,
																		"storageLocation": "default",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"typeName": {
																			"id": 1643,
																			"name": "bool",
																			"nodeType": "ElementaryTypeName",
																			"src": "2683:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"visibility": "internal"
																	},
																	{
																		"constant": false,
																		"id": 1646,
																		"mutability": "mutable",
																		"name": "res",
																		"nodeType": "VariableDeclaration",
																		"scope": 1697,
																		"src": "2697:8:5",
																		"stateVariable": false,
																		"storageLocation": "default",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"typeName": {
																			"id": 1645,
																			"name": "uint",
																			"nodeType": "ElementaryTypeName",
																			"src": "2697:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"visibility": "internal"
																	}
																],
																"id": 1652,
																"initialValue": {
																	"arguments": [
																		{
																			"id": 1649,
																			"name": "bAmount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1401,
																			"src": "2725:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"id": 1650,
																			"name": "_amountIn",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1518,
																			"src": "2734:9:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 1647,
																			"name": "SafeMath",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1389,
																			"src": "2709:8:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_SafeMath_$1389_$",
																				"typeString": "type(library SafeMath)"
																			}
																		},
																		"id": 1648,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "tryAdd",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1112,
																		"src": "2709:15:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (bool,uint256)"
																		}
																	},
																	"id": 1651,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2709:35:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																		"typeString": "tuple(bool,uint256)"
																	}
																},
																"nodeType": "VariableDeclarationStatement",
																"src": "2682:62:5"
															},
															{
																"expression": {
																	"arguments": [
																		{
																			"id": 1654,
																			"name": "success",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1644,
																			"src": "2766:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		{
																			"hexValue": "746f6b656e496e20616d6f756e7420616464206661696c2c20736f757263652066726f6d20736166654d617468",
																			"id": 1655,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "string",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2775:47:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_stringliteral_bc6f5779ae692f37c9b00da7a6d431e94538b09b47b02ad0cb826da30a5f9a62",
																				"typeString": "literal_string \"tokenIn amount add fail, source from safeMath\""
																			},
																			"value": "tokenIn amount add fail, source from safeMath"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			{
																				"typeIdentifier": "t_stringliteral_bc6f5779ae692f37c9b00da7a6d431e94538b09b47b02ad0cb826da30a5f9a62",
																				"typeString": "literal_string \"tokenIn amount add fail, source from safeMath\""
																			}
																		],
																		"id": 1653,
																		"name": "require",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			4294967278,
																			4294967278
																		],
																		"referencedDeclaration": 4294967278,
																		"src": "2758:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																			"typeString": "function (bool,string memory) pure"
																		}
																	},
																	"id": 1656,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2758:65:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 1657,
																"nodeType": "ExpressionStatement",
																"src": "2758:65:5"
															},
															{
																"expression": {
																	"id": 1660,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"id": 1658,
																		"name": "bAmount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1401,
																		"src": "2837:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "=",
																	"rightHandSide": {
																		"id": 1659,
																		"name": "res",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1646,
																		"src": "2847:3:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2837:13:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1661,
																"nodeType": "ExpressionStatement",
																"src": "2837:13:5"
															},
															{
																"assignments": [
																	1663
																],
																"declarations": [
																	{
																		"constant": false,
																		"id": 1663,
																		"mutability": "mutable",
																		"name": "swapAmount",
																		"nodeType": "VariableDeclaration",
																		"scope": 1697,
																		"src": "2865:18:5",
																		"stateVariable": false,
																		"storageLocation": "default",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"typeName": {
																			"id": 1662,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "2865:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"visibility": "internal"
																	}
																],
																"id": 1670,
																"initialValue": {
																	"arguments": [
																		{
																			"id": 1666,
																			"name": "_amountIn",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1518,
																			"src": "2898:9:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"id": 1667,
																			"name": "aAmount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1399,
																			"src": "2909:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"id": 1668,
																			"name": "bAmount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1401,
																			"src": "2918:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 1664,
																			"name": "Math",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1077,
																			"src": "2886:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_Math_$1077_$",
																				"typeString": "type(library Math)"
																			}
																		},
																		"id": 1665,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "mulDiv",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 425,
																		"src": "2886:11:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1669,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2886:40:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "VariableDeclarationStatement",
																"src": "2865:61:5"
															},
															{
																"expression": {
																	"arguments": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1674,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1672,
																				"name": "swapAmount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1663,
																				"src": "2948:10:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">",
																			"rightExpression": {
																				"id": 1673,
																				"name": "_amountOutMin",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1520,
																				"src": "2961:13:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "2948:26:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		{
																			"hexValue": "616d6f756e744f7574206c657373207468616e205f616d6f756e744f75744d696e",
																			"id": 1675,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "string",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2976:35:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_stringliteral_497078f79163175cc78d87055f82228b7033ca1eca1d87771351ccf046fb1ac1",
																				"typeString": "literal_string \"amountOut less than _amountOutMin\""
																			},
																			"value": "amountOut less than _amountOutMin"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			{
																				"typeIdentifier": "t_stringliteral_497078f79163175cc78d87055f82228b7033ca1eca1d87771351ccf046fb1ac1",
																				"typeString": "literal_string \"amountOut less than _amountOutMin\""
																			}
																		],
																		"id": 1671,
																		"name": "require",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			4294967278,
																			4294967278
																		],
																		"referencedDeclaration": 4294967278,
																		"src": "2940:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																			"typeString": "function (bool,string memory) pure"
																		}
																	},
																	"id": 1676,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2940:72:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 1677,
																"nodeType": "ExpressionStatement",
																"src": "2940:72:5"
															},
															{
																"expression": {
																	"arguments": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1681,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1679,
																				"name": "swapAmount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1663,
																				"src": "3034:10:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "<",
																			"rightExpression": {
																				"id": 1680,
																				"name": "aAmount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1399,
																				"src": "3047:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "3034:20:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		{
																			"hexValue": "746f6b656e4f757420616d6f756e74206e6f7420656e6f756768",
																			"id": 1682,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "string",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3056:28:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_stringliteral_cf912b2603b1f63d525e98d065e83dcb24a37d03f8d299cd98363fb8f2c1858a",
																				"typeString": "literal_string \"tokenOut amount not enough\""
																			},
																			"value": "tokenOut amount not enough"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			{
																				"typeIdentifier": "t_stringliteral_cf912b2603b1f63d525e98d065e83dcb24a37d03f8d299cd98363fb8f2c1858a",
																				"typeString": "literal_string \"tokenOut amount not enough\""
																			}
																		],
																		"id": 1678,
																		"name": "require",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			4294967278,
																			4294967278
																		],
																		"referencedDeclaration": 4294967278,
																		"src": "3026:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																			"typeString": "function (bool,string memory) pure"
																		}
																	},
																	"id": 1683,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3026:59:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 1684,
																"nodeType": "ExpressionStatement",
																"src": "3026:59:5"
															},
															{
																"expression": {
																	"id": 1687,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"id": 1685,
																		"name": "aAmount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1399,
																		"src": "3099:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "-=",
																	"rightHandSide": {
																		"id": 1686,
																		"name": "swapAmount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1663,
																		"src": "3110:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "3099:21:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1688,
																"nodeType": "ExpressionStatement",
																"src": "3099:21:5"
															},
															{
																"expression": {
																	"arguments": [
																		{
																			"id": 1693,
																			"name": "_to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1522,
																			"src": "3220:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1694,
																			"name": "swapAmount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1663,
																			"src": "3225:10:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"arguments": [
																				{
																					"id": 1690,
																					"name": "coinA",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1403,
																					"src": "3204:5:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1689,
																				"name": "IERC20",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 190,
																				"src": "3197:6:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																					"typeString": "type(contract IERC20)"
																				}
																			},
																			"id": 1691,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "3197:13:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$190",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 1692,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 157,
																		"src": "3197:22:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 1695,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3197:39:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"id": 1696,
																"nodeType": "ExpressionStatement",
																"src": "3197:39:5"
															}
														]
													}
												},
												"id": 1699,
												"nodeType": "IfStatement",
												"src": "1723:1524:5",
												"trueBody": {
													"id": 1626,
													"nodeType": "Block",
													"src": "1746:750:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1563,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "1852:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1564,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "1852:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"id": 1567,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "1872:4:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_Univ2Protocal_$1726",
																					"typeString": "contract Univ2Protocal"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_Univ2Protocal_$1726",
																					"typeString": "contract Univ2Protocal"
																				}
																			],
																			"id": 1566,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1864:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1565,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "1864:7:5",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1568,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1864:13:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1569,
																		"name": "_amountIn",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1518,
																		"src": "1879:9:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1560,
																				"name": "coinA",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1403,
																				"src": "1832:5:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1559,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 190,
																			"src": "1825:6:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1561,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1825:13:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$190",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1562,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "transferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 189,
																	"src": "1825:26:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	}
																},
																"id": 1570,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1825:64:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1571,
															"nodeType": "ExpressionStatement",
															"src": "1825:64:5"
														},
														{
															"assignments": [
																1573,
																1575
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1573,
																	"mutability": "mutable",
																	"name": "success",
																	"nodeType": "VariableDeclaration",
																	"scope": 1626,
																	"src": "1905:12:5",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 1572,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "1905:4:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"visibility": "internal"
																},
																{
																	"constant": false,
																	"id": 1575,
																	"mutability": "mutable",
																	"name": "res",
																	"nodeType": "VariableDeclaration",
																	"scope": 1626,
																	"src": "1919:8:5",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1574,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "1919:4:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1581,
															"initialValue": {
																"arguments": [
																	{
																		"id": 1578,
																		"name": "aAmount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1399,
																		"src": "1947:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1579,
																		"name": "_amountIn",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1518,
																		"src": "1956:9:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1576,
																		"name": "SafeMath",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1389,
																		"src": "1931:8:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_SafeMath_$1389_$",
																			"typeString": "type(library SafeMath)"
																		}
																	},
																	"id": 1577,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "tryAdd",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1112,
																	"src": "1931:15:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$",
																		"typeString": "function (uint256,uint256) pure returns (bool,uint256)"
																	}
																},
																"id": 1580,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1931:35:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																	"typeString": "tuple(bool,uint256)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "1904:62:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1583,
																		"name": "success",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1573,
																		"src": "1988:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "746f6b656e496e20616d6f756e7420616464206661696c2c20736f757263652066726f6d20736166654d617468",
																		"id": 1584,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1997:47:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_bc6f5779ae692f37c9b00da7a6d431e94538b09b47b02ad0cb826da30a5f9a62",
																			"typeString": "literal_string \"tokenIn amount add fail, source from safeMath\""
																		},
																		"value": "tokenIn amount add fail, source from safeMath"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_bc6f5779ae692f37c9b00da7a6d431e94538b09b47b02ad0cb826da30a5f9a62",
																			"typeString": "literal_string \"tokenIn amount add fail, source from safeMath\""
																		}
																	],
																	"id": 1582,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "1980:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1585,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1980:65:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1586,
															"nodeType": "ExpressionStatement",
															"src": "1980:65:5"
														},
														{
															"expression": {
																"id": 1589,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1587,
																	"name": "aAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1399,
																	"src": "2059:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 1588,
																	"name": "res",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1575,
																	"src": "2069:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2059:13:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1590,
															"nodeType": "ExpressionStatement",
															"src": "2059:13:5"
														},
														{
															"assignments": [
																1592
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1592,
																	"mutability": "mutable",
																	"name": "swapAmount",
																	"nodeType": "VariableDeclaration",
																	"scope": 1626,
																	"src": "2087:18:5",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1591,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "2087:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1599,
															"initialValue": {
																"arguments": [
																	{
																		"id": 1595,
																		"name": "_amountIn",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1518,
																		"src": "2120:9:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1596,
																		"name": "bAmount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1401,
																		"src": "2131:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1597,
																		"name": "aAmount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1399,
																		"src": "2140:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1593,
																		"name": "Math",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1077,
																		"src": "2108:4:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Math_$1077_$",
																			"typeString": "type(library Math)"
																		}
																	},
																	"id": 1594,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "mulDiv",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 425,
																	"src": "2108:11:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																	}
																},
																"id": 1598,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2108:40:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "2087:61:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1603,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1601,
																			"name": "swapAmount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1592,
																			"src": "2170:10:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">",
																		"rightExpression": {
																			"id": 1602,
																			"name": "_amountOutMin",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1520,
																			"src": "2183:13:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "2170:26:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "616d6f756e744f7574206c657373207468616e205f616d6f756e744f75744d696e",
																		"id": 1604,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2198:35:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_497078f79163175cc78d87055f82228b7033ca1eca1d87771351ccf046fb1ac1",
																			"typeString": "literal_string \"amountOut less than _amountOutMin\""
																		},
																		"value": "amountOut less than _amountOutMin"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_497078f79163175cc78d87055f82228b7033ca1eca1d87771351ccf046fb1ac1",
																			"typeString": "literal_string \"amountOut less than _amountOutMin\""
																		}
																	],
																	"id": 1600,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "2162:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1605,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2162:72:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1606,
															"nodeType": "ExpressionStatement",
															"src": "2162:72:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1610,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1608,
																			"name": "swapAmount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1592,
																			"src": "2256:10:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"id": 1609,
																			"name": "bAmount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1401,
																			"src": "2269:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "2256:20:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "746f6b656e4f757420616d6f756e74206e6f7420656e6f756768",
																		"id": 1611,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2278:28:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_cf912b2603b1f63d525e98d065e83dcb24a37d03f8d299cd98363fb8f2c1858a",
																			"typeString": "literal_string \"tokenOut amount not enough\""
																		},
																		"value": "tokenOut amount not enough"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_cf912b2603b1f63d525e98d065e83dcb24a37d03f8d299cd98363fb8f2c1858a",
																			"typeString": "literal_string \"tokenOut amount not enough\""
																		}
																	],
																	"id": 1607,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "2248:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1612,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2248:59:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1613,
															"nodeType": "ExpressionStatement",
															"src": "2248:59:5"
														},
														{
															"expression": {
																"id": 1616,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1614,
																	"name": "bAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1401,
																	"src": "2321:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"id": 1615,
																	"name": "swapAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1592,
																	"src": "2332:10:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2321:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1617,
															"nodeType": "ExpressionStatement",
															"src": "2321:21:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1622,
																		"name": "_to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1522,
																		"src": "2442:3:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1623,
																		"name": "swapAmount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1592,
																		"src": "2447:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1619,
																				"name": "coinB",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1405,
																				"src": "2426:5:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1618,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 190,
																			"src": "2419:6:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1620,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2419:13:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$190",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1621,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 157,
																	"src": "2419:22:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																"id": 1624,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2419:39:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1625,
															"nodeType": "ExpressionStatement",
															"src": "2419:39:5"
														}
													]
												}
											}
										]
									},
									"functionSelector": "f3e6ea8a",
									"id": 1701,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "swap",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1523,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1516,
												"mutability": "mutable",
												"name": "_tokenIn",
												"nodeType": "VariableDeclaration",
												"scope": 1701,
												"src": "1361:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1515,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1361:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1518,
												"mutability": "mutable",
												"name": "_amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 1701,
												"src": "1379:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1517,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1379:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1520,
												"mutability": "mutable",
												"name": "_amountOutMin",
												"nodeType": "VariableDeclaration",
												"scope": 1701,
												"src": "1398:21:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1519,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1398:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1522,
												"mutability": "mutable",
												"name": "_to",
												"nodeType": "VariableDeclaration",
												"scope": 1701,
												"src": "1421:11:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1521,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1421:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1360:73:5"
									},
									"returnParameters": {
										"id": 1524,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1443:0:5"
									},
									"scope": 1726,
									"src": "1347:1906:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1724,
										"nodeType": "Block",
										"src": "3295:131:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1710,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1705,
																"name": "coinA",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1403,
																"src": "3313:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1708,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3330:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1707,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3322:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1706,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "3322:7:5",
																		"typeDescriptions": {}
																	}
																},
																"id": 1709,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3322:10:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "3313:19:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "636f696e4120686173206e6f7420626520736574",
															"id": 1711,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3334:22:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3f6a2b0f4c1e04c95175afbc0b7af7450b2d492f6ca091adc979b7c32c377ad7",
																"typeString": "literal_string \"coinA has not be set\""
															},
															"value": "coinA has not be set"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_3f6a2b0f4c1e04c95175afbc0b7af7450b2d492f6ca091adc979b7c32c377ad7",
																"typeString": "literal_string \"coinA has not be set\""
															}
														],
														"id": 1704,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3305:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1712,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3305:52:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1713,
												"nodeType": "ExpressionStatement",
												"src": "3305:52:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1720,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1715,
																"name": "coinB",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1405,
																"src": "3375:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1718,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3392:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1717,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3384:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1716,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "3384:7:5",
																		"typeDescriptions": {}
																	}
																},
																"id": 1719,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3384:10:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "3375:19:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "636f696e4220686173206e6f7420626520736574",
															"id": 1721,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3396:22:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_940b55294a43fd06fd282912d0bb5b09c1ece32ebe4080c1ed3c7bd6c9f72d8f",
																"typeString": "literal_string \"coinB has not be set\""
															},
															"value": "coinB has not be set"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_940b55294a43fd06fd282912d0bb5b09c1ece32ebe4080c1ed3c7bd6c9f72d8f",
																"typeString": "literal_string \"coinB has not be set\""
															}
														],
														"id": 1714,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3367:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1722,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3367:52:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1723,
												"nodeType": "ExpressionStatement",
												"src": "3367:52:5"
											}
										]
									},
									"id": 1725,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkInit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1702,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3278:2:5"
									},
									"returnParameters": {
										"id": 1703,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3295:0:5"
									},
									"scope": 1726,
									"src": "3259:167:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1727,
							"src": "279:3150:5"
						}
					],
					"src": "32:3397:5"
				},
				"id": 5
			}
		}
	}
}